<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20110701" xmlns:xmi="http://www.omg.org/spec/XMI/20110701" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.omg.org/spec/UML/20110701" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xsi:schemaLocation="http://www.omg.org/spec/UML/20110701 http://www.eclipse.org/uml2/4.0.0/UML" xmlns:cmof="http://www.omg.org/spec/MOF/20110701/cmof.xmi">
  <uml:Package xmi:id="NIEM_UML_Profile" name="NIEM_UML_Profile">
    <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-ownedComment" annotatedElement="NIEM_UML_Profile">
      <body>NIEM-UML leverages three profiles. The NIEM PIM Profile is used for NIEM PIMs. The NIEM
        PSM Profile is used for NIEM PSMs and may also be used to mark up a NIEM PIM for direct
        provisioning of MPD artifacts. Both of these profiles import the NIEM Common Profile, which
        contains the core stereotypes used to represent NIEM structures in UML. Finally, the Model
        Package Description Profile is used for creating models of MPDs, which may be used in
        association with either NIEM PIMs or NIEM PSMs. For convenience, an overall NIEM UML Profile
        is also included, which imports the NIEM PIM, NIEM PSM and Model Package Description
        Profiles. Applying the single NIEM UML Profile is therefore equivalent to individually
        applying all three of the imported profiles.</body>
    </ownedComment>
    <packagedElement xmi:type="uml:Profile" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile" name="NIEM_Common_Profile" URI="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_Common_Profile" metamodelReference="NIEM_UML_Profile-NIEM_Common_Profile-packageImport">
      <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
        <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkA-4FY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <contents xmi:type="ecore:EPackage" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ePackage" name="NIEM_Common_Profile" nsURI="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_Common_Profile" nsPrefix="NIEM_Common_Profile">
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkA-4lY8EeO9lbaNv599nw" name="Documentation">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkA-41Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-Documentation"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkA-5FY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkA-5VY8EeO9lbaNv599nw" key="documentation" value="self.base_Comment.annotatedElement->notEmpty() and&#xA;              self.base_Comment.annotatedElement->forAll(e|e=self.base_Comment.owner) and&#xA;              (self.base_Comment.owner.ownedComment->select(c|c.stereotypedBy('Documentation'))->size()=1)&#xA;            &#xA;self.base_Comment.profiledBy('NIEM_PSM_Profile') implies ( (&#xA;              self.base_Comment.owner.stereotypedBy('AssociationType') implies&#xA;              self.base_Comment.body.startsWith('A relationship ') ) and (&#xA;              self.base_Comment.owner.stereotypedBy('AugmentationType') implies&#xA;              self.base_Comment.body.startsWith('Supplements ') ) and (&#xA;              self.base_Comment.owner.oclAsType(NamedElement).name.match('.*Indicator.*') implies&#xA;              self.base_Comment.body.startsWith('True if ') ) and (&#xA;              self.base_Comment.owner.oclIsKindOf(DataType) implies&#xA;              self.base_Comment.body.startsWith('A data type for ') ) ) ) if(&#xA;              (self.oclIsKindOf(ndr::ndrComplexTypeDefinition)and self.abstract) or&#xA;              (self.stereotypedBy('niem::ndr::ndrElementDeclaration')and self.abstract)&#xA;              )then(self.componentDefinition.startsWith('A data concept for a ') )else(&#xA;              if(self.stereotypedBy('niem::ndr::ndrRoleType'))&#xA;              then(self.componentDefinition.startsWith('Acts as ') )else( )else(&#xA;              if(self.stereotypedBy('niem::ndr::ndrSimpleTypeDefinition'))&#xA;              then(self.componentDefinition.startsWith('A data type for ') )else(&#xA;              self.componentDefinition.startsWith('A ') or self.componentDefinition.startsWith('An&#xA;              ') )endif )endif )endif )endif )endif )endif"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkA-5lY8EeO9lbaNv599nw" name="base_Comment" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Comment"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkA-6FY8EeO9lbaNv599nw" name="MetadataType" eSuperTypes="_QkA-7VY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkA-6VY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkA-6lY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkA-61Y8EeO9lbaNv599nw" key="documentation" value="self.base_Class.general->select(g|g.stereotypedBy('MetadataType'))->isEmpty()&#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for metadata about ') or documentation.body.startsWith('A data type for&#xA;              information that further qualifies ') ) ) &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.name.match('.*MetadataType')) --For PIM Profile, the naming constraint&#xA;              is enforced by PIM/PSM transformations. &#xA;Containing Elements appropriate for a specific class of data about data is a&#xA;              Non-computational constraint. "/>
                </eAnnotations>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkA-7VY8EeO9lbaNv599nw" name="NIEMType" abstract="true">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkA-7lY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkA-71Y8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBl8FY8EeO9lbaNv599nw" key="documentation" value="self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedAttribute&#xA;              ->forAll(a|a.type.stereotypedBy('AugmentationType') implies&#xA;              a.name.match('.*Augmentation.*')) --For PIM Profile, the naming constraint is enforced&#xA;              by PIM/PSM transformations. --An augmentation element corresponds to a UML&#xA;              &lt;Property> whose type is an&#xA;              &lt;&lt;AugmentationType>>. &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedAttribute&#xA;              ->forAll(a|a.type.stereotypedBy('AssociationType') implies&#xA;              a.name.match('.*Association.*')) --For PIM Profile, the naming constraint is enforced&#xA;              by PIM/PSM transformations. --An association element corresponds to a UML&#xA;              &lt;Property> whose type is an&#xA;              &lt;&lt;AssociationType>>. &#xA;self.base_Class.ownedAttribute ->forAll(a|&#xA;              a.type.stereotypedBy('AugmentationType') implies a.clientDependency&#xA;              ->union(a.clientDependency->select(d|d.stereotypedBy('References')).target.clientDependency)&#xA;              ->select(d|d.stereotypedBy('AugmentationApplication')).target.oclAsType(Class)&#xA;              ->exists(appliedTo|self.base_Class.isConsistentWith(appliedTo)) ) &#xA;self.base_Class.ownedAttribute ->forAll(a|&#xA;              a.type.stereotypedBy('MetadataType') implies a.type.clientDependency&#xA;              ->select(d|d.stereotypedBy('MetadataApplication')).target.oclAsType(Class)&#xA;              ->exists(appliedTo|self.base_Class.isConsistentWith(appliedTo)) ) &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.name.endsWith('Type')&#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedAttribute ->forAll(a|a.type.stereotypedBy('MetadataType')&#xA;              implies a.name.match('.*Metadata.*')) --For PIM Profile, the naming constraint is&#xA;              enforced by PIM/PSM transformations. --A metadata element corresponds to a UML&#xA;              &lt;Property> whose type is a&#xA;            &lt;&lt;Metadata>>."/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBl8VY8EeO9lbaNv599nw" name="base_Class" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Class"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBl81Y8EeO9lbaNv599nw" name="ObjectType" eSuperTypes="_QkA-7VY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBl9FY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBl9VY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBl9lY8EeO9lbaNv599nw" key="documentation" value="self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) "/>
                </eAnnotations>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBl-FY8EeO9lbaNv599nw" name="MetadataApplication" eSuperTypes="_QkBl-1Y8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBl-VY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-MetadataApplication"/>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBl-1Y8EeO9lbaNv599nw" name="Application" abstract="true">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBl_FY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-Application"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBl_VY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBl_lY8EeO9lbaNv599nw" key="documentation" value="self.base_Usage.supplier->forAll(s|s.oclIsKindOf(Classifier)) and&#xA;              self.base_Usage.client ->forAll(client| client.stereotypedBy('MetadataType') or&#xA;              ( client.oclIsKindOf(Property) and&#xA;              client.oclAsType(Property).type.stereotypedBy('AugmentationType') ) )&#xA;self.base_Usage.supplier ->forAll(supplier| (supplier.oclIsKindOf(Class) or&#xA;              supplier.oclIsKindOf(DataType)) and&#xA;              supplier.getNearestPackage().stereotypedBy('Namespace') )&#xA;This constraint is decomposed into two specific cases. NDR [Rule 7-49] defines&#xA;              constraints related to applying Augmentation and NDR [Rule 7-45] defines constraints&#xA;              related to applying Metadata. &#xA;This constraint, at the UML level, is identical to NDR [Rule 7-25]. &#xA;Definitional constraint. Application of &lt;&lt;AppliesTo>>&#xA;              is optional. &#xA;This constraint is resolved by the combination of other constraints and the&#xA;              PSM-XSD transformations. &#xA;This constraint is resolved by other constraints in combination with the PSM - XSD&#xA;              transformations."/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBl_1Y8EeO9lbaNv599nw" name="base_Usage" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Usage"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmAVY8EeO9lbaNv599nw" name="Restriction">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmAlY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-Restriction"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmA1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmBFY8EeO9lbaNv599nw" key="documentation" value="self.base_Generalization.general.stereotypedBy('NIEMType') and&#xA;              self.base_Generalization.general.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->isEmpty()&#xA;              implies&#xA;              self.base_Generalization.specificl.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->isEmpty()&#xA;self.base_Generalization.specific.owner.getStereotypeApplication('Namespace').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema'&#xA;self.base_Generalization.general.oclIsKindOf(DataType) implies&#xA;              self.base_Generalization.specific.oclIsKindOf(DataType) &#xA;self.base_Generalization.specific.owner.getStereotypeApplication('Namespace').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema'&#xA;self.base_Generalization.general.stereotypedBy('NIEMType')&#xA;self.base_Generalization.general.stereotypedBy('NIEMType') and&#xA;              self.base_Generalization.general.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->notEmpty()&#xA;              implies self.base_Generalization.specific.stereotypedBy('NIEMType') and&#xA;              self.base_Generalization.specificl.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->notEmpty()&#xA;            "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmBVY8EeO9lbaNv599nw" name="base_Realization" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Realization"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmB1Y8EeO9lbaNv599nw" name="References">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmCFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-References"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmCVY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmClY8EeO9lbaNv599nw" key="documentation" value="( self.base_Realization.client->size()=1) and (&#xA;              self.base_Realization.supplier->size()=1) and&#xA;              self.base_Realization.client->forAll(client|client.oclIsKindOf(Classifier)) and&#xA;              self.base_Realization.supplier->forAll(supplier|supplier.oclIsKindOf(Classifier)&#xA;              and not(supplier.stereotypedBy('PropertyHolder')) ) ) implies ( (&#xA;              self.base_Realization.client.oclAsType(Classifier).attribute&#xA;              ->forAll(clientAttribute|&#xA;              self.base_Realization.supplier.oclAsType(Classifier).attribute&#xA;              ->forAll(supplierAttribute| (clientAttribute.name=supplierAttribute.name)&#xA;              implies ( (clientAttribute.lower>=supplierAttribute.lower) and (&#xA;              (supplierAttribute.upper=-1) or&#xA;              (clientAttribute.upper&lt;=supplierAttribute.upper) ) and (&#xA;              (clientAttribute.upper=-1) or (clientAttribute.lower&lt;=clientAttribute.upper) )&#xA;              ) ) ) ) and( self.base_Realization.supplier.oclAsType(Classifier).attribute&#xA;              ->select(a|a.lower>0) ->forAll(supplierAttribute|&#xA;              self.base_Realization.client.oclAsType(Classifier).attribute->exists(clientAttribute|clientAttribute.name=supplierName)&#xA;              ) ) )"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmC1Y8EeO9lbaNv599nw" name="base_Realization" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Realization"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmDVY8EeO9lbaNv599nw" name="ValueRestriction">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmDlY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmD1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmEFY8EeO9lbaNv599nw" key="documentation" value="self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) &#xA;self.base_DataType.generalization.general->size()=1 "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmEVY8EeO9lbaNv599nw" name="fractionDigits" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Integer"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmE1Y8EeO9lbaNv599nw" name="length" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Integer"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmFVY8EeO9lbaNv599nw" name="maxExclusive" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmF1Y8EeO9lbaNv599nw" name="maxInclusive" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmGVY8EeO9lbaNv599nw" name="maxLength" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Integer"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmG1Y8EeO9lbaNv599nw" name="minExclusive" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmHVY8EeO9lbaNv599nw" name="minInclusive" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmH1Y8EeO9lbaNv599nw" name="minLength" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Integer"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmIVY8EeO9lbaNv599nw" name="pattern" ordered="false" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmI1Y8EeO9lbaNv599nw" name="totalDigits" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Integer"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmJVY8EeO9lbaNv599nw" name="base_DataType" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//DataType"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmJ1Y8EeO9lbaNv599nw" name="AugmentationApplication" eSuperTypes="_QkBl-1Y8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmKFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmKVY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmKlY8EeO9lbaNv599nw" key="documentation" value="Implemented as part of PIM/PSM transformations. This constraint is definitional,&#xA;              the absence of an &lt;&lt;AugmentationApplication>> on an&#xA;              augmentation element will result in applicability of the element to any&#xA;              Object/Association at runtime."/>
                </eAnnotations>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmLFY8EeO9lbaNv599nw" name="Choice">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmLVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-Choice"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmLlY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmL1Y8EeO9lbaNv599nw" key="documentation" value="self.base_Class.ownedAttributes->forAll(a|(a.lower=0) and&#xA;            (a.upper=1))&#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.owner.getTargetDirectedRelationships()&#xA;              ->select(r|r.stereotypedBy('ModelPackageDescriptionFile'))&#xA;              ->forAll(mpdf|mpdf.getStereotypeApplication('ModelPackageDescriptionFile').natureURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;self.base_Class.generalization->isEmpty() and&#xA;              self.base_Class.getTargetDirectedRelationships()->select(d|d.oclIsKindOf(Generalization))->isEmpty()&#xA;            "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmMFY8EeO9lbaNv599nw" name="base_Class" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Class"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmMlY8EeO9lbaNv599nw" name="Union">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmM1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-Union"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmNFY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmNVY8EeO9lbaNv599nw" key="documentation" value="self.base_DataType.ownedAttribute->isEmpty() &#xA;self.base_DataType.generalization->isEmpty() &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmNlY8EeO9lbaNv599nw" name="base_DataType" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//DataType"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmOFY8EeO9lbaNv599nw" name="Namespace">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmOVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-Namespace"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmOlY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmO1Y8EeO9lbaNv599nw" key="documentation" value="not(self.version.oclIsUndefined()) -- Constraint also resolved by the requirement&#xA;              that tag &quot;version&quot; is required.&#xA;self.version&lt;>''&#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|t.oclIsKindOf(Class) and&#xA;              not(t.stereotypedBy('PropertyHolder')))&#xA;              ->forAll(type|type.stereotypedBy('NIEMType')) -- PIM Profile Classes default to&#xA;              &lt;&lt;ObjectType>> if not otherwise specified &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|not(t.stereotypedBy('PropertyHolder'))&#xA;              ->forAll(schemaComponent|schemaComponent.name.firstToUpper()=schemaComponent.name)&#xA;            &#xA;not(self.targetNamespace.oclIsUndefined()) and&#xA;              (self.targetNamespace&lt;>'') -- also partially satisfied by multiplicity&#xA;              constraint on targetNamespace &#xA;self.profiledBy('NIEM_PSM_Profile') implies self.base_Package.ownedType&#xA;              ->select(t|t.oclIsKindOf(DataType))&#xA;              ->forAll(simpleType|simpleType.name.matches('.*SimpleType')) &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType->select(t|t.oclIsKindOf(Enumeration))&#xA;              ->forAll(otherType|otherType.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) )&#xA;            &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|t.oclIsKindOf(Enumeration))&#xA;              ->forAll(enumerationDerivedType|enumerationDerivedType.name.matches('.*Code.*'))&#xA;self.targetNamespace.isAbsoluteURI()&#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|&#xA;              t.clientDependency->select(d|d.stereotypedBy('XSDSimpleContent')).supplier->exists(s|s.oclIsKindOf(Enumeration))&#xA;              or ( t.oclIsKindOf(Classifier) and&#xA;              t.oclAsType(Classifier).allParents().clientDependency->select(d|d.stereotypedBy('XSDSimpleContent')).supplier->exists(s|s.oclIsKindOf(Enumeration))&#xA;              ) )&#xA;              ->forAll(enumerationDerivedType|enumerationDerivedType.name.matches('.*Code.*'))&#xA;            &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))&#xA;            &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|not(t.stereotypedBy('PropertyHolder'))&#xA;              ->forAll(schemaComponent|schemaComponent.name.match('[\\w|\\-]*')) &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))&#xA;            "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmPFY8EeO9lbaNv599nw" name="base_Package" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Package"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmPlY8EeO9lbaNv599nw" name="targetNamespace" ordered="false" lowerBound="1" defaultValueLiteral="http://domain.gov/myDomain/">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmQFY8EeO9lbaNv599nw" name="isConformant" ordered="false" lowerBound="1" defaultValueLiteral="true">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Boolean"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmQlY8EeO9lbaNv599nw" name="version" ordered="false" lowerBound="1" defaultValueLiteral="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_QkBmRFY8EeO9lbaNv599nw" name="defaultPrefix" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmRlY8EeO9lbaNv599nw" name="UnionOf">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmR1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmSFY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmSVY8EeO9lbaNv599nw" key="documentation" value="self.base_Usage.supplier.oclKindOf(DataType)&#xA;self.base_Usage.client.stereotypedBy('Union')"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmSlY8EeO9lbaNv599nw" name="base_Usage" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Usage"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmTFY8EeO9lbaNv599nw" name="AugmentationType" eSuperTypes="_QkA-7VY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmTVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmTlY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmT1Y8EeO9lbaNv599nw" key="documentation" value="The constraint is enforced by the transformation from PSM to XSD Schema artifact.&#xA;              A property whose type is an &lt;&lt;AugmentationType>> is an&#xA;              augmentation element. The property may directly or indirectly use the UML&#xA;              subsettedProperty mechanism to identify a substitutionGroup, which will be&#xA;              transitively substitutable for the element structures:Augmentation. &#xA;(self.base_Class.general()->size()&lt;=1) and&#xA;              self.base_Class.general()->forAll(g|g.stereotypedBy('AugmentationType')) and&#xA;              self.base_Class.getTargetDirectedRelationships()&#xA;              ->forAll(r|r.oclIsKindOf(Gneralization) implies&#xA;              r.oclAsType(Generalization).specific.stereotypedBy('AugmentationType')) &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and documentation.body.startsWith('A data&#xA;              type that supplements ') ) &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.name.match('.*AugmentationType')) --For PIM Profile, the naming&#xA;              constraint is enforced by PIM/PSM transformations. "/>
                </eAnnotations>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmUVY8EeO9lbaNv599nw" name="AssociationType" eSuperTypes="_QkA-7VY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmUlY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmU1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmVFY8EeO9lbaNv599nw" key="documentation" value="self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedAttribute ->forAll(a|a.name.endsWith('Reference') implies&#xA;              (a.aggregation=AggregationKind::none))&#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and documentation.body.startsWith('A data&#xA;              type for a relationship ') ) &#xA;(self.base_Class.generalization->size()&lt;=1) and&#xA;              self.base_Class.generalization.general->forAll(g|g.stereotypedBy('Association'))&#xA;              and self.base_Class.getTargetDirectedRelationships()&#xA;              ->select(r|r.oclIsKindOf(Generalization)).oclAsType(Generalization).specific&#xA;              ->forAll(s|s.stereotypedBy('Association'))&#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.name.match('.*AssociationType')) --For PIM Profile, the naming&#xA;              constraint is enforced by PIM/PSM transformations. "/>
                </eAnnotations>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmVlY8EeO9lbaNv599nw" name="PropertyHolder">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmV1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-PropertyHolder"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmWFY8EeO9lbaNv599nw" name="base_Class" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Class"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmWlY8EeO9lbaNv599nw" name="List">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmW1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-List"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmXFY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmXVY8EeO9lbaNv599nw" key="documentation" value="self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) &#xA;self.base_DataType.generalization->isEmpty()&#xA;(self.base_DataType.ownedAttribute->size()=1) and&#xA;              self.base_DataType.ownedAttribute ->forAll(a|(a.lower=0) and (a.upper=-1)) "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_QkBmXlY8EeO9lbaNv599nw" name="base_DataType" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//DataType"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_QkBmYFY8EeO9lbaNv599nw" name="AdapterType" eSuperTypes="_QkA-7VY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmYVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_QkBmYlY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_QkBmY1Y8EeO9lbaNv599nw" key="documentation" value="self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Class.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) "/>
                </eAnnotations>
              </xmi:Extension>
            </eClassifiers>
          </contents>
        </eAnnotations>
      </xmi:Extension>
      <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile">
        <body>The NIEM Common Profile comprises stereotypes that are used in both the NIEM PIM
          Profile and the NIEM PSM Profile. In addition, the UML metamodel subset covered by the
          NIEM Common Profile also includes the metaclasses PrimitiveType, Enumeration,
          EnumerationLiteral, Property and Generalization, even though they are not specifically
          extended by any stereotypes in the profile.</body>
      </ownedComment>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packageImport" importingNamespace="NIEM_UML_Profile-NIEM_Common_Profile">
        <importedPackage xmi:type="uml:Model" href="http://www.omg.org/spec/UML/20110701/UML.xmi#_0"/>
      </packageImport>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation" name="Documentation">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Documentation">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A Documentation Comment is the data definition of the Element that
            owns it.  For an Element owning only one Comment, that Comment will be inferred to be a
            Documentation Comment. &lt;/p> &lt;p> A Documentation Comment
            owned by an Element representing a NIEM type or property is implemented as a
            documentation element of the annotation for the corresponding type definition or
            property declaration. &lt;/p> &lt;/body> &lt;/html> ng
            type definition or property declaration. &lt;/p> &lt;/body>
            &lt;/html> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-Max_One___Documentation___per_Element" name="Max One &lt;&lt;Documentation>> per Element" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Documentation" context="NIEM_UML_Profile-NIEM_Common_Profile-Documentation">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-Max_One___Documentation___per_Element-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-Max_One___Documentation___per_Element">
            <body>The owner of a Documentation Comment must have no other Documentation Comments.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-Max_One___Documentation___per_Element-specification">
            <language>OCL2.0</language>
            <body>self.base_Comment.annotatedElement->notEmpty() and
              self.base_Comment.annotatedElement->forAll(e|e=self.base_Comment.owner) and
              (self.base_Comment.owner.ownedComment->select(c|c.stereotypedBy('Documentation'))->size()=1)
            </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-Documentation">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Comment.profiledBy('NIEM_PSM_Profile') implies ( (
              self.base_Comment.owner.stereotypedBy('AssociationType') implies
              self.base_Comment.body.startsWith('A relationship ') ) and (
              self.base_Comment.owner.stereotypedBy('AugmentationType') implies
              self.base_Comment.body.startsWith('Supplements ') ) and (
              self.base_Comment.owner.oclAsType(NamedElement).name.match('.*Indicator.*') implies
              self.base_Comment.body.startsWith('True if ') ) and (
              self.base_Comment.owner.oclIsKindOf(DataType) implies
              self.base_Comment.body.startsWith('A data type for ') ) ) ) if(
              (self.oclIsKindOf(ndr::ndrComplexTypeDefinition)and self.abstract) or
              (self.stereotypedBy('niem::ndr::ndrElementDeclaration')and self.abstract)
              )then(self.componentDefinition.startsWith('A data concept for a ') )else(
              if(self.stereotypedBy('niem::ndr::ndrRoleType'))
              then(self.componentDefinition.startsWith('Acts as ') )else( )else(
              if(self.stereotypedBy('niem::ndr::ndrSimpleTypeDefinition'))
              then(self.componentDefinition.startsWith('A data type for ') )else(
              self.componentDefinition.startsWith('A ') or self.componentDefinition.startsWith('An
              ') )endif )endif )endif )endif )endif )endif</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-base_Comment" name="base_Comment" visibility="public" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Comment"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType" name="MetadataType">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A MetadataType is a NIEMType Class that represents a NIEM metadata
            type. A NIEM metadata type describes data about data, that is, information that is not
            descriptive of objects and their relationships, but is descriptive of the data itself.
            Metadata is specified as an instance of a metadata type and may include information such
            as the security of a piece of data or the source of the data. The applicability of such
            metadata may be modeled using MetadataApplication dependencies to one or more classes
            representing the applicable types. &lt;/p> &lt;p> MetadataType is
            implemented in XML Schema as a complex type definition with complex content. Section 3.4
            of &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML
            Schema Structures&lt;/a> addresses complex type definitions in XML Schema;
            Section 7.4.4 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses metadata types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html> rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses metadata types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html> body>
            &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-44_" name="NDR [Rule 7-44]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType" context="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-44_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-44_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-44] (REF, SUB, EXT)&lt;/b>
              Within the schema, a metadata type and only a metadata type SHALL be derived directly
              from structures:MetadataType. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> A metadata type establishes a specific,
              named aggregation of data about data. Any type derived from structures:MetadataType is
              a metadata type. Metadata types should not be derived from other metadata types. Such
              metadata types should be used as is and additional metadata types defined for
              additional content. &lt;/p> &lt;/body> &lt;/html>
              additional metadata types defined for additional content. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-44_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.general->select(g|g.stereotypedBy('MetadataType'))->isEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A
              data type for metadata about ') or documentation.body.startsWith('A data type for
              information that further qualifies ') ) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_9-29_" name="NDR [Rule 9-29]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType" context="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_9-29_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_9-29_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-29] (REF, SUB, EXT)&lt;/b>
              Within the schema, any metadata type SHALL have a name that uses the representation
              term qualifier Metadata. Types other than metadata types SHALL NOT use the
              representation term qualifier Metadata. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Using the qualifier Metadata immediately
              identifies a type as representing metadata. &lt;/p> &lt;/body>
              &lt;/html> ies a type as representing metadata. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_9-29_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.name.match('.*MetadataType')) --For PIM Profile, the naming constraint
              is enforced by PIM/PSM transformations. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-43_" name="NDR [Rule 7-43]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType" context="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-43_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-43_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-43] (REF, SUB, EXT)&lt;/b> Within the schema, a
              metadata type SHALL contain elements appropriate for a specific class of data about
              data. &lt;/body> &lt;/html> ata. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-NDR__Rule_7-43_-specification">
            <language>English</language>
            <body>Containing Elements appropriate for a specific class of data about data is a
              Non-computational constraint. </body>
          </specification>
        </ownedRule>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType" specific="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType" name="ObjectType">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> ObjectType is a NIEMType Class that represents a NIEM object type. A
            NIEM object type represents some kind of object: a thing with its own lifespan that has
            some existence. The object may or may not be a physical object. It may be a conceptual
            object. &lt;/p> &lt;p> ObjectType is implemented in XML Schema as
            a complex type definition. Section 3.4 of &lt;a
            href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML Schema
            Structures&lt;/a> addresses complex type definitions in XML Schema; Section
            7.4.1 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses object types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html> R v1.3&lt;/a>
            addresses object types in NIEM-conformant XML Schema. &lt;/p>
            &lt;/body> &lt;/html> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-39___REF,_EXT_" name="NDR [Rule 7-39] (REF, EXT)" context="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-39___REF,_EXT_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-39___REF,_EXT_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> Within the schema, an object type SHALL be a complex type definition
              that either constitutes a NIEM-conformant component or for which there exists a
              NIEM-conformant component of one of the following forms: &lt;/p>
              &lt;ol> &lt;li> Has simple content, is based on a simple type,
              and contains the attribute group structures:SimpleObjectAttributeGroup, and has
              application information appinfo:Base of structures:Object. &lt;/li>
              &lt;li> Has complex content, and is based on complex type
              structures:ComplexObjectType, and has application information appinfo:Base of
              structures:Object. &lt;/li> &lt;li> Is a complex type that is
              derived from an object type, which is defined according to this rule.
              &lt;/li> &lt;/ol> &lt;/body> &lt;/html>
              &lt;li> Is a complex type that is derived from an object type, which is
              defined according to this rule. &lt;/li> &lt;/ol>
              &lt;/body> &lt;/html> &lt;/ol> &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-39___REF,_EXT_-specification"/>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A
              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) </body>
          </specification>
        </ownedRule>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType" specific="NIEM_UML_Profile-NIEM_Common_Profile-ObjectType"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-base_Class NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4-ownedEnd" name="extension_ComplexType" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-base_Package NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5-ownedEnd" name="extension_NIEMNamespace" visibility="public" type="NIEM_UML_Profile-NIEM_Common_Profile-Namespace" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataApplication" name="MetadataApplication">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataApplication-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataApplication">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The MetadataApplication stereotype is a specialization of Application
            that is always between a MetadataType Class and another Class. It represents a
            constraint on a NIEM metadata type that limits the application of the NIEM metadata type
            to specific types. If a MetadataType Class is the client of a MetadataApplication Usage,
            then any Property with the MetadataType Class as its type must be for a Class that is a
            (direct or indirect) subclass of the supplier Class of the MetadataApplication. A
            MetadataType Class may be the client of multiple MetadataApplication Usages, in which
            case a Property for it may be in a Class that is a subclass of a supplier Class of any
            of the MetadataApplications. If a MetadataType is not a client of any
            MetadataApplication, then it applies to any type. &lt;/p> &lt;p> A
            MetadataApplication Usage is implemented in XML schema as a NIEM AppliesTo element in
            the annotation element of the complex type definition represented by the client of the
            Usage, referencing the complex type represented by the supplier class of the Usage.
            &lt;/p> &lt;/body> &lt;/html> d by the client of the
            Usage, referencing the complex type represented by the supplier class of the Usage.
            &lt;/p> &lt;/body> &lt;/html> body>
            &lt;/html> </body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-MetadataApplication-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-Application" specific="NIEM_UML_Profile-NIEM_Common_Profile-MetadataApplication"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction" name="Restriction">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A Restriction Realization represents a relationship between two type
            definitions: the first is derived by restriction from the second. The two types must
            either both be NIEMType Classes or both be DataTypes. If the two types are Classes, then
            the attributes of the client class must be a subset of the attributes of the supplier
            class and omitted attributes must have a multiplicity lower bound of zero. if the two
            classes are DataTypes, then the client type is considered to have a value space that is
            a subset of that of the supplier, as may be further specified using a ValueRestriction
            stereotype on the client. &lt;/p> &lt;p> This relationship is
            implemented in XML Schema through the base attribute on the xsd:restriction element of
            the first type definition, the actual value of which resolves to the second type
            definition. If a type is a ValueRestriction the generalization owned by that type is
            implicitly an XSDRestriction. Sections 3.4 and 3.14 of &lt;a
            href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML Schema
            Structures&lt;/a> address the use of restriction in XML Schema; Sections
            6.5.2 and 6.5.3 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> address the use of restriction in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html>
            ion/naming-and-design-rules/1.3/&quot;>NIEM NDR v1.3&lt;/a> address the use
            of restriction in NIEM-conformant XML Schema. &lt;/p> &lt;/body>
            &lt;/html> > &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeComplexContent" name="XSDRestrictionComplexTypeComplexContent" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction" context="NIEM_UML_Profile-NIEM_Common_Profile-Restriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeComplexContent-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeComplexContent">
            <body>If the general Classifier is a NIEMType that is not the client of a
              NIEMSimpleContent Realization, the specific Classifier must be a NIEMType that is not
              the client of a NIEMSimpleContent Realization.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeComplexContent-specification">
            <language>OCL2.0</language>
            <body>self.base_Generalization.general.stereotypedBy('NIEMType') and
              self.base_Generalization.general.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->isEmpty()
              implies
              self.base_Generalization.specificl.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->isEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-53_" name="NDR [Rule 6-53]" context="NIEM_UML_Profile-NIEM_Common_Profile-Restriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-53_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-53_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-53] (REF) &lt;/b>Within the
              schema, the element xsd:simpleContent MUST have as an immediate child the element
              xsd:extension. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This rule ensures that the definition of
              a CSC will use the XML Schema extension facility. This allows for the above cases
              while disallowing much more complicated syntactic options available in XML Schema.
              &lt;/p> &lt;p> Note that the applicability of the above rule
              allows for use of xsd:restriction within xsd:simpleContent in subset schemas,
              extension schemas, and exchange schemas. &lt;/p> &lt;/body>
              &lt;/html> impleContent in subset schemas, extension schemas, and exchange
              schemas. &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-53_-specification">
            <language>OCL2.0</language>
            <body>self.base_Generalization.specific.owner.getStereotypeApplication('Namespace').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema'</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionSimpleType" name="XSDRestrictionSimpleType" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction" context="NIEM_UML_Profile-NIEM_Common_Profile-Restriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionSimpleType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionSimpleType">
            <body>If the general Classifier is a DataType, the specific Classifier must be a
              DataType.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionSimpleType-specification">
            <language>OCL2.0</language>
            <body>self.base_Generalization.general.oclIsKindOf(DataType) implies
              self.base_Generalization.specific.oclIsKindOf(DataType) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-55_" name="NDR [Rule 6-55]" context="NIEM_UML_Profile-NIEM_Common_Profile-Restriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-55_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-55_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-55] (REF)&lt;/b> Within the
              schema, the element xsd:complexContent MUST have as an immediate child the element
              xsd:extension. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> NIEM does not support, as conformant, the
              use of complex type restriction. NIEM defines a language, in which specific content is
              allowed. It does not specify messages that forbid content. Such restrictions may be
              performed in nonconformant schemas or within constraint schemas or other artifacts of
              constraint. &lt;/p> &lt;p> Note that XML Schema requires use of
              the attribute base on xsd:extension. &lt;/p> &lt;p> Note also
              that the applicability allows for the use of restriction in subset schemas, extension
              schemas, exchange schemas, and constraint schemas. &lt;/p>
              &lt;/body> &lt;/html> riction in subset schemas, extension
              schemas, exchange schemas, and constraint schemas. &lt;/p>
              &lt;/body> &lt;/html> > &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-55_-specification">
            <language>OCL2.0</language>
            <body>self.base_Generalization.specific.owner.getStereotypeApplication('Namespace').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema'</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-57_" name="NDR [Rule 6-57]" context="NIEM_UML_Profile-NIEM_Common_Profile-Restriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-57_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-57_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-57] (EXT) &lt;/b>Within the
              schema, given an element xsd:complexContent with a child xsd:restriction owning an
              attribute base, the attribute base MUST have a value that resolves to the name of a
              complex type that is a NIEM-conformant component. &lt;/p> &lt;p>
              &lt;b>[Rationale] &lt;/b>This ensures that a CCC defined through
              restriction has well-defined semantics. &lt;/p> &lt;/body>
              &lt;/html> triction has well-defined semantics. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-NDR__Rule_6-57_-specification">
            <language>OCL2.0</language>
            <body>self.base_Generalization.general.stereotypedBy('NIEMType')</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeSimpleContent" name="XSDRestrictionComplexTypeSimpleContent" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction" context="NIEM_UML_Profile-NIEM_Common_Profile-Restriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeSimpleContent-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeSimpleContent">
            <body>If the general Classifier is a NIEMType that is the client of a NIEMSimpleContent
              Realization, the specific Classifier must be NIEMType that is the client of a
              NIEMSimpleContent Realization.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-XSDRestrictionComplexTypeSimpleContent-specification">
            <language>OCL2.0</language>
            <body>self.base_Generalization.general.stereotypedBy('NIEMType') and
              self.base_Generalization.general.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->notEmpty()
              implies self.base_Generalization.specific.stereotypedBy('NIEMType') and
              self.base_Generalization.specificl.clientDependency->select(d|d.stereotypedBy('NIEMSimpleContent'))->notEmpty()
            </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Restriction-base_Realization" name="base_Realization" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Realization"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References" name="References">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-References">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The References Stereotype applies to a Realization between Properties,
            Classes or Packages. It allows for Properties in one Class to be defined by reference to
            Properties in another class. A References Realization between two classes is defined to
            be equivalent to having References Realizations between matching Properties of the
            Classes where matching is determined by identical NIEM names. A References Realization
            between two packages is defined to be equivalent to having References Realizations
            between matching Classes contained in the Packages where matching is determined by
            having identical NIEM names. Matching is based on the NIEMName of the elements, either
            as derived implicitly or as set explicitly using the ReferenceName stereotype.
            &lt;/p> &lt;p> If a Property is the client of a References
            Realization, then it represents a NIEM property defined by reference to the NIEM
            property declaration represented by the supplier of the Realization. It is implemented
            in XSD schema as an attribute use or element particle that references the attribute or
            element declaration that implements the supplier of the Realization. Note that the
            supplier Property may be in a different Namespace than the client property, in which
            case the attribute or element declaration represented by the supplier will be in a
            different target namespace than the use represented by the client. &lt;/p>
            &lt;/body> &lt;/html> ute or element declaration represented by
            the supplier will be in a different target namespace than the use represented by the
            client. &lt;/p> &lt;/body> &lt;/html> body>
            &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-References_must_be_between_like_metaclasses" name="References must be between like metaclasses" context="NIEM_UML_Profile-NIEM_Common_Profile-References">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-References_must_be_between_like_metaclasses-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-References-References_must_be_between_like_metaclasses">
            <body>References may only be between packages, classifiers or properties and the
              metatype of the client must be the same as the metatype of the supplier.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-References_must_be_between_like_metaclasses-specification"/>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-MDR__Rule_3-02_" name="MDR [Rule 3-02]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-References" context="NIEM_UML_Profile-NIEM_Common_Profile-References">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-MDR__Rule_3-02_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-References-MDR__Rule_3-02_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-2]&lt;/b> NIEM subsets may omit elements with zero
              cardinality and adjust the cardinality of elements in reference schemas from which
              they are derived, as long as the subset property is maintained. &lt;/body>
              &lt;/html> intained. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-MDR__Rule_3-02_-specification">
            <language>OCL2.0</language>
            <body>( self.base_Realization.client->size()=1) and (
              self.base_Realization.supplier->size()=1) and
              self.base_Realization.client->forAll(client|client.oclIsKindOf(Classifier)) and
              self.base_Realization.supplier->forAll(supplier|supplier.oclIsKindOf(Classifier)
              and not(supplier.stereotypedBy('PropertyHolder')) ) ) implies ( (
              self.base_Realization.client.oclAsType(Classifier).attribute
              ->forAll(clientAttribute|
              self.base_Realization.supplier.oclAsType(Classifier).attribute
              ->forAll(supplierAttribute| (clientAttribute.name=supplierAttribute.name)
              implies ( (clientAttribute.lower>=supplierAttribute.lower) and (
              (supplierAttribute.upper=-1) or
              (clientAttribute.upper&lt;=supplierAttribute.upper) ) and (
              (clientAttribute.upper=-1) or (clientAttribute.lower&lt;=clientAttribute.upper) )
              ) ) ) ) and( self.base_Realization.supplier.oclAsType(Classifier).attribute
              ->select(a|a.lower>0) ->forAll(supplierAttribute|
              self.base_Realization.client.oclAsType(Classifier).attribute->exists(clientAttribute|clientAttribute.name=supplierName)
              ) ) )</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-References-base_Realization" name="base_Realization" visibility="private" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Realization"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction" name="ValueRestriction">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The ValueRestriction stereotype applies to a DataType (Enumeration or
            Primitive type) that is a specialization of a general DataType. It defines restrictions
            on which values of the general DataType that are allowed as values of the specialized
            DataType. A ValueRestriction DataType is implemented in XML Schema as a simple type
            definition that is a restriction of the simple type that implements the general
            DataType. The attributes of the ValueRestriction are implemented as restriction facets.
            &lt;/p> &lt;p> ValueRestriction represents a NIEM type which is
            implemented in XML Schema as a simple type definition. Section 3.14 of &lt;a
            href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML Schema
            Structures&lt;/a> addresses simple type definitions in XML Schema; Sections
            6.1.6.1, 7.2.1, 7.3, and 9.12.2 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> address simple type definitions in NIEM-conformant XML
            Schema. The variety of the simple type definition may be union, list, or atomic. As the
            ValueRestriction stereotype is a specialization of DataType, it may be applied to
            Enumeration. In this case, the ValueRestriction represents a NIEM code type, which is
            implemented in XML Schema as a simple type definition that contains multiple
            xsd:enumeration facets. &lt;/p> &lt;/body> &lt;/html>
            code type, which is implemented in XML Schema as a simple type definition that contains
            multiple xsd:enumeration facets. &lt;/p> &lt;/body>
            &lt;/html> > &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A
              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestriction_Generalization" name="ValueRestriction Generalization" context="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestriction_Generalization-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestriction_Generalization">
            <body>A valuerestriction that is not an enumeration or list may only generalize the same
              metatype. A valuerestriction that is an enumeration may not generalize a list. A
              valuerestriction that is a list may not generalize an enumeration..</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestriction_Generalization-specification"/>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestrictionGeneralization" name="ValueRestrictionGeneralization" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction" context="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestrictionGeneralization-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestrictionGeneralization">
            <body>A ValueRestriction DataType must be the special classifier in a single
              Generalization whose general classifier is also a DataType.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-ValueRestrictionGeneralization-specification">
            <language>OCL2.0</language>
            <body>self.base_DataType.generalization.general->size()=1 </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-fractionDigits" name="fractionDigits" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-fractionDigits-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-fractionDigits">
            <body>A restriction on the value space of a numeric data type that places an upper limit
              on the arithmetic precision of decimal values. The value space is restricted to those
              values that can be represented lexically in decimal notation using at most
              fractionDigits to the right of the decimal point. fractionDigits is implemented in XML
              Schema as the value of the value attribute on the xsd:fractionDigits element, the
              child of the xsd:restriction element which is the immediate child of the
              xsd:simpleType element..</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-fractionDigits-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-length" name="length" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-length-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-length">
            <body>A restriction on the value space of a data type to values with a specific length,
              where the units of length depends on the base type being restricted. For String and
              URI values, the units are characters. For Binary values, the units are octets. For
              lists, the length is the number of items in the list. length is implemented in XML
              Schema as the value of the value attribute on the xsd:length element, the child of the
              xsd:restriction element which is the immediate child of the xsd:simpleType element..</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-length-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxExclusive" name="maxExclusive" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxExclusive-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxExclusive">
            <body>The exclusive upper bound of the value space for a data type with ordered values.
              The value of maxExclusive must be equal to some value in the value space of the base
              data type or to the maxExclusive restriction of the base type (if it has one).
              maxExclusive is implemented in XML Schema as the value of the value attribute on the
              xsd:maxExclusive element, the child of the xsd:restriction element which is the
              immediate child of the xsd:simpleType element..</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxExclusive-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxInclusive" name="maxInclusive" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxInclusive-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxInclusive">
            <body>The inclusive upper bound of the value space for a data type with ordered values.
              The value of maxInclusive must be equal to some value in the value space of the base
              data type. maxInclusive is implemented in XML Schema as the value of the value
              attribute on the xsd:maxInclusive element, the child of the xsd:restriction element
              which is the immediate child of the xsd:simpleType element..</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxInclusive-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxLength" name="maxLength" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxLength-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxLength">
            <body>A restriction on the value space of a data type to values with a specific maximum
              length, where the units of length depends on the base type being restricted. For
              String and URI values, the units are characters. For Binary values, the units are
              octets. For lists, the length is the number of items in the list. maxLength is
              implemented in XML Schema as the value of the value attribute on the xsd:maxLength
              element, the child of the xsd:restriction element which is the immediate child of the
              xsd:simpleType element.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-maxLength-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minExclusive" name="minExclusive" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minExclusive-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minExclusive">
            <body>The exclusive lower bound of the value space for a data type with ordered values.
              The value of minExclusive must be equal to some value in the value space of the base
              data type or to the minExclusive restriction of the base type (if it has one).
              minExclusive is implemented in XML Schema as the value of the value attribute on the
              xsd:minExclusive element, the child of the xsd:restriction element which is the
              immediate child of the xsd:simpleType element..</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minExclusive-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minInclusive" name="minInclusive" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minInclusive-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minInclusive">
            <body>The inclusive lower bound of the value space for a data type with ordered values.
              The value of minInclusive must be equal to some value in the value space of the base
              data type. minInclusive is implemented in XML Schema as the value of the value
              attribute on the xsd:minInclusive element, the child of the xsd:restriction element
              which is the immediate child of the xsd:simpleType element..</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minInclusive-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minLength" name="minLength" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minLength-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minLength">
            <body>A restriction on the value space of a data type to values with a specific minimum
              length, where the units of length depends on the base type being restricted. For
              String and URI values, the units are characters. For Binary values, the units are
              octets. For lists, the length is the number of items in the list. minLength is
              implemented in XML Schema as the value of the value attribute on the xsd:minLength
              element, the child of the xsd:restriction element which is the immediate child of the
              xsd:simpleType element.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-minLength-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-pattern" name="pattern" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-pattern-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-pattern">
            <body>A constraint on the value space of a data type achieved by constraining the value
              space to those values represented by literals that match each member of a set of
              regular expressions. Each pattern must be a valid regular expression. pattern is
              implemented in XML Schema as the value of the value attribute on the xsd:pattern
              element, the child of the xsd:restriction element which is the immediate child of the
              xsd:simpleType element.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-pattern-lowerValue"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-pattern-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-totalDigits" name="totalDigits" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-totalDigits-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-totalDigits">
            <body>Restricts the magnitude and arithmetic precision of values in the value space of a
              numeric data type. The value space is restricted to those values that can be
              represented lexically using at most totalDigits digits in decimal notation or at most
              totalDigits digits for the coefficient, in scientific notation. totalDigits is
              implemented in XML Schema as the value of the value attribute on the xsd:totalDigits
              element, the child of the xsd:restriction element which is the immediate child of the
              xsd:simpleType element.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-totalDigits-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-base_DataType" name="base_DataType" visibility="private" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#DataType"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication" name="AugmentationApplication">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The AugmentationApplication stereotype is a specialization of
            Application that is always between a Property whose type is an AugmentationType Class
            and a Class. It represents a constraint on a NEIM augmentation property that limits the
            application of the property to specific types. When an augmentation property is the
            client of an AugmentationApplication Usage, this serves to constrain the NIEM types to
            which the augmentation property may apply. If the client augmentation Property is not in
            a PropertyHolder, then its Class must be a (direct or indirect) subclass of the supplier
            Class of the AugmentationApplication. If the augmentation Property is in a
            PropertyHolder, then any Property defined by reference to the augmentation Property must
            be for a Class that is a subclass of the supplier Class. &lt;/p>
            &lt;p> An AugmentationApplication Usage is implemented in a NIEM XML schema
            as an AppliesTo element in the annotation element of the property declaration
            represented by the client of the Usage, referencing the complex type represented by the
            supplier class of the Usage. &lt;/p> &lt;/body>
            &lt;/html> d by the client of the Usage, referencing the complex type
            represented by the supplier class of the Usage. &lt;/p> &lt;/body>
            &lt;/html> body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication-NDR__Rule_7-50_" name="NDR [Rule 7-50]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication-NDR__Rule_7-50_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication-NDR__Rule_7-50_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-50] (REF, EXT) &lt;/b>Within the
              schema, an element definition for an augmentation element that does not contain any
              instances of the element structures:AppliesTo MAY be applied to any object or
              association type. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> These rules allow schema builders to
              establish applicability for augmentations. An augmentation may be applicable to
              specific types. Users who wish to apply an augmentation type to a given object type
              may do so by creating a new augmentation element, applicable to the object type.
              &lt;/p> &lt;/body> &lt;/html> new augmentation
              element, applicable to the object type. &lt;/p> &lt;/body>
              &lt;/html> /body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication-NDR__Rule_7-50_-specification">
            <language>English</language>
            <body>Implemented as part of PIM/PSM transformations. This constraint is definitional,
              the absence of an &lt;&lt;AugmentationApplication>> on an
              augmentation element will result in applicability of the element to any
              Object/Association at runtime.</body>
          </specification>
        </ownedRule>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-Application" specific="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationApplication"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice" name="Choice">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Choice">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A Choice Class groups a set of attributes whose values are mutually
            exclusive. That is, in any instance of a Choice Class, at most one of its attributes may
            be non-empty. &lt;/p> &lt;p> Choice represents the use of a choice
            model group in XML Schema. Section 3.8 of &lt;a
            href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML Schema
            Structures&lt;/a> addresses choice model groups in XML Schema. Sections
            6.1.8.1 and 6.1.8.2 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3 &lt;/a>address choice model groups in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html> ddress choice model
            groups in NIEM-conformant XML Schema. &lt;/p> &lt;/body>
            &lt;/html> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-ownedAttributes_have_multiplicity_0..1._" name="ownedAttributes have multiplicity 0..1. " constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Choice" context="NIEM_UML_Profile-NIEM_Common_Profile-Choice">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-ownedAttributes_have_multiplicity_0..1._-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Choice-ownedAttributes_have_multiplicity_0..1._">
            <body>The ownedAttributes of a Choice class shall have multiplicity 0..1. </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-ownedAttributes_have_multiplicity_0..1._-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.ownedAttributes->forAll(a|(a.lower=0) and
            (a.upper=1))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-NDR__Rule_6-18_" name="NDR [Rule 6-18]" context="NIEM_UML_Profile-NIEM_Common_Profile-Choice">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-NDR__Rule_6-18_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Choice-NDR__Rule_6-18_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-18] (REF) &lt;/b>The schema
              SHALL NOT contain the element xsd:choice. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The element xsd:choice provides an
              exclusive set of particles, one of which may appear in an instance. This can greatly
              complicate processing and may be difficult to comprehend, satisfy, and reuse. The
              element xsd:choice may be used in extension and exchange schemas, as it presents a
              simple way for a schema writer to represent a set of optional content. It may also be
              used in subset schemas and constraint schemas to represent syntactic alternatives.
              &lt;/p> &lt;/body> &lt;/html> d constraint schemas to
              represent syntactic alternatives. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-NDR__Rule_6-18_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.owner.getTargetDirectedRelationships()
              ->select(r|r.stereotypedBy('ModelPackageDescriptionFile'))
              ->forAll(mpdf|mpdf.getStereotypeApplication('ModelPackageDescriptionFile').natureURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-No_Generalizations_or_subtypes" name="No Generalizations or subtypes" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Choice" context="NIEM_UML_Profile-NIEM_Common_Profile-Choice">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-No_Generalizations_or_subtypes-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Choice-No_Generalizations_or_subtypes">
            <body>A Choice Class shall not participate in any Generalizations, either as the general
              or the special Classifier.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-No_Generalizations_or_subtypes-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.generalization->isEmpty() and
              self.base_Class.getTargetDirectedRelationships()->select(d|d.oclIsKindOf(Generalization))->isEmpty()
            </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Choice-base_Class" name="base_Class" visibility="private" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Class"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-Union-base_DataType NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12-ownedEnd" name="extension_UnionType" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-Union" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union" name="Union">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Union">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A Union is a DataType whose value space is the union of one or more
            other DataTypes, which are the member types of the Union. The member types are specified
            using UnionOf Usage dependencies. &lt;/p> &lt;p> A Union DataType
            is implemented in XML Schema as a union simple type definition. Each UnionOf dependency
            of which the Union is the client represents a relationship between two type definitions:
            the first is a union simple type definition whose member type definition is the second.
            This relationship is implemented in XML Schema through the memberTypes attribute on the
            xsd:union element of the union simple type definition, the actual value of which
            resolves to the second type definition. Section 3.14 of &lt;a
            href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML Schema
            Structures&lt;/a> addresses union simple type definitions in XML Schema.
            &lt;/p> &lt;/body> &lt;/html> implemented in XML Schema
            through the memberTypes attribute on the xsd:union element of the union simple type
            definition, the actual value of which resolves to the second type definition. Section
            3.14 of &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML
            Schema Structures&lt;/a> addresses union simple type definitions in XML
            Schema. &lt;/p> &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_owned_attributes" name="no owned attributes" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Union" context="NIEM_UML_Profile-NIEM_Common_Profile-Union">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_owned_attributes-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_owned_attributes">
            <body>A Union shall not have any ownedAttributes.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_owned_attributes-specification">
            <language>OCL2.0</language>
            <body>self.base_DataType.ownedAttribute->isEmpty() </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_generalizations" name="no generalizations" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Union" context="NIEM_UML_Profile-NIEM_Common_Profile-Union">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_generalizations-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_generalizations">
            <body>A Union shall not have any generalizations.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-no_generalizations-specification">
            <language>OCL2.0</language>
            <body>self.base_DataType.generalization->isEmpty() </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-Union">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Union-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A
              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Union-base_DataType" name="base_DataType" visibility="private" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-12">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#DataType"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace" name="Namespace">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A Namespace Package represents a NIEM namespace identified by a target
            namespace URI. All UML model elements contained, directly or indirectly within the
            Package, that represents NIEM types and properties, are considered to be in this target
            namespace. &lt;/p> &lt;p> A Namespace Package is implemented in
            XML Schema as an XML schema document. &lt;/p> &lt;/body>
            &lt;/html> ML Schema as an XML schema document. &lt;/p>
            &lt;/body> &lt;/html> body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-37_" name="NDR [Rule 6-37]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-37_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-37_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-37] (REF, SUB, EXT, CON) &lt;/b>Within the schema,
              the document element xsd:schema MUST carry the attribute version.
              &lt;/body> &lt;/html> ion. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-37_-specification">
            <language>OCL2.0</language>
            <body>not(self.version.oclIsUndefined()) -- Constraint also resolved by the requirement
              that tag &quot;version&quot; is required.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-38_" name="NDR [Rule 6-38]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-38_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-38_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-38] (REF, SUB, EXT, CON)
              &lt;/b>Within the schema, the value of the required attribute version on
              the document element xsd:schema MUST NOT be an empty string. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> It is very useful to be
              able to tell one version of a schema from another. Apart from the use of namespaces
              for versioning, it is sometimes necessary to release multiple versions of schema
              documents. Such use might include: &lt;/p> &lt;p> � Subset
              schemas and constraint schemas &lt;/p> &lt;p> � Error
              corrections or bug fixes &lt;/p> &lt;p> � Documentation changes
              &lt;/p> &lt;p> � Contact information updates &lt;/p>
              &lt;p> In such cases, a different value for the version attribute implies a
              different version of the schema. No specific meaning is assigned to specific version
              identifiers. &lt;/p> &lt;p> Note that some of the above uses for
              the version attribute are not employed in management of NIEM Core and domain schemas.
              An author of an application schema or exchange may use the version attribute for these
              purposes within their schemas. &lt;/p> &lt;/body>
              &lt;/html> management of NIEM Core and domain schemas. An author of an
              application schema or exchange may use the version attribute for these purposes within
              their schemas. &lt;/p> &lt;/body> &lt;/html> >
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-38_-specification">
            <language>OCL2.0</language>
            <body>self.version&lt;>''</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-37_" name="NDR [Rule 7-37]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-37_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-37_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-37] (REF, SUB, EXT)&lt;/b>
              Within the schema, a complex type definition SHALL be one of the following classes of
              types: &lt;/p> &lt;p> 1. An object type. &lt;/p>
              &lt;p> 2. A role type. &lt;/p> &lt;p> 3. An
              association type. &lt;/p> &lt;p> 4. A metadata type.
              &lt;/p> &lt;p> 5. An augmentation type. &lt;/p>
              &lt;p> 6. An adapter type. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This rule establishes the classes of NIEM
              complex types. It is a limited set, each class with distinct semantics.
              &lt;/p> &lt;/body> &lt;/html> his rule establishes
              the classes of NIEM complex types. It is a limited set, each class with distinct
              semantics. &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-37_-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedType ->select(t|t.oclIsKindOf(Class) and
              not(t.stereotypedBy('PropertyHolder')))
              ->forAll(type|type.stereotypedBy('NIEMType')) -- PIM Profile Classes default to
              &lt;&lt;ObjectType>> if not otherwise specified </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-6_" name="NDR [Rule 9-6]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-6_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-6_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-6] (REF, SUB, EXT) &lt;/b>Within the schema, any
              XML Schema component other than an attribute declaration SHALL have a name that begins
              with an upper-case letter ('A'-'Z'). &lt;/body> &lt;/html>
              'A'-'Z'). &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-6_-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedType ->select(t|not(t.stereotypedBy('PropertyHolder'))
              ->forAll(schemaComponent|schemaComponent.name.firstToUpper()=schemaComponent.name)
            </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-35_" name="NDR [Rule 6-35]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-35_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-35_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-35] (REF, SUB, EXT, CON)
              &lt;/b>Within the schema, the document element xsd:schema MUST carry the
              attribute targetNamespace. &lt;/p> &lt;/body>
              &lt;/html> espace. &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-35_-specification">
            <language>OCL2.0</language>
            <body>not(self.targetNamespace.oclIsUndefined()) and
              (self.targetNamespace&lt;>'') -- also partially satisfied by multiplicity
              constraint on targetNamespace </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-24_" name="NDR [Rule 9-24]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-24_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-24_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-24] (REF, SUB, EXT)&lt;/b>
              Within the schema, the name of any simple type definition SHALL use the representation
              term qualifier Simple. This qualifier SHALL appear after any other representation term
              qualifiers. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Specific uses of type definitions have
              similar syntax but very different effects on data definitions. Schemas that clearly
              identify complex and simple type definitions are easier to understand without tool
              support. This rule ensures that names of simple types end in SimpleType.
              &lt;/p> &lt;/body> &lt;/html> ule ensures that names
              of simple types end in SimpleType. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-24_-specification">
            <language>OCL2.0</language>
            <body>self.profiledBy('NIEM_PSM_Profile') implies self.base_Package.ownedType
              ->select(t|t.oclIsKindOf(DataType))
              ->forAll(simpleType|simpleType.name.matches('.*SimpleType')) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedType->select(t|t.oclIsKindOf(Enumeration))
              ->forAll(otherType|otherType.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A
              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) )
            </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-25_" name="NDR [Rule 9-25]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-25_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-25_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-25] (REF, SUB, EXT)&lt;/b>
              Within the schema, the name of any code type SHALL use the representation term
              qualifier Code. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Using the qualifier Code (e.g. CodeType,
              CodeSimpleType) immediately identifies a type as representing a fixed list of codes.
              These types may be handled in specific ways, as lists of codes are expected to have
              their own lifecycles, including versions and periodic updates. Codes may also have
              responsible authorities behind them who provide concrete semantic bindings for the
              code values. &lt;/p> &lt;/body> &lt;/html> o provide
              concrete semantic bindings for the code values. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-25_-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedType ->select(t|t.oclIsKindOf(Enumeration))
              ->forAll(enumerationDerivedType|enumerationDerivedType.name.matches('.*Code.*'))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-36_" name="NDR [Rule 6-36]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-36_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-36_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-36] (REF, SUB, EXT, CON)
              &lt;/b>Within the schema, the value of the required attribute
              targetNamespace on the document element xsd:schema MUST match the production
              &lt;absolute-URI> as defined by
              &lt;b>[RFC3986]&lt;/b>. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Schemas without defined namespaces
              provide definitions that are ambiguous, in that they are not universally identifiable.
              Absolute URIs are the only universally meaningful URIs. URIs include both URLs and
              URNs. Finding the target namespace using standard XML Base technology is complicated
              and not specified by XML Schema. Relative URIs are not universally identifiable, as
              they are context-specific. &lt;/p> &lt;/body>
              &lt;/html> are not universally identifiable, as they are context-specific.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_6-36_-specification">
            <language>OCL2.0</language>
            <body>self.targetNamespace.isAbsoluteURI()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-26_" name="NDR [Rule 9-26]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-26_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-26_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-26] (REF, SUB, EXT)&lt;/b>
              Within the schema, any type definition which has a base type definition of a code type
              or which is transitively based on a code type SHALL have a name that uses the
              representation term qualifier Code. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This expands the use of the
              representation term qualifier Code to any type based on a code list.
              &lt;/p> &lt;/body> &lt;/html> fier Code to any type
              based on a code list. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-26_-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedType ->select(t|
              t.clientDependency->select(d|d.stereotypedBy('XSDSimpleContent')).supplier->exists(s|s.oclIsKindOf(Enumeration))
              or ( t.oclIsKindOf(Classifier) and
              t.oclAsType(Classifier).allParents().clientDependency->select(d|d.stereotypedBy('XSDSimpleContent')).supplier->exists(s|s.oclIsKindOf(Enumeration))
              ) )
              ->forAll(enumerationDerivedType|enumerationDerivedType.name.matches('.*Code.*'))
            </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-07_" name="NDR [Rule 7-07]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-07_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-07_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-7] (REF, EXT)&lt;/b> Within the schema, any
              element xsd:attribute that is an immediate child of an element xsd:schema MUST be a
              documented component. &lt;/body> &lt;/html> omponent.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-07_-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))
            </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-3_" name="NDR [Rule 9-3]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-3_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-3_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-3] (REF, SUB, EXT) &lt;/b>The
              name of any XML Schema component defined by the schema SHALL contain only the
              following characters: &lt;/p> &lt;p> � Upper-case letters
              ('A'-'Z'). &lt;/p> &lt;p> � Lower-case letters ('a'-'z').
              &lt;/p> &lt;p> � Digits ('0'-'9'). &lt;/p>
              &lt;p> � Hyphen ('-'). &lt;/p> &lt;p> Other
              characters, such as the underscore ('_') character and the period ('.') character
              SHALL NOT appear in component names in NIEM-conformant schemas. &lt;/p>
              &lt;/body> &lt;/html> od ('.') character SHALL NOT appear in
              component names in NIEM-conformant schemas. &lt;/p> &lt;/body>
              &lt;/html> > &lt;/body> &lt;/html> ml> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_9-3_-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedType ->select(t|not(t.stereotypedBy('PropertyHolder'))
              ->forAll(schemaComponent|schemaComponent.name.match('[\\w|\\-]*')) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-09_" name="NDR [Rule 7-09]" context="NIEM_UML_Profile-NIEM_Common_Profile-Namespace">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-09_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-09_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-9] (REF, EXT) &lt;/b>Within the schema, the
              document element xsd:schema MUST be a documented component. &lt;/body>
              &lt;/html> ent. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-NDR__Rule_7-09_-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.profiledBy('NIEM_PSM_Profile') implies
              self.base_Package.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))
            </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-base_Package" name="base_Package" visibility="public" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-5">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Package"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-targetNamespace" name="targetNamespace" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-targetNamespace-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-targetNamespace">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> The target namespace URI for this NIEM namespace. &lt;/p>
              &lt;p> It is implemented in XML Schema as the value of the targetNamespace
              attribute on the xsd:schema document element. Per Rules 6-35 and 6-36 of &lt;a
              href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
              NDR v1.3&lt;/a>, the value of the targetNamespace attribute must be present
              and must be an absolute URI. &lt;/p> &lt;/body>
              &lt;/html> and must be an absolute URI. &lt;/p>
              &lt;/body> &lt;/html> /body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-targetNamespace-defaultValue" value="http://domain.gov/myDomain/"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-isConformant" name="isConformant" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-isConformant-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-isConformant">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> Indicates whether the namespace is NIEM-conformant.
              &lt;/p> &lt;p> If the namespace is NIEM-conformant, it is
              implemented in XML Schema as the content of the i:ConformantIndicator application
              information on the xsd:schema document element. Per Rule 7-1 of NIEM NDR v1.3, the
              content must be &quot;true&quot;. If the namespace is not NIEM-conformant, it is implemented in
              XML Schema as the content of the i:ConformantIndicator application information on the
              xsd:import element. Per Rule 7-61 of &lt;a
              href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
              NDR v1.3&lt;/a>, the content must be &quot;false&quot;. &lt;/p>
              &lt;/body> &lt;/html> NDR v1.3&lt;/a>, the content
              must be &quot;false&quot;. &lt;/p> &lt;/body> &lt;/html>
              dy> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Boolean"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-isConformant-defaultValue" value="true"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-version" name="version" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-version-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-version">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> The version of the NIEM namespace. &lt;/p>
              &lt;p> It is implemented in XML Schema as the value of the version
              attribute on the xsd:schema document element. Per Rules 6-37 and 6-38 of &lt;a
              href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
              NDR v1.3&lt;/a>, the value of the version attribute must be present and
              must not be the empty string. Default is &quot;1&quot;. &lt;/p> &lt;/body>
              &lt;/html> ty string. Default is &quot;1&quot;. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-version-defaultValue" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-defaultPrefix" name="defaultPrefix" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-defaultPrefix-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-defaultPrefix">
            <body>The recommended prefix to be associated with this targetNamespace.  Provisioned schemas referencing this targetNamespace will use this value unless there is a conflict.  The published NIEM prefix/namespace mapping takes precedence over this  value. If this value is unset or is empty, a prefix will be generated.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Namespace-defaultPrefix-lowerValue"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf-base_Usage NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15-ownedEnd" name="extension_UnionOf" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-Documentation-base_Comment NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16-ownedEnd" name="extension_NIEMDocumentation" visibility="public" type="NIEM_UML_Profile-NIEM_Common_Profile-Documentation" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-16-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType" name="NIEMType" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A NIEMType is a Class that represents one of the specific semantic
            kinds of NIEM complex types (i.e., types that may have attributive structure). NIEMType
            is abstract. &lt;/p> &lt;p> A NIEMType Class is implemented in XML
            Schema as a complex type definition with complex content. &lt;/p>
            &lt;/body> &lt;/html> definition with complex content.
            &lt;/p> &lt;/body> &lt;/html> y>
            &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-33_" name="NDR [Rule 9-33]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType" context="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-33_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-33_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-33] (REF, SUB, EXT)&lt;/b>
              Within the schema, the name of an augmentation element SHALL use the representation
              term Augmentation. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Using the qualifier Augmentation
              immediately identifies an element as representing an augmentation. &lt;/p>
              &lt;/body> &lt;/html> representing an augmentation.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-33_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedAttribute
              ->forAll(a|a.type.stereotypedBy('AugmentationType') implies
              a.name.match('.*Augmentation.*')) --For PIM Profile, the naming constraint is enforced
              by PIM/PSM transformations. --An augmentation element corresponds to a UML
              &lt;Property> whose type is an
              &lt;&lt;AugmentationType>>. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-32_" name="NDR [Rule 9-32]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType" context="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-32_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-32_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-32] (REF, SUB, EXT)
              &lt;/b>Within the schema, the name of an association element SHALL use the
              representation term qualifier Association. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Using the qualifier Association
              immediately identifies an element as representing an association. &lt;/p>
              &lt;/body> &lt;/html> ment as representing an association.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-32_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedAttribute
              ->forAll(a|a.type.stereotypedBy('AssociationType') implies
              a.name.match('.*Association.*')) --For PIM Profile, the naming constraint is enforced
              by PIM/PSM transformations. --An association element corresponds to a UML
              &lt;Property> whose type is an
              &lt;&lt;AssociationType>>. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-49_" name="NDR [Rule 7-49]" context="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-49_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-49_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-49] (REF, EXT)&lt;/b> Within the
              schema, an element definition for an augmentation element MAY contain one or more
              instances of the element structures:AppliesTo as application information to specify
              types to which the augmentation element applies. &lt;/p> &lt;p>
              &lt;/p> &lt;p> In UML, this represents a constraint on
              augmentations, i.e., those UML &lt;Property>s whose type is an
              &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567y&quot;>Augmentation&lt;/a>>>.
                 &lt;/p> &lt;p> A &lt;Property> which is a client
              of any &lt;&lt;AppliesTo>> must be owned by a
              &lt;Classifier> which is conformant with one of the
              &lt;&lt;AppliesTo>> supplier &lt;Classifier>s.
              &lt;/p> &lt;/body> &lt;/html> ch is conformant with
              one of the &lt;&lt;AppliesTo>> supplier
              &lt;Classifier>s. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-49_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.ownedAttribute ->forAll(a|
              a.type.stereotypedBy('AugmentationType') implies a.clientDependency
              ->union(a.clientDependency->select(d|d.stereotypedBy('References')).target.clientDependency)
              ->select(d|d.stereotypedBy('AugmentationApplication')).target.oclAsType(Class)
              ->exists(appliedTo|self.base_Class.isConsistentWith(appliedTo)) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-45_" name="NDR [Rule 7-45]" context="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-45_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-45_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-45] (REF, EXT)&lt;/b> Within the
              schema, a metadata type MAY have application information appinfo:AppliesTo, indicating
              the NIEM-conformant object, association, or external adapter types to which the
              metadata applies. &lt;/p> &lt;p> &lt;/p>
              &lt;p> In UML, this represents a constraint on metadata elements, i.e.,
              those UML &lt;Property>s whose type is a &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567z&quot;>MetadataType&lt;/a>>>.
                 &lt;/p> &lt;p> If the &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567z&quot;>MetadataType&lt;/a>>>
              has an &lt;&lt;AppliesTo>>, then the &lt;Property>
              must be owned by a &lt;Classifier> which is conformant with one of the
              &lt;Classifier>s referenced by one of the
              &lt;&lt;AppliesTo>>. &lt;/p> &lt;/body>
              &lt;/html> formant with one of the &lt;Classifier>s referenced
              by one of the &lt;&lt;AppliesTo>>. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_7-45_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.ownedAttribute ->forAll(a|
              a.type.stereotypedBy('MetadataType') implies a.type.clientDependency
              ->select(d|d.stereotypedBy('MetadataApplication')).target.oclAsType(Class)
              ->exists(appliedTo|self.base_Class.isConsistentWith(appliedTo)) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-23_" name="NDR [Rule 9-23]" context="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-23_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-23_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-23] (REF, SUB, EXT)
              &lt;/b>Within the schema, the name of any type definition MUST use the
              representation term Type. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Using the representation term Type
              immediately identifies XML types in a NIEM-conformant schema and prevents naming
              collisions with corresponding XML elements and attributes. &lt;/p>
              &lt;/body> &lt;/html> ponding XML elements and attributes.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-23_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.name.endsWith('Type')</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-34_" name="NDR [Rule 9-34]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-MetadataType" context="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-34_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-34_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-34] (REF, SUB, EXT)&lt;/b>
              Within the schema, the name of a metadata element SHALL use the representation term
              Metadata. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Using the qualifier Metadata immediately
              identifies an element as representing metadata. &lt;/p>
              &lt;/body> &lt;/html> ent as representing metadata.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-NDR__Rule_9-34_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedAttribute ->forAll(a|a.type.stereotypedBy('MetadataType')
              implies a.name.match('.*Metadata.*')) --For PIM Profile, the naming constraint is
              enforced by PIM/PSM transformations. --A metadata element corresponds to a UML
              &lt;Property> whose type is a
            &lt;&lt;Metadata>>.</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType-base_Class" name="base_Class" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-4">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Class"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-Choice-base_Class NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18-ownedEnd" name="extension_Choice" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-Choice" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-18-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf" name="UnionOf">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf">
          <body>The UnionOf stereotype is applied to a Usage dependency, the client of which must be
            a Union DataType and the supplier of which must be a DataType that represents a legal
            union member type. A UnionOf dependency specifies that the supplier DataType is a member
            type of the client Union.</body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf-supplier_must_be_data_type" name="supplier must be data type" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf" context="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf-supplier_must_be_data_type-specification">
            <language>OCL2.0</language>
            <body>self.base_Usage.supplier.oclKindOf(DataType)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf-client_must_be_union" name="client must be union" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf" context="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf-client_must_be_union-specification">
            <language>OCL2.0</language>
            <body>self.base_Usage.client.stereotypedBy('Union')</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-UnionOf-base_Usage" name="base_Usage" visibility="private" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-15">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Usage"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20-ownedEnd NIEM_UML_Profile-NIEM_Common_Profile-Application-base_Usage" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20-ownedEnd" name="extension_" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-Application" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21-ownedEnd NIEM_UML_Profile-NIEM_Common_Profile-Restriction-base_Realization" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21-ownedEnd" name="extension_Restriction" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-Restriction" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-21-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType" name="AugmentationType">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> AugmentationType is a NIEMType Class that represents a
            NIEM augmentation type. A NIEM augmentation type is a complex type that provides a
            reusable block of data that may be added to object types or association types. An
            augmentation of an object type is a block of additional data that is an
            instance of an augmentation type, added to an object type to carry additional data
            beyond that of the original object definition. The applicability of an augmentation may
            be restricted using an AugmentationApplication Dependency or an Augments Generalization.
             A Class that is the specific Classifier of an Augments Generalization shall be inferred
            to be an AugmentationType. &lt;/p> &lt;p> AugmentationType is
            implemented in XML Schema as a complex type definition with complex content. Section 3.4
            of &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML
            Schema Structures&lt;/a> addresses complex type definitions in XML Schema;
            Section 7.4.5 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses augmentation types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html>
            nd-design-rules/1.3/&quot;>NIEM NDR v1.3&lt;/a> addresses augmentation
            types in NIEM-conformant XML Schema. &lt;/p> &lt;/body>
            &lt;/html> body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-48_" name="NDR [Rule 7-48]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType" context="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-48_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-48_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-48] (REF, SUB, EXT)
              &lt;/b>Within the schema, an augmentation element definition:
              &lt;/p> &lt;p> 1. SHALL have a type that is an augmentation
              type. &lt;/p> &lt;p> 2. SHALL use the substitutionGroup
              attribute such that it is transitively substitutable for the element
              structures:Augmentation. &lt;/p> &lt;p> An element that is not
              an augmentation element SHALL NOT meet either of the above criteria.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> An
              augmentation is trivially identifiable as such. The use of the common
              structures:Augmentation element allows message builders to optionally delay specifying
              augmentations to be applied to a type until runtime. &lt;/p>
              &lt;/body> &lt;/html> builders to optionally delay specifying
              augmentations to be applied to a type until runtime. &lt;/p>
              &lt;/body> &lt;/html> &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-48_-specification">
            <language>English</language>
            <body>The constraint is enforced by the transformation from PSM to XSD Schema artifact.
              A property whose type is an &lt;&lt;AugmentationType>> is an
              augmentation element. The property may directly or indirectly use the UML
              subsettedProperty mechanism to identify a substitutionGroup, which will be
              transitively substitutable for the element structures:Augmentation. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-47_" name="NDR [Rule 7-47]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType" context="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-47_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-47_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>NDR [Rule 7-47] (REF, EXT)&lt;/b>
              Essentially states that the general of the
              &lt;&lt;Augmentation>>, if it exists, must be an
              &lt;&lt;Augmentation>>. &lt;/p> &lt;p> Due
              to schema and other NDR rules, this also requires &lt;/p>
              &lt;ul> &lt;li> a maximum of one general for the given
              &lt;&lt;Augmentation>> &lt;/li> &lt;li>
              any subtypes of the given &lt;&lt;Augmentation>> must also be
              &lt;&lt;Augmentation>> &lt;/li> &lt;/ul>
              &lt;/body> &lt;/html> mentation>> must also be
              &lt;&lt;Augmentation>> &lt;/li> &lt;/ul>
              &lt;/body> &lt;/html> ul> &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-47_-specification">
            <language>OCL2.0</language>
            <body>(self.base_Class.general()->size()&lt;=1) and
              self.base_Class.general()->forAll(g|g.stereotypedBy('AugmentationType')) and
              self.base_Class.getTargetDirectedRelationships()
              ->forAll(r|r.oclIsKindOf(Gneralization) implies
              r.oclAsType(Generalization).specific.stereotypedBy('AugmentationType')) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and documentation.body.startsWith('A data
              type that supplements ') ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_9-28_" name="NDR [Rule 9-28]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType" context="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_9-28_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_9-28_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-28] (REF, SUB, EXT)&lt;/b>
              Within the schema, any augmentation type SHALL have a name that uses the
              representation term qualifier Augmentation. Types other than augmentation types SHALL
              NOT use the representation term qualifier Augmentation. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> Using the qualifier
              Augmentation immediately identifies a type as representing an augmentation.
              &lt;/p> &lt;/body> &lt;/html> a type as representing
              an augmentation. &lt;/p> &lt;/body> &lt;/html>
              y> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-NDR__Rule_9-28_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.name.match('.*AugmentationType')) --For PIM Profile, the naming
              constraint is enforced by PIM/PSM transformations. </body>
          </specification>
        </ownedRule>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType" specific="NIEM_UML_Profile-NIEM_Common_Profile-AugmentationType"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction-base_DataType NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23-ownedEnd" name="extension_ValueRestriction" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-ValueRestriction" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-23-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-List-base_DataType NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24-ownedEnd" name="extension_ListType" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-List" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-PropertyHolder-base_Class NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25-ownedEnd" name="extension_" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-PropertyHolder" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType" name="AssociationType">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> AssociationType is a NIEMType class that represents a NIEM association
            type. A NIEM association type establishes a relationship between objects, along with the
            properties of that relationship. A NIEM association is an instance of an association
            type. Associations are used when a simple NIEM property is insufficient to model the
            relationship clearly and when properties of a UML Association or AssociationClass may
            not necessarily be sufficient to reflect the variability of a NIEM association.
            Consequently, the AssociationType Stereotype is applied to a UML Class. Since an
            AssociationClass is also a Class, the AssociationType Stereotype may be applied to a UML
            AssociationClass where appropriate.   &lt;/p> &lt;p> Note that a
            UML AssociationClass specializing another AssociationClass must have the same number of
            ends as the other AssociationClass and must have at least two ends. This UML constraint
            prevents the usage of AssociationClass to model abstract NIEM association types that are
            intended to be extended by subtypes with additional ends.  A UML AssociationClass can
            specialize an abstract UML Class. &lt;/p> &lt;p> AssociationType
            is implemented in XML Schema as a complex type definition with complex content. Section
            3.4 of &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML
            Schema Structures&lt;/a> addresses complex type definitions in XML Schema;
            Section 7.4.3 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses association types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html>
            ref=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses association types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html> body>
            &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-42_" name="NDR [Rule 7-42]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType" context="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-42_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-42_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-42] (REF, SUB, EXT) &lt;/b>
              &lt;/p> &lt;p> Given that an association type defines a
              relationship between a set of participants, within an association type definition, any
              element that represents a participant SHALL be a reference element. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> &lt;/p>
              &lt;p> Associations are intended to relate objects defined elsewhere. They
              are not intended to carry content of participant objects. &lt;/p>
              &lt;p> &lt;/p> &lt;p> In UML, any property owned by
              the &lt;&lt;AssociationType>> which represents a NIEM reference
              must not be an aggregation. &lt;/p> &lt;/body>
              &lt;/html> the &lt;&lt;AssociationType>> which
              represents a NIEM reference must not be an aggregation. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-42_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedAttribute ->forAll(a|a.name.endsWith('Reference') implies
              (a.aggregation=AggregationKind::none))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and documentation.body.startsWith('A data
              type for a relationship ') ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-41_" name="NDR [Rule 7-41]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType" context="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-41_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-41_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>NDR [Rule 7-41] (REF, EXT)&lt;/b>
              Essentially states that the general of the
              &lt;&lt;Association>>, if it exists, must be an
              &lt;&lt;Association>>. &lt;/p> &lt;p> Due
              to schema and other NDR rules, this also requires &lt;/p>
              &lt;ul> &lt;li> a maximum of one general for the given
              &lt;&lt;Association>> &lt;/li> &lt;li> any
              subtypes of the given &lt;&lt;Association>> must also be
              &lt;&lt;Association>> &lt;/li> &lt;/ul>
              &lt;/body> &lt;/html> ssociation>> must also be
              &lt;&lt;Association>> &lt;/li> &lt;/ul>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_7-41_-specification">
            <language>OCL2.0</language>
            <body>(self.base_Class.generalization->size()&lt;=1) and
              self.base_Class.generalization.general->forAll(g|g.stereotypedBy('Association'))
              and self.base_Class.getTargetDirectedRelationships()
              ->select(r|r.oclIsKindOf(Generalization)).oclAsType(Generalization).specific
              ->forAll(s|s.stereotypedBy('Association'))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_9-27_" name="NDR [Rule 9-27]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType" context="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_9-27_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_9-27_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-27] (REF, SUB, EXT)&lt;/b>
              Within the schema, any association type SHALL have a name that uses the representation
              term qualifier Association. Types other than association types SHALL NOT use the
              representation term qualifier Association. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Using the qualifier Association
              immediately identifies a type as representing an association. &lt;/p>
              &lt;/body> &lt;/html> a type as representing an association.
              &lt;/p> &lt;/body> &lt;/html> dy>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-NDR__Rule_9-27_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.name.match('.*AssociationType')) --For PIM Profile, the naming
              constraint is enforced by PIM/PSM transformations. </body>
          </specification>
        </ownedRule>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType" specific="NIEM_UML_Profile-NIEM_Common_Profile-AssociationType"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-PropertyHolder" name="PropertyHolder">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-PropertyHolder-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-PropertyHolder">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> PropertyHolder is a Class holding global Properties that are not the
            subject of any specific NIEM type. A Property of a NIEM type may then be defined by
            reference to a Property of a PropertyHolder by using a References realization with the
            Property in the PropertyHolder as the supplier. Note that the multiplicity of Properties
            in a PropertyHolder is immaterial -- the multiplicities are established by Properties in
            the corresponding References client. The target namespace of Properties in a
            PropertyHolder is the target namespace of the Namespace Package that contains the
            PropertyHolder (which may be different than the target namespace of NIEM types that use
            the Properties in the PropertyHolder). &lt;/p> &lt;p>
            PropertyHolder does not represent any NIEM concept; it exists to permit the user to
            define a NIEM property that is not the subject of any NIEM type. There are significant
            differences between the UML representation and XML Schema implementation of a NIEM
            property. Sections 6.1.6.2 and 6.1.6.3 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a>, Rule 6-14 and Rule 6-15, require that an attribute or
            element declaration be a top-level declaration, but NIEM NDR v1.3 does not require a
            corresponding attribute use or element particle; however, Section 7.3.44 of [UML]
            requires that a Property be the ownedAttribute of a Classifier. Thus in the UML
            representation, the declaration and use of a Property are not distinct, and the
            declaration of a Property requires its use. In the XML Schema implementation, the
            declaration and use are distinct, and the declaration does not require a corresponding
            use. To resolve this difference, any Property within a PropertyHolder shall represent an
            attribute or element declaration without a corresponding attribute use or element
            particle. &lt;/p> &lt;p> PropertyHolders may be used to hold the
            properties of a substitution group.  Where a PropertyHolder is used to define a
            substitution group an extension of that substitution group shall be a subclass of the
            substitution group PropertyHolder. &lt;/p> &lt;/body>
            &lt;/html> ies of a substitution group.  Where a PropertyHolder is used to
            define a substitution group an extension of that substitution group shall be a subclass
            of the substitution group PropertyHolder. &lt;/p> &lt;/body>
            &lt;/html> &lt;/p> &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-PropertyHolder-base_Class" name="base_Class" visibility="private" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-25">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Class"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List" name="List">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-List">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A List is a DataType whose values consist of a finite length (possibly
            empty) sequence of values of another DataType, which is the item type of the List. A
            List DataType must have a single Property with multiplicity 0..* whose type is the item
            type. The name of this element is not material.   &lt;/p> &lt;p> A
            List DataType is implemented in XML schema as a list simple type definition. List
            represents a relationship between two simple type definitions: the first is a list
            simple type definition whose item type definition is the second. This relationship is
            implemented in XML Schema through the itemType attribute on the xsd:list element of the
            list simple type definition, the actual value of which resolves to the second type
            definition. Section 3.14 of &lt;a
            href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML Schema
            Structures&lt;/a> addresses list simple type definitions in XML Schema;
            Section 7.3 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses list simple type definitions in NIEM-conformant XML
            Schema. &lt;/p> &lt;/body> &lt;/html>
            rules/1.3/&quot;>NIEM NDR v1.3&lt;/a> addresses list simple type
            definitions in NIEM-conformant XML Schema. &lt;/p> &lt;/body>
            &lt;/html> > &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-List">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-List-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A
              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-no_generalizations" name="no generalizations" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-List" context="NIEM_UML_Profile-NIEM_Common_Profile-List">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-no_generalizations-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-List-no_generalizations">
            <body>A List shall not have any generalizations.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-no_generalizations-specification">
            <language>OCL2.0</language>
            <body>self.base_DataType.generalization->isEmpty()</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-_single_ownedAttribute_with_multiplicity_0..__typed____________DataType__" name=" single ownedAttribute with multiplicity 0..* typed&#xA;          &lt;DataType>>" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-List" context="NIEM_UML_Profile-NIEM_Common_Profile-List">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-_single_ownedAttribute_with_multiplicity_0..__typed____________DataType__-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-List-_single_ownedAttribute_with_multiplicity_0..__typed____________DataType__">
            <body>A List DataType shall have a single ownedAttribute with multiplicity 0..* whose
              type is also a DataType.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-_single_ownedAttribute_with_multiplicity_0..__typed____________DataType__-specification">
            <language>OCL2.0</language>
            <body>(self.base_DataType.ownedAttribute->size()=1) and
              self.base_DataType.ownedAttribute ->forAll(a|(a.lower=0) and (a.upper=-1)) </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-List-base_DataType" name="base_DataType" visibility="private" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-24">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#DataType"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application" name="Application" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> An Application stereotype is applied to a Usage dependency between a
            client Property or Class and a supplier Class. It corresponds to the NIEM concept of
            &quot;AppliesTo&quot;, which constrains the applicability of the client as being to the NIEM type
            represented by the supplier class. The Application Stereotype is abstract, its two
            concrete stereotypes being AugmentationApplication and MetadataApplication, representing
            the use of &quot;AppliesTo&quot; in the context of augmentation and metadata, respectively.
            &lt;/p> &lt;/body> &lt;/html> ion Stereotype is
            abstract, its two concrete stereotypes being AugmentationApplication and
            MetadataApplication, representing the use of &quot;AppliesTo&quot; in the context of augmentation
            and metadata, respectively. &lt;/p> &lt;/body>
            &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-24_" name="NDR [Rule 7-24]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-24_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-24_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-24] (REF, EXT)&lt;/b> Within the
              schema, the element appinfo:AppliesTo MAY be used in any of the following ways:
              &lt;/p> &lt;p> 1. To indicate a base type to which an
              augmentation may be applied. &lt;/p> &lt;p> 2. To indicate a
              base type to which a metadata type may be applied. &lt;/p>
              &lt;p> The element appinfo:AppliesTo SHALL NOT be used for any other
              purpose. &lt;/p> &lt;p> &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The appinfo:AppliesTo element is required
              to express constraints beyond those available within XML Schema. Use of this element
              allows advanced processing of instances and schemas for type safety.
              &lt;/p> &lt;p> &lt;/p> &lt;p> In UML
              terms, the &lt;Usage> client must be either an augmentation element (i.e.,
              a &lt;Property> whose type is an &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567y&quot;>Augmentation&lt;/a>>>)
              or a &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567z&quot;>Metadata&lt;/a>>>
              &lt;Classifier>.   The &lt;Usage> supplier must be a
              &lt;Classifier>. &lt;/p> &lt;/body>
              &lt;/html>
              0_2_7b3022e_1312665991957_183350_2567z&quot;>Metadata&lt;/a>>>
              &lt;Classifier>.   The &lt;Usage> supplier must be a
              &lt;Classifier>. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-24_-specification">
            <language>OCL2.0</language>
            <body>self.base_Usage.supplier->forAll(s|s.oclIsKindOf(Classifier)) and
              self.base_Usage.client ->forAll(client| client.stereotypedBy('MetadataType') or
              ( client.oclIsKindOf(Property) and
              client.oclAsType(Property).type.stereotypedBy('AugmentationType') ) )</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-25_" name="NDR [Rule 7-25]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-25_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-25_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-25] (REF, EXT)&lt;/b> Within the
              schema, the element appinfo:AppliesTo SHALL indicate a schema component by namespace
              and name. &lt;/p> &lt;p> &lt;/p> &lt;p> In
              UML, the &lt;&lt;AppliesTo>> must have a supplier which is a
              &lt;Class> or &lt;Datatype> whose nearestPackage is imported via
              &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_3_24a0131_1319232695341_898926_1534&quot;>NDRSchema&lt;/a>>>.
              &lt;/p> &lt;/body> &lt;/html>
              31_1319232695341_898926_1534&quot;>NDRSchema&lt;/a>>>.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-25_-specification">
            <language>OCL2.0</language>
            <body>self.base_Usage.supplier ->forAll(supplier| (supplier.oclIsKindOf(Class) or
              supplier.oclIsKindOf(DataType)) and
              supplier.getNearestPackage().stereotypedBy('Namespace') )</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-27_" name="NDR [Rule 7-27]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-27_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-27_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-27] (REF, EXT) &lt;/b>Given that
              the element appinfo:AppliesTo refers to a type, the applicability described by the
              element SHALL be understood to be the indicated type or a type transitively derived
              from the indicated type. &lt;/p> &lt;/body>
              &lt;/html> the indicated type. &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-27_-specification">
            <language>English</language>
            <body>This constraint is decomposed into two specific cases. NDR [Rule 7-49] defines
              constraints related to applying Augmentation and NDR [Rule 7-45] defines constraints
              related to applying Metadata. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-26_" name="NDR [Rule 7-26]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-26_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-26_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-26] (REF, EXT) &lt;/b>Within the
              schema, an attribute appinfo:namespace owned by an element appinfo:AppliesTo SHALL
              indicate the namespace of the type to which appinfo:AppliesTo refers. The indicated
              namespace SHALL be defined by a NIEM-conformant schema. &lt;/p>
              &lt;p> &lt;/p> &lt;p> In UML, the
              &lt;&lt;AppliesTo>> must have a supplier which is a
              &lt;Class> or &lt;Datatype> whose nearestPackage is imported via
              &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_3_24a0131_1319232695341_898926_1534&quot;>NDRSchema&lt;/a>>>.
              &lt;/p> &lt;/body> &lt;/html>
              3_24a0131_1319232695341_898926_1534&quot;>NDRSchema&lt;/a>>>.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-26_-specification">
            <language>English</language>
            <body>This constraint, at the UML level, is identical to NDR [Rule 7-25]. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-46_" name="NDR [Rule 7-46]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-46_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-46_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-46] (REF, EXT) &lt;/b>Within the
              schema, a &lt;&lt;&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567z&quot;>Metadata&lt;/a>>>
              type that does not have application information appinfo:AppliesTo MAY be applied to
              any object type, association type, or external adapter type. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> Metadata may be
              constrained to be applicable to only specific types, or it may be defined to be
              applicable to any type. The source of a piece of data and the security classification
              of a piece of data are examples of metadata that may be considered globally
              applicable. &lt;/p> &lt;/body> &lt;/html> tadata that
              may be considered globally applicable. &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-46_-specification">
            <language>English</language>
            <body>Definitional constraint. Application of &lt;&lt;AppliesTo>>
              is optional. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-28_" name="NDR [Rule 7-28]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-28_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-28_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-28] (REF, EXT)&lt;/b> Within the schema, an
              element appinfo:AppliesTo that does not carry an attribute appinfo:namespace SHALL
              refer to the target namespace of the schema in which it is used. &lt;/body>
              &lt;/html> is used. &lt;/body> &lt;/html> ml> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-28_-specification">
            <language>English</language>
            <body>This constraint is resolved by the combination of other constraints and the
              PSM-XSD transformations. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-29_" name="NDR [Rule 7-29]" constrainedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application" context="NIEM_UML_Profile-NIEM_Common_Profile-Application">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-29_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-29_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-29] (REF, EXT)&lt;/b> Within the
              schema, an element appinfo:AppliesTo SHALL carry an attribute appinfo:name. The value
              of this attribute SHALL indicate the local name of a schema component within the
              namespace specified by the element. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Together, this set of rules establishes
              the element appinfo:AppliesTo as a reference to a NIEM-conformant schema component to
              which a NIEM construct may be applied. &lt;/p> &lt;/body>
              &lt;/html> t to which a NIEM construct may be applied. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-NDR__Rule_7-29_-specification">
            <language>English</language>
            <body>This constraint is resolved by other constraints in combination with the PSM - XSD
              transformations.</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-Application-base_Usage" name="base_Usage" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-20">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Usage"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType" name="AdapterType">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> An AdapterType is a NIEMType Class that represents a NIEM adapter
            type. A NIEM adapter type is a NIEM object type that adapts external components for use
            within NIEM. External components are not NIEM-conforming (e.g., data components from
            other standards, e.g. GML, ISO, etc.). An adapter type creates a new class of object
            that embodies a single concept composed of external components. &lt;/p>
            &lt;p> AdapterType is implemented in XML Schema as a complex type definition
            with complex content. Section 3.4 of &lt;a
            href=&quot;http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/&quot;>XML Schema
            Structures&lt;/a> addresses complex type definitions in XML Schema; Section
            7.7 of &lt;a
            href=&quot;http://reference.niem.gov/niem/specification/naming-and-design-rules/1.3/&quot;>NIEM
            NDR v1.3&lt;/a> addresses adapter types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html> NIEM NDR
            v1.3&lt;/a> addresses adapter types in NIEM-conformant XML Schema.
            &lt;/p> &lt;/body> &lt;/html> body>
            &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Class.profiledBy('NIEM_PSM_Profile') implies
              self.base_Class.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A
              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) </body>
          </specification>
        </ownedRule>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-NIEMType" specific="NIEM_UML_Profile-NIEM_Common_Profile-AdapterType"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31" memberEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31-ownedEnd NIEM_UML_Profile-NIEM_Common_Profile-References-base_Realization" navigableOwnedEnd="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31-ownedEnd" name="extension_Subsets" visibility="private" type="NIEM_UML_Profile-NIEM_Common_Profile-References" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31" association="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_Common_Profile-packagedElement-31-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Profile" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile" name="Model_Package_Description_Profile" URI="http://www.omg.org/spec/NIEM-UML/20120501/Model_Package_Description_Profile" metamodelReference="NIEM_UML_Profile-Model_Package_Description_Profile-packageImport">
      <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
        <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1emwFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <contents xmi:type="ecore:EPackage" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ePackage" name="Model_Package_Description_Profile" nsURI="http://www.omg.org/spec/NIEM-UML/20120501/Model_Package_Description_Profile" nsPrefix="Model_Package_Description_Profile">
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_R1emwlY8EeO9lbaNv599nw" name="POCType">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fN0FY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-POCType"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN0VY8EeO9lbaNv599nw" name="POCTelephone" ordered="false" lowerBound="1" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN01Y8EeO9lbaNv599nw" name="POCName" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN1VY8EeO9lbaNv599nw" name="POCEmail" ordered="false" lowerBound="1" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_R1fN11Y8EeO9lbaNv599nw" name="ModelPackageDescriptionFile">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fN2FY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fN2VY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_R1fN2lY8EeO9lbaNv599nw" key="documentation" value="Constraint realized by PSM-XSD transformations.&#xA;( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema')&#xA;              ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement&#xA;              ->forEach(subsetElement|&#xA;              subsetElement.clientDependency->exists(d|d.stereotypedBy('References')) and&#xA;              subsetElement.clientDependency->select(d|d.stereotypedBy('References')).supplier&#xA;              ->forEach(referenceElement| (subsetElement.name=referenceElement.name) and&#xA;              (subsetElement.metaClass()=referenceElement.metaClass()) and(&#xA;              subsetElement.oclIsKindOf(Namespace) implies&#xA;              subsetElement.oclAstype(Namespace).ownedMember ->forEach(subsetMember|&#xA;              referenceElement.oclAstype(Namespace).ownedMember ->exists(referenceMember|&#xA;              (subsetMember.name=referenceMember.name) and&#xA;              (subsetMember.metaClass()=referenceMember.metaClass()) ) ) ) ) ) &#xA;Constraint realized by PSM-XSD transformations.&#xA;This constraint is realized by not defining an xsd:anyType as part of the type&#xA;              system.&#xA;Definitional.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint resolved by resolution to MPD [Rule 3-4]&#xA;Constraint on xsd:import is realized by the PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint satisfied by other documentedComponent rules which exclude subset&#xA;              schemas.&#xA;Constraint resolved by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint resolved by resolution to MPD [Rule 3-1]&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-MPD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema'&#xA;              implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement&#xA;              ->exists(element| element.clientDependency&#xA;              ->select(d|d.stereotypedBy('References')).supplier.getNearestPackage()&#xA;              ->select(r|r.stereotypedBy('Namespace')).getStereotypeApplication('Namespace').targetNamespace=&#xA;              element.owner.getStereotypeApplication('Namespace').targetNamespace ) ) &#xA;( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;              or (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')&#xA;              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement&#xA;              ->select(c|c.oclIsKindOf(DataType)).oclAsType(DataType)&#xA;              ->forAll(simpleType |&#xA;              simpleType.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation')))&#xA;This constraint is superceded by MPD [Rule 6-4]. Implementation of MPD [Rule 6-4]&#xA;              resolves this constraint. &#xA;( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;              or (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')&#xA;              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement&#xA;              ->select(c|c.oclIsKindOf(Class) and&#xA;              not(c.stereotypedBy('PropertyHolder'))).oclAsType(Class) ->forAll(complexType |&#xA;              complexType.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))) &#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;This constraint is realized by PSM-XSD transformations.&#xA;Constraint schemas are not modeled with the NIEM Profile. This constraint is not&#xA;              applied.&#xA;Constraint realized by PSM-MPD transformations.&#xA;This constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constrained realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformation.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-MPD transformations, based on required documentation&#xA;              for modeled external schema.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Deprecated indicator not currently in NIEM Profiles, no constraint specified.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;This constraint is realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;self.base_ElementImport.profiledBy('NIEM_PSM_Profile') implies ( (&#xA;              (self.natureURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;              or&#xA;              (self.natureURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')&#xA;              ) implies self.importedElement.getStereotypeApplication('Namespace').isConformant ) &#xA;Non-computable constraint.&#xA;The only Attribute Group allowed in NIEM is the&#xA;              structures:SimpleObjectAttributeGroup. The constraint is realized by PSM-XSD&#xA;              transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint resolved by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint resolved by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;This constraint is realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;UML well-formedness rules and semantics realize the constraint for referential&#xA;              integrity. &#xA;Constraint is resolved by PSM-XSD transformations. Constraint also addressed by&#xA;              UML Property order and naming constraints.&#xA;Constraint realized by PSM-XSD transformations.&#xA;( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;              or (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')&#xA;              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement&#xA;              ->select(c|c.oclIsKindOf(Classifier)).oclAsType(Classifier).attribute&#xA;              ->select(p|p.stereotypeApplication('XSDProperty').kind=XSDPropertyKindCode::element)&#xA;              ->forAll(attribute |&#xA;              attribute.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))) &#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Since imports are derived (and not modeled), the namespace for an import is the&#xA;              same as the targetNamespace modeled for the referenced schema, and the implementation&#xA;              of NDR [Rule 6-36] resolves this constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Definitional.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-MPD transformations, based on isConformant tag for&#xA;              referenced (external) schema.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint is realized by PSM-XSD transformations.&#xA;( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;              or (&#xA;              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')&#xA;              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement&#xA;              ->select(c|c.oclIsKindOf(Enumeration)).oclAsType(Enumeration).ownedLiteral&#xA;              ->forAll(literal |&#xA;              literal.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))) &#xA;A Reference is modeled as a non-aggregate Property. A given property (from a&#xA;              referenced PropertyHolder) may be redefined to be an aggregate (i.e., containment)&#xA;              Property. The naming and type constraints are realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Definitional.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint resolved by PSM-XSD transformations.&#xA;Constraint realized by PSM-MPD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;(Constraint not enforced by this model).&#xA;Constraint resolved by PSM-XSD transformations.&#xA;Non-computable constraint.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Constraint realized by PSM-XSD transformations.&#xA;Not computable.&#xA;Constraint is realized by PSM-XSD transformations."/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN21Y8EeO9lbaNv599nw" name="externalURI" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN3VY8EeO9lbaNv599nw" name="relativePathName" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN31Y8EeO9lbaNv599nw" name="natureCode" ordered="false" lowerBound="1" eType="_R1fN51Y8EeO9lbaNv599nw" defaultValueLiteral="xsd"/>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN4VY8EeO9lbaNv599nw" name="purposeCode" ordered="false" lowerBound="1" eType="_R1fODVY8EeO9lbaNv599nw" defaultValueLiteral="extension_schema"/>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fN41Y8EeO9lbaNv599nw" name="descriptionText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_R1fN5VY8EeO9lbaNv599nw" name="base_Usage" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Usage"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_R1fN51Y8EeO9lbaNv599nw" name="NatureCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fN6FY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN6VY8EeO9lbaNv599nw" name="mpd"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN6lY8EeO9lbaNv599nw" name="domain_update" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN61Y8EeO9lbaNv599nw" name="iepd" value="2"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN7FY8EeO9lbaNv599nw" name="release" value="3"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN7VY8EeO9lbaNv599nw" name="binary" value="4"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN7lY8EeO9lbaNv599nw" name="doc" value="5"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN71Y8EeO9lbaNv599nw" name="image" value="6"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN8FY8EeO9lbaNv599nw" name="gif" value="7"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN8VY8EeO9lbaNv599nw" name="jpg" value="8"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN8lY8EeO9lbaNv599nw" name="png" value="9"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN81Y8EeO9lbaNv599nw" name="mdb" value="10"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN9FY8EeO9lbaNv599nw" name="pdf" value="11"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN9VY8EeO9lbaNv599nw" name="ppt" value="12"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN9lY8EeO9lbaNv599nw" name="svg" value="13"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN91Y8EeO9lbaNv599nw" name="vsd" value="14"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN-FY8EeO9lbaNv599nw" name="xls" value="15"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN-VY8EeO9lbaNv599nw" name="zip" value="16"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN-lY8EeO9lbaNv599nw" name="character" value="17"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN-1Y8EeO9lbaNv599nw" name="csv" value="18"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN_FY8EeO9lbaNv599nw" name="html" value="19"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN_VY8EeO9lbaNv599nw" name="text" value="20"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN_lY8EeO9lbaNv599nw" name="xml" value="21"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fN_1Y8EeO9lbaNv599nw" name="catalog" value="22"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOAFY8EeO9lbaNv599nw" name="changelog" value="23"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOAVY8EeO9lbaNv599nw" name="owl" value="24"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOAlY8EeO9lbaNv599nw" name="rdf" value="25"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOA1Y8EeO9lbaNv599nw" name="schematron" value="26"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOBFY8EeO9lbaNv599nw" name="wantlist" value="27"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOBVY8EeO9lbaNv599nw" name="wsdl" value="28"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOBlY8EeO9lbaNv599nw" name="xhtml" value="29"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOB1Y8EeO9lbaNv599nw" name="xmi" value="30"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOCFY8EeO9lbaNv599nw" name="xsd" value="31"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOCVY8EeO9lbaNv599nw" name="xslt" value="32"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOClY8EeO9lbaNv599nw" name="file_set" value="33"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOC1Y8EeO9lbaNv599nw" name="core_update" value="34"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fODFY8EeO9lbaNv599nw" name="eiem" value="35"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_R1fODVY8EeO9lbaNv599nw" name="PurposeCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fODlY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOD1Y8EeO9lbaNv599nw" name="extension_schema_set"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOEFY8EeO9lbaNv599nw" name="reference_schema_set" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOEVY8EeO9lbaNv599nw" name="subset_schema_set" value="2"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOElY8EeO9lbaNv599nw" name="file" value="3"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOE1Y8EeO9lbaNv599nw" name="business_rules" value="4"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOFFY8EeO9lbaNv599nw" name="catalog" value="5"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOFVY8EeO9lbaNv599nw" name="documentation" value="6"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOFlY8EeO9lbaNv599nw" name="administrative" value="7"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOF1Y8EeO9lbaNv599nw" name="endorsement" value="8"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOGFY8EeO9lbaNv599nw" name="memorandum" value="9"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOGVY8EeO9lbaNv599nw" name="report" value="10"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOGlY8EeO9lbaNv599nw" name="conformance_report" value="11"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOG1Y8EeO9lbaNv599nw" name="quality_assurance_report" value="12"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOHFY8EeO9lbaNv599nw" name="test_report" value="13"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOHVY8EeO9lbaNv599nw" name="technical_reference" value="14"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOHlY8EeO9lbaNv599nw" name="non-normative_reference" value="15"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOH1Y8EeO9lbaNv599nw" name="normative_reference" value="16"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOIFY8EeO9lbaNv599nw" name="metadata_extended" value="17"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOIVY8EeO9lbaNv599nw" name="sample_instance" value="18"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOIlY8EeO9lbaNv599nw" name="schema" value="19"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOI1Y8EeO9lbaNv599nw" name="constraint_schema" value="20"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOJFY8EeO9lbaNv599nw" name="exchange_schema" value="21"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOJVY8EeO9lbaNv599nw" name="extension_schema" value="22"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOJlY8EeO9lbaNv599nw" name="incremental_schema" value="23"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOJ1Y8EeO9lbaNv599nw" name="reference_schema" value="24"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOKFY8EeO9lbaNv599nw" name="replacement_schema" value="25"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOKVY8EeO9lbaNv599nw" name="subset_schema" value="26"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOKlY8EeO9lbaNv599nw" name="tool_specific_file" value="27"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOK1Y8EeO9lbaNv599nw" name="wantlist" value="28"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOLFY8EeO9lbaNv599nw" name="file_set" value="29"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOLVY8EeO9lbaNv599nw" name="schema_set" value="30"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOLlY8EeO9lbaNv599nw" name="constraint_schema_set" value="31"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOL1Y8EeO9lbaNv599nw" name="exchange_schema_set" value="32"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOMFY8EeO9lbaNv599nw" name="changelog" value="33"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOMVY8EeO9lbaNv599nw" name="web_service" value="34"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOMlY8EeO9lbaNv599nw" name="data_dictionary" value="35"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOM1Y8EeO9lbaNv599nw" name="data_model" value="36"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fONFY8EeO9lbaNv599nw" name="display" value="37"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fONVY8EeO9lbaNv599nw" name="mapping" value="38"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fONlY8EeO9lbaNv599nw" name="master_document" value="39"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fON1Y8EeO9lbaNv599nw" name="ontology" value="40"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOOFY8EeO9lbaNv599nw" name="transformation" value="41"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_R1fOOVY8EeO9lbaNv599nw" name="RelationshipCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fOOlY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOO1Y8EeO9lbaNv599nw" name="updates"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOPFY8EeO9lbaNv599nw" name="conforms_to" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOPVY8EeO9lbaNv599nw" name="version_of" value="2"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOPlY8EeO9lbaNv599nw" name="specializes" value="3"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOP1Y8EeO9lbaNv599nw" name="generalizes" value="4"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOQFY8EeO9lbaNv599nw" name="supersedes" value="5"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOQVY8EeO9lbaNv599nw" name="deprecates" value="6"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1fOQlY8EeO9lbaNv599nw" name="adapts" value="7"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_R1fOQ1Y8EeO9lbaNv599nw" name="ModelPackageDescriptionRelationship">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fORFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fORVY8EeO9lbaNv599nw" name="descriptionText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_R1fOR1Y8EeO9lbaNv599nw" name="base_Dependency" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Dependency"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOSVY8EeO9lbaNv599nw" name="relationshipCode" ordered="false" lowerBound="1" eType="_R1fOOVY8EeO9lbaNv599nw" defaultValueLiteral="conforms_to"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_R1fOS1Y8EeO9lbaNv599nw" name="ModelPackageDescription">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fOTFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1fOTVY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_R1fOTlY8EeO9lbaNv599nw" key="documentation" value="derive: self.mpdBaseURI.repr().concat(self.mpdVersionID.repr()).oclAsType(AnyURI) &#xA;self.mpdBaseURI.repr().startsWith('http:/') &#xA;Constraints on master document are resolved during PSM-MPD transformation.&#xA;Constraint is resolved via PSM-MPD transformations which produce the catalog as&#xA;              specified by the MPD. &#xA;Constraints on changelogs are resolved by PSM-MPD transformations.&#xA;Packaging constraints are resolved by PSM-MPD transformations.&#xA;Constraints on URIs are partially satisfied by specific URI Constraints expressed&#xA;              elsewhere in the NDR and MPD. For URI references embedded elsewhere in the model, it&#xA;              would be difficult to express the constraint in OCL. This constraint must be manually&#xA;              resolved by the modeler. &#xA;Packaging constraints are resolved by PSM-MPD transformations.&#xA;Constraints on changelogs are resolved by PSM-MPD transformations.&#xA;Constraints on changelog are resolved during PSM-MPD transformations.&#xA;( self.base_Component.profiledBy('NIEM_PSM_Profile') and&#xA;              (self.mpdClassCode=ModelPackageDescriptionClassCode::iepd) ) implies&#xA;              self.base_Component.elementImport ->exists(elementImport|&#xA;              elementImport.stereotypedBy('ModelPackageDescriptionFile') and (&#xA;              elementImport.getStereotypeApplication('ModelPackageDescriptionFile').purposeURI=&#xA;              'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#exchange-schema' )&#xA;              and elementImport.importElement.oclAsType(Package).packagedElement&#xA;              ->exists(e|e.stereotypedBy('PropertyHolder') and&#xA;              e.oclAsType(Class).ownedAttribute->notEmpty()) ) &#xA;Constraints on master document are resolved by PSM-MPD transformations.&#xA;Packaging constraints are resolved by PSM-MPD transformations.&#xA;self.mpdVersionID.match('[0-9]+(\\.[0-9]+)*((alpha|beta|rc|rev)[0-9]+)?') &#xA;Constraints on packaging are resolved during PSM-MPD transformation.&#xA;( self.base_Component.profiledBy('NIEM_PSM_Profile') and (&#xA;              (self.mpdClassCode=ModelPackageDescriptionClassCode::iepd) or&#xA;              (self.mpdClassCode=ModelPackageDescriptionClassCode::eiem) ) ) implies&#xA;              self.base_Component.elementImport&#xA;              ->select(elementImport|elementImport.stereotypedBy('ModelPackageDescriptionFile')).getStereotypeApplication('ModelPackageDescriptionFile').purposeURI&#xA;              ->exists(purposeURI|&#xA;              (purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema')&#xA;              or&#xA;              (purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;              ) &#xA;Explicit URI references are not modelled for well known artifacts such as schemas.&#xA;              Serialization of MPD artifacts such as schemas are via PSM-MPD transformations which&#xA;              construct URI references according to this MPD rule.&#xA;Constraints for catalog construction are resolved in PSM-MPD transformations.&#xA;This constraint is resolved by PSM-MPD transformations.&#xA;This constraint is realized by PSM-MPD transformations.&#xA;Constraints on artifact URIs are resolved during PSM-MPD transformations.&#xA;Packaging constraints are resolved by PSM-MPD transformations.&#xA;This constraint is resolved by a combination of applying all specified NDR-based&#xA;              constraints and transformations to target artifacts.&#xA;Packaging constraints are resolved by transformations.&#xA;not(self.mpdVersionID.oclIsUndefined()) and (self.mpdVersionID&lt;>'')&#xA;              -- This constraint also satisfied by tag mpdVersionID, which is required to have a&#xA;              value.&#xA;Packaging constraints are resolved by PSM-MPD transformations.&#xA;All catalog constraints are resolved in PSM-MPD transformation.&#xA;Constraints on changelogs are resolved during PSM-MPD transformation.&#xA;Satisfaction of this constraint requires comparative analysis between versions;&#xA;              can not be expressed easily in OCL.&#xA;An EIEM is an MPD with a packageCode of EIEM. An EIEM is typically bundled as a&#xA;              reusable model library which can be referenced from IEPDs. This relationship between&#xA;              EIEM and IEPD is used by PSM-MPD transformations to construct the catalog entries in&#xA;              resolution of this constraint.&#xA;Constraints for catalog construction are resolved in PSM-MPD transformation. &#xA;Packaging constraints are resolved by PSM-MPD transformations.&#xA;The schemaLocation constraints are resolved during PSM-MPD transformation."/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_R1fOT1Y8EeO9lbaNv599nw" name="base_Component" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Component"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOUVY8EeO9lbaNv599nw" name="mpdVersionID" ordered="false" lowerBound="1" defaultValueLiteral="1.0">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOU1Y8EeO9lbaNv599nw" name="mpdBaseURI" ordered="false" lowerBound="1" defaultValueLiteral="http://iepd.org/myIEPD/">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOVVY8EeO9lbaNv599nw" name="mpdClassCode" ordered="false" lowerBound="1" eType="_R1f09FY8EeO9lbaNv599nw" defaultValueLiteral="iepd"/>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOV1Y8EeO9lbaNv599nw" name="descriptionText" ordered="false" defaultValueLiteral="An exchange to notify partner agencies to perform contingency operations.">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOWVY8EeO9lbaNv599nw" name="SecurityMarkingText" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOW1Y8EeO9lbaNv599nw" name="CreationDate" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOXVY8EeO9lbaNv599nw" name="LastRevsionDate" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1fOX1Y8EeO9lbaNv599nw" name="NextRevisionDate" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f04FY8EeO9lbaNv599nw" name="StatusText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f04lY8EeO9lbaNv599nw" name="KeywordText" ordered="false" lowerBound="1" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f05FY8EeO9lbaNv599nw" name="DomainText" ordered="false" lowerBound="1" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f05lY8EeO9lbaNv599nw" name="PurposeText" ordered="false" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f06FY8EeO9lbaNv599nw" name="ExchangePatternText" ordered="false" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f06lY8EeO9lbaNv599nw" name="ExchangePartnerName" ordered="false" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f07FY8EeO9lbaNv599nw" name="ASName" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f07lY8EeO9lbaNv599nw" name="ASAddressText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f08FY8EeO9lbaNv599nw" name="ASWebSiteURL" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_R1f08lY8EeO9lbaNv599nw" name="POC" ordered="false" lowerBound="1" upperBound="-1" eType="_R1emwlY8EeO9lbaNv599nw" containment="true"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_R1f09FY8EeO9lbaNv599nw" name="ModelPackageDescriptionClassCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1f09VY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f09lY8EeO9lbaNv599nw" name="eiem"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f091Y8EeO9lbaNv599nw" name="iepd" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f0-FY8EeO9lbaNv599nw" name="core_update" value="2"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f0-VY8EeO9lbaNv599nw" name="release" value="3"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f0-lY8EeO9lbaNv599nw" name="domain_update" value="4"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_R1f0-1Y8EeO9lbaNv599nw" name="ModelPackageDescriptionFileSet">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1f0_FY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1f0_VY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_R1f0_lY8EeO9lbaNv599nw" key="documentation" value="self.base_Package.namespace.stereotypedBy('ModelPackageDescription')"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f0_1Y8EeO9lbaNv599nw" name="externalURI" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1AVY8EeO9lbaNv599nw" name="natureCode" ordered="false" lowerBound="1" eType="_R1fN51Y8EeO9lbaNv599nw" defaultValueLiteral="file_set"/>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1A1Y8EeO9lbaNv599nw" name="purposeCode" ordered="false" lowerBound="1" eType="_R1fODVY8EeO9lbaNv599nw" defaultValueLiteral="extension_schema_set"/>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1BVY8EeO9lbaNv599nw" name="descriptionText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_R1f1B1Y8EeO9lbaNv599nw" name="base_Component" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Component"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_R1f1CVY8EeO9lbaNv599nw" name="ChangeLogType">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1f1ClY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_R1f1C1Y8EeO9lbaNv599nw" name="base_Package" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Package"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1DVY8EeO9lbaNv599nw" name="ChangeLogSummaryText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1D1Y8EeO9lbaNv599nw" name="ChangeLogSubmitterName" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1EVY8EeO9lbaNv599nw" name="ChangeLogApplicationInstructionsText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_R1f1E1Y8EeO9lbaNv599nw" name="ChangeInformationType">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1f1FFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_R1f1FVY8EeO9lbaNv599nw" name="base_Package" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Package"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1F1Y8EeO9lbaNv599nw" name="ChangeSummaryText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1GVY8EeO9lbaNv599nw" name="ChangeReasonText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1G1Y8EeO9lbaNv599nw" name="ChangeFullDescriptionText" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1HVY8EeO9lbaNv599nw" name="ChangeNCCTIssueNumber" ordered="false" upperBound="-1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Integer"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_R1f1H1Y8EeO9lbaNv599nw" name="ChangeCode" ordered="false" upperBound="-1" eType="_R1f1IVY8EeO9lbaNv599nw"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_R1f1IVY8EeO9lbaNv599nw" name="ChangeCodeSimpleType">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_R1f1IlY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f1I1Y8EeO9lbaNv599nw" name="new_requirement"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f1JFY8EeO9lbaNv599nw" name="bug_fix" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f1JVY8EeO9lbaNv599nw" name="refactoring" value="2"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f1JlY8EeO9lbaNv599nw" name="harmonization" value="3"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_R1f1J1Y8EeO9lbaNv599nw" name="general_improvement" value="4"/>
            </eClassifiers>
          </contents>
        </eAnnotations>
      </xmi:Extension>
      <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile">
        <body>The Model Package Description Profile comprises stereotypes that are used to mode NIEM
          MPDs. The diagram shows all the stereotypes defined in this profile.</body>
      </ownedComment>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packageImport" importingNamespace="NIEM_UML_Profile-Model_Package_Description_Profile">
        <importedPackage xmi:type="uml:Model" href="http://www.omg.org/spec/UML/20110701/UML.xmi#_0"/>
      </packageImport>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1" memberEnd="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-base_Component NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1-ownedEnd" name="extension_" visibility="private" type="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" aggregation="composite" owningAssociation="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType" name="POCType">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-POCType">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body> A set of
            metadata used to contact the authoritative source for an MPD. &lt;/body>
            &lt;/html> &lt;/body> &lt;/html> l> </body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCTelephone" name="POCTelephone" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCTelephone-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCTelephone">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              telephone number. &lt;/body> &lt;/html> &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCTelephone-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCName" name="POCName" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCName-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCName">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A name
              for a person, position, or title. &lt;/body> &lt;/html>
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCEmail" name="POCEmail" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCEmail-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCEmail">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> An
              email address. &lt;/body> &lt;/html> &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-POCType-POCEmail-upperValue" value="*"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" name="ModelPackageDescriptionFile">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The ModelPackageDescriptionFile stereotype applies to a Usage
            dependency that represents a relationship between an MPD or a file set and an artifact
            (generally a namespace) to be included in the MPD. Reference Sections 4.2.3 and 4.2.4 of
            NIEM MPD Specification v1.0
            (http://reference.niem.gov/niem/specification/model-package-description/1.0/).
            &lt;/p> &lt;/body> &lt;/html>
            l-package-description/1.0/). &lt;/p> &lt;/body>
            &lt;/html> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-15_" name="NDR [Rule 6-15]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-15_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-15_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-15] (REF, SUB, EXT)&lt;/b>
              Within the schema, any attribute declaration owning the attribute name MUST appear as
              an immediate child of the document element xsd:schema. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> All schema components
              defined by NIEM-conformant schemas are named, accessible from outside the defining
              schema, and reusable across schemas. Local attribute definitions provide named
              attributes that are not reusable outside the context in which they are defined.
              Requiring named NIEM attributes to be top level ensures that they are globally
              reusable. &lt;/p> &lt;/body> &lt;/html> to be top
              level ensures that they are globally reusable. &lt;/p>
              &lt;/body> &lt;/html> /body> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-15_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-01_" name="MPD [Rule 3-01]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-01_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-01_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 3-1] &lt;/b>Any XML instance that
              validates against a correct NIEM schema subset will always validate against the entire
              NIEM reference schema set from which that subset was created. &lt;/p>
              &lt;p> &lt;/p> &lt;p align=&quot;LEFT&quot;
              style=&quot;margin-bottom:0in;margin-top:0.11in;&quot;> &lt;font face=&quot;Times, serif&quot;
              color=&quot;#000000&quot; size=&quot;2&quot;>This rule should be satisfied as a result of
              redefinition semantics and other constraints&lt;/font>&lt;font
              face=&quot;Times&quot; color=&quot;#000000&quot; size=&quot;2&quot;> associated with
              &lt;&lt;&lt;/font>&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567Q&quot;>References&lt;/a>&lt;font
              face=&quot;Times&quot; color=&quot;#000000&quot;
              size=&quot;2&quot;>>>&lt;/font>&lt;font face=&quot;Times, serif&quot;
              color=&quot;#000000&quot; size=&quot;2&quot;>. We require that all type definitions in the
              &lt;/font>&lt;font face=&quot;Times&quot; color=&quot;#000000&quot; size=&quot;2&quot;>subset
              &lt;/font>&lt;font face=&quot;Times, serif&quot; color=&quot;#000000&quot;
              size=&quot;2&quot;>schema are &lt;/font>&lt;font face=&quot;Times&quot;
              color=&quot;#000000&quot; size=&quot;2&quot;>&lt;&lt;&lt;/font>&lt;a
              href=&quot;mdel://_17_0_2_7b3022e_1312665991957_183350_2567Q&quot;>References&lt;/a>&lt;font
              face=&quot;Times&quot; color=&quot;#000000&quot;
              size=&quot;2&quot;>>>&lt;/font>&lt;font face=&quot;Times, serif&quot;
              color=&quot;#000000&quot; size=&quot;2&quot;> &lt;/font>&lt;font face=&quot;Times&quot;
              color=&quot;#000000&quot; size=&quot;2&quot;>to&lt;/font>&lt;font face=&quot;Times,
              serif&quot; color=&quot;#000000&quot; size=&quot;2&quot;> &lt;/font>&lt;font face=&quot;Times&quot;
              color=&quot;#000000&quot; size=&quot;2&quot;>corresponding type definitions in
              the&lt;/font>&lt;font face=&quot;Times, serif&quot; color=&quot;#000000&quot;
              size=&quot;2&quot;> reference schema and that all elements in type definitions are
              redefinitions. &lt;/font> &lt;/p> &lt;/body>
              &lt;/html> ize=&quot;2&quot;> reference schema and that all elements in type
              definitions are redefinitions. &lt;/font> &lt;/p>
              &lt;/body> &lt;/html> > &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-01_-specification">
            <language>OCL2.0</language>
            <body>( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema')
              ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement
              ->forEach(subsetElement|
              subsetElement.clientDependency->exists(d|d.stereotypedBy('References')) and
              subsetElement.clientDependency->select(d|d.stereotypedBy('References')).supplier
              ->forEach(referenceElement| (subsetElement.name=referenceElement.name) and
              (subsetElement.metaClass()=referenceElement.metaClass()) and(
              subsetElement.oclIsKindOf(Namespace) implies
              subsetElement.oclAstype(Namespace).ownedMember ->forEach(subsetMember|
              referenceElement.oclAstype(Namespace).ownedMember ->exists(referenceMember|
              (subsetMember.name=referenceMember.name) and
              (subsetMember.metaClass()=referenceMember.metaClass()) ) ) ) ) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-45_" name="NDR [Rule 6-45]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-45_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-45_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-45] (REF, SUB, EXT)
              &lt;/b>Within the schema, when a namespace other than the XML namespace or
              the XML Schema namespace is used, its content MUST be valid with respect to the schema
              imported for that namespace. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> XML Schema does not address the
              schema-validity of content used for annotations or attributes on schema components.
              This rule ensures that content used in such a manner is schema-valid. This encourages
              interoperable data definitions and schema documents. &lt;/p>
              &lt;/body> &lt;/html> ages interoperable data definitions and
              schema documents. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-45_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-07_" name="NDR [Rule 6-07]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-07_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-07_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-7] (REF, SUB, EXT)&lt;/b> The
              schema SHALL NOT reference the type xsd:anyType. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> XML Schema has the concept of the
              &quot;ur-type,&quot; a type that is the root of all other types. This type is realized in
              schemas as xsd:anyType. &lt;/p> &lt;p> NIEM-conformant schemas
              must not use xsd:anyType, because this feature permits the introduction of arbitrary
              content (i.e., untyped and unconstrained data) into an XML instance. NIEM intends that
              the schemas describing that instance describe all constructs within the instance.
              &lt;/p> &lt;/body> &lt;/html> describing that
              instance describe all constructs within the instance. &lt;/p>
              &lt;/body> &lt;/html> > &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-07_-specification">
            <language>English</language>
            <body>This constraint is realized by not defining an xsd:anyType as part of the type
              system.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-59_" name="NDR [Rule 7-59]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-59_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-59_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-59] (REF, SUB, EXT)
              &lt;/b>Within the schema, any two elements of the form &lt;/p>
              &lt;p style=&quot;margin-left:10.0px;&quot;> &lt;i>NCName
              &lt;/i> &lt;/p> &lt;p style=&quot;margin-left:0.0px;&quot;> and
              &lt;/p> &lt;p style=&quot;margin-left:10.0px;&quot;>
              &lt;i>NCNameReference&lt;/i> &lt;/p> &lt;p
              style=&quot;margin-left:0.0px;&quot;> where the string value of NCName is the same in
              both forms, SHALL be defined to have identical semantics. NIEM recognizes no
              difference in meaning between a reference element and an element that is not a
              reference element. &lt;/p> &lt;p style=&quot;margin-left:0.0px;&quot;>
              &lt;b>Rationale&lt;/b> NIEM-conformant data instances may use
              concrete data elements and reference elements as needed, to represent the meaning of
              the fundamental data. There is no difference in meaning between reference and concrete
              data representations. The two different methods are available for ease of
              representation. No difference in meaning should be implied by the use of one method or
              the other. &lt;/p> &lt;p style=&quot;margin-left:0.0px;&quot;> Assertions
              that indicate &quot;included&quot; data is intrinsic, while referenced data is extrinsic, are
              not valid and are not applicable to NIEM-conformant data instances and data
              definitions. &lt;/p> &lt;/body> &lt;/html> quot; data
              is intrinsic, while referenced data is extrinsic, are not valid and are not applicable
              to NIEM-conformant data instances and data definitions. &lt;/p>
              &lt;/body> &lt;/html> > &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-59_-specification">
            <language>English</language>
            <body>Definitional.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-25_" name="NDR [Rule 6-25]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-25_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-25_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-25] (REF, SUB, EXT)
              &lt;/b>Within the schema, if the element xsd:sequence carries the attribute
              maxOccurs, it MUST set the value of the attribute to 1. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> XML Schema allows each
              particle to specify cardinality (how many times the particle may appear in an
              instance). NIEM restricts the cardinality of xsd:sequence particles to exactly one, to
              ensure that content model definitions are defined in as straightforward a manner as
              possible. &lt;/p> &lt;/body> &lt;/html> efined in as
              straightforward a manner as possible. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-25_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-12_" name="NDR [Rule 6-12]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-12_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-12_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-12] (REF, SUB, EXT) &lt;/b>The
              schema SHALL NOT contain the element xsd:anyAttribute. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> The xsd:anyAttribute
              element provides a wildcard, where arbitrary attributes may appear. The element
              xsd:anyAttribute may appear within constraint schemas or within other schemas that are
              not NIEM-conformant, but it is prohibited in NIEM-conformant schemas.
              &lt;/p> &lt;/body> &lt;/html> t is prohibited in
              NIEM-conformant schemas. &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-12_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-15_" name="NDR [Rule 7-15]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-15_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-15_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-15] (REF, EXT) &lt;/b>The schema
              SHALL import the appinfo namespace. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> For uniformity, all NIEM-conformant
              schemas must import the appinfo namespace. &lt;/p> &lt;/body>
              &lt;/html> the appinfo namespace. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-15_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-69_" name="NDR [Rule 7-69]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-69_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-69_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-69] (SUB)&lt;/b> The value of the targetNamespace
              attribute owned by the xsd:schema document element of the subset schema must be the
              same as the value of the targetNamespace attribute owned by the xsd:schema document
              element of the reference schema. &lt;/body> &lt;/html> erence
              schema. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-69_-specification">
            <language>English</language>
            <body>Constraint resolved by resolution to MPD [Rule 3-4]</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05.1_" name="MPD [Rule 3-05.1]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05.1_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05.1_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-5.1]&lt;/b> If a schema in a reference schema set
              has been omitted from a derived subset, then every xsd:import occurrence of that
              schema MUST be removed from all schemas within the subset. &lt;/body>
              &lt;/html> e subset. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05.1_-specification">
            <language>English</language>
            <body>Constraint on xsd:import is realized by the PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-13_" name="NDR [Rule 7-13]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-13_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-13_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-13] (REF, EXT)&lt;/b> A data
              definition SHALL NOT contain explicit representational or data typing information such
              as number characters, type of characters, etc., unless the very nature of the
              component can be described only by such information. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> A component definition
              is intended to describe semantic meaning only, not representation or structure. How a
              component with simple content is represented is indicated through the representation
              term and further refined through constraints. &lt;/p> &lt;/body>
              &lt;/html> tion term and further refined through constraints.
              &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-13_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-21_" name="NDR [Rule 9-21]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-21_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-21_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-21] (REF, SUB, EXT) &lt;/b>Within the schema, the
              name of an element declaration that is of complex content and that does not correspond
              to a concept listed in NDR Table 9-2: Representation Terms MUST NOT use a
              representation term. &lt;/body> &lt;/html> entation term.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-21_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-05_" name="NDR [Rule 6-05]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-05_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-05_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-5] (REF, SUB, EXT)&lt;/b> The
              schema SHALL NOT contain the element xsd:include. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Element xsd:include brings schemas
              defined in separate files into the current namespace. It breaks a namespace up into
              arbitrary partial schemas, which needlessly complicates the schema structure, making
              it harder to reuse and process, and also increases the likelihood of conflicting
              definitions. &lt;/p> &lt;p> Inclusion of schemas that do not
              have namespaces also complicates schema understanding. This inclusion makes it
              difficult to find the realization of a specific schema artifact and create aliases for
              schema components that should be reused. Inclusion of schemas also violates [Principle
              8], as it uses multiple schemas to construct a namespace. &lt;/p>
              &lt;/body> &lt;/html> mas also violates [Principle 8], as it
              uses multiple schemas to construct a namespace. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-05_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-03_" name="MPD [Rule 3-03]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-03_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-03_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-3]&lt;/b> NIEM subset schemas may omit all
              xsd:annotation elements that are in the NIEM reference schema from which it is
              derived. &lt;/body> &lt;/html> ved. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-03_-specification">
            <language>English</language>
            <body>Constraint satisfied by other documentedComponent rules which exclude subset
              schemas.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-34_" name="NDR [Rule 7-34]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-34_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-34_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-34] (REF, EXT)&lt;/b> Within the schema, an
              element appinfo:ReferenceTarget that does not carry an attribute appinfo:namespace
              SHALL refer to the target namespace of the schema in which it is used.
              &lt;/body> &lt;/html> is used. &lt;/body>
              &lt;/html> ml> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-34_-specification">
            <language>English</language>
            <body>Constraint resolved by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-16_" name="NDR [Rule 6-16]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-16_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-16_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-16] (REF, EXT) &lt;/b>The schema
              SHALL NOT contain any of the elements xsd:unique, xsd:key, xsd:keyref, xsd:selector,
              or xsd:field. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> XML Schema provides NIEM with the ability
              to apply uniqueness constraints to schema-validated content. These mechanisms,
              however, establish relationships in a way that is very difficult to understand,
              extend, and keep consisent through schema reuse. These elements may be used in subset
              schemas and constraint schemas. &lt;/p> &lt;/body>
              &lt;/html> be used in subset schemas and constraint schemas.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-16_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-24_" name="NDR [Rule 6-24]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-24_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-24_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-24] (REF, SUB, EXT)&lt;/b> Within the schema, if
              the element xsd:sequence carries the attribute minOccurs, it MUST set the value for
              the attribute to 1. &lt;/body> &lt;/html> ute to 1.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-24_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-70_" name="NDR [Rule 7-70]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-70_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-70_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-70] (SUB) &lt;/b>The schema must
              be constructed such that any instance that is XML Schema valid against the schema must
              also be XML Schema valid against the base schema. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> A subset schema is a briefer, abridged
              form of its base schema. The subset schema is intended to stand in the place of the
              base schema for the purpose of XML Schema validation in many situations. As such, it
              is imperative that the subset schema sustain the constraints expressed by the base
              schema. The NDR does not specify what mechanisms a subset schema must use to support
              the constraints of the base schema. &lt;/p> &lt;/body>
              &lt;/html> t schema must use to support the constraints of the base schema.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-70_-specification">
            <language>English</language>
            <body>Constraint resolved by resolution to MPD [Rule 3-1]</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-30_" name="NDR [Rule 7-30]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-30_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-30_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-30] (REF, EXT)&lt;/b> Within the
              schema, the element appinfo:ReferenceTarget SHALL identify the XML Schema type
              definition of an element information item to which an instance of a reference element
              may validly refer. The element appinfo:ReferenceTarget SHALL NOT be used for any other
              purpose. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This describes the meaning of a reference
              target. The term type definition is as used in
              &lt;b>[XMLSchemaStructures]&lt;/b>, in the PSVI
              (post-schema-validation infoset) definition for an element information item. The
              element appinfo:ReferenceTarget is required to express the type of referenced content.
              XML Schema does not provide this level of type safety. &lt;/p>
              &lt;/body> &lt;/html> erenced content. XML Schema does not
              provide this level of type safety. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-30_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-17_" name="NDR [Rule 6-17]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-17_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-17_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-17] (REF, SUB, EXT)&lt;/b> The
              schema SHALL NOT contain the element xsd:all. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The element xsd:all provides a set of
              particles (e.g., elements) that may be included in an instance, in no particular
              order. This can greatly complicate processing and may be difficult to comprehend and
              satisfy. &lt;/p> &lt;/body> &lt;/html> difficult to
              comprehend and satisfy. &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-17_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-41_" name="NDR [Rule 6-41]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-41_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-41_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-41] (REF, SUB, EXT)&lt;/b>
              Within the schema, the element xsd:import MUST carry the attribute schemaLocation.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> An
              import that does not specify a schema location gives no clue to processing
              applications as to where to find an implementation of the namespace. Even though such
              a provided schema location may be overridden, it is important that an initial default
              be provided for processing. &lt;/p> &lt;/body>
              &lt;/html> initial default be provided for processing. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-41_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-01_" name="NDR [Rule 6-01]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-01_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-01_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-1] (REF, SUB, EXT) &lt;/b>Within the schema, an
              element xsd:complexType SHALL NOT own the attribute mixed with the value true.
              &lt;/body> &lt;/html> rue. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-01_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-04_" name="MPD [Rule 3-04]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-04_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-04_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-4] &lt;/b>Each schema in a schema subset derived
              from a schema reference set bears the same (target) namespace as the schema in the
              reference set on which it is based. &lt;/body> &lt;/html> is
              based. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-04_-specification">
            <language>OCL2.0</language>
            <body>self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema'
              implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement
              ->exists(element| element.clientDependency
              ->select(d|d.stereotypedBy('References')).supplier.getNearestPackage()
              ->select(r|r.stereotypedBy('Namespace')).getStereotypeApplication('Namespace').targetNamespace=
              element.owner.getStereotypeApplication('Namespace').targetNamespace ) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-05_" name="NDR [Rule 7-05]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-05_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-05_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-5] (REF, EXT)&lt;/b> Within the schema, any
              element xsd:simpleType MUST be a documented component. &lt;/body>
              &lt;/html> ent. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-05_-specification">
            <language>OCL2.0</language>
            <body>( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')
              or (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')
              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement
              ->select(c|c.oclIsKindOf(DataType)).oclAsType(DataType)
              ->forAll(simpleType |
              simpleType.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation')))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-42_" name="NDR [Rule 6-42]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-42_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-42_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-42] (REF, SUB, EXT)&lt;/b>
              Within the schema, the value of the required attribute schemaLocation carried by the
              element xsd:import MUST match either the production &lt;absolute-URI> or
              the definition of &quot;relative-path reference,&quot; as defined by
              &lt;b>[RFC3986]&lt;/b>. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The default value may be specified either
              as absolute or relative URIs. Since URNs are not resolvable, they are inappropriate
              for use in schemaLocation. The requirement for conformance to &quot;relative-path
              reference&quot; is required to avoid the more obscure syntax of &quot;network-path reference&quot;
              and the system-specific &quot;absolute-path reference.&quot; &lt;/p>
              &lt;/body> &lt;/html> ot; and the system-specific &quot;absolute-path
              reference.&quot; &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-42_-specification">
            <language>English</language>
            <body>This constraint is superceded by MPD [Rule 6-4]. Implementation of MPD [Rule 6-4]
              resolves this constraint. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-04_" name="NDR [Rule 7-04]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-04_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-04_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-4] (REF, EXT) &lt;/b>Within the
              schema, any element xsd:complexType MUST be a documented component. &lt;/p>
              &lt;p> Note that MPD [Rule 3-3] relaxes this requirement for subset
              schemas. &lt;/p> &lt;/body> &lt;/html> nt for subset
              schemas. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-04_-specification">
            <language>OCL2.0</language>
            <body>( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')
              or (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')
              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement
              ->select(c|c.oclIsKindOf(Class) and
              not(c.stereotypedBy('PropertyHolder'))).oclAsType(Class) ->forAll(complexType |
              complexType.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-4_" name="NDR [Rule 9-4]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-4_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-4_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-4] (REF, SUB, EXT) &lt;/b>The
              hyphen character ('-') MAY appear in component names only when used as a separator
              between parts of a single word, phrase, or value, which would otherwise be
              incomprehensible without the use of a separator. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Names of standards and specifications, in
              particular, tend to consist of series of discrete numbers. Such names require some
              explicit separator to keep the values from running together. The separator used within
              NIEM is the hyphen. &lt;/p> &lt;/body> &lt;/html>
              her. The separator used within NIEM is the hyphen. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-4_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-59_" name="NDR [Rule 6-59]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-59_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-59_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-59] (REF, SUB, EXT)
              &lt;/b>Within the schema, the attribute ref owned by any element
              xsd:attributeGroup MUST have a value of a qualified name (possibly using the default
              namespace) that SHALL resolve to the namespace for the NIEM structures namespace and
              the local name SimpleObjectAttributeGroup. &lt;/p> &lt;p>
              &lt;b>[Rationale] &lt;/b>The only attribute group used within
              NIEM-conformant schemas is structures:SimpleObjectAttributeGroup. Therefore, within a
              NIEM-conformant schema, only this attribute group can be referenced.
              &lt;/p> &lt;/body> &lt;/html> mant schema, only this
              attribute group can be referenced. &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-59_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-1_" name="NDR [Rule 5-1]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-1_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-1_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 5-1] (REF, SUB, EXT, CON)&lt;/b>
              The schema MUST conform to XML as specified by&lt;b>
              [XML]&lt;/b>. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> XML is a well-known, commonly used W3C
              Recommendation. It is supported by a large number of commercial and open-source
              software tools. It is a simple, well-defined, semi-structured data format that is
              flexible enough to allow for easy extension. XML works with many other powerful
              associated technologies such as XML Schema, XSLT, and XPath. Artifacts of NIEM conform
              to the most recent recommendation for XML. &lt;/p> &lt;/body>
              &lt;/html> f NIEM conform to the most recent recommendation for XML.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-1_-specification">
            <language>English</language>
            <body>This constraint is realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-08_" name="MPD [Rule 3-08]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-08_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-08_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-8] &lt;/b>A constraint schema bears a target
              namespace that has been previously assigned by a reference schema, extension schema,
              or exchange schema, or is a schema that is intended to support a constraint schema
              that has such a target namespace. &lt;/body> &lt;/html> get
              namespace. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-08_-specification">
            <language>English</language>
            <body>Constraint schemas are not modeled with the NIEM Profile. This constraint is not
              applied.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-39_" name="NDR [Rule 6-39]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-39_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-39_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-39] (REF, SUB, EXT)&lt;/b> Within the schema, the
              element xsd:import MUST carry the attribute namespace. &lt;/body>
              &lt;/html> ace. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-39_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-02_" name="NDR [Rule 6-02]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-02_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-02_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-2] (REF, SUB, EXT)&lt;/b> Within
              the schema, an element declaration that is of complex content SHALL NOT own the
              attribute mixed with the value true. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Mixed content allows the mixing of data
              tags with text. Languages such as XHTML use this syntax for markup of text.
              NIEM-conformant schemas define XML that is for data exchange, not text markup. Mixed
              content creates complexity in processing, defining, and constraining content.
              &lt;/p> &lt;p> Well-defined markup languages exist outside NIEM
              and may be used with NIEM data. External schemas may include mixed content and may be
              used with NIEM. However, mixed content must not be defined by NIEM-conformant schemas
              in keeping with [Principle 9]. &lt;/p> &lt;/body>
              &lt;/html> content must not be defined by NIEM-conformant schemas in
              keeping with [Principle 9]. &lt;/p> &lt;/body>
              &lt;/html> /body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-02_-specification">
            <language>English</language>
            <body>This constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-54_" name="NDR [Rule 7-54]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-54_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-54_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-54] (REF, EXT) &lt;/b>The schema
              MUST import the NIEM structures namespace. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> For uniformity, all NIEM-conformant
              schemas must import the structures namespace. &lt;/p> &lt;/body>
              &lt;/html> the structures namespace. &lt;/p>
              &lt;/body> &lt;/html> y> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-54_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-9_" name="NDR [Rule 9-9]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-9_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-9_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-9] (REF, SUB, EXT)&lt;/b> A noun used as a term in
              the name of an XML Schema component MUST be in singular form unless the concept itself
              is plural. &lt;/body> &lt;/html> plural. &lt;/body>
              &lt;/html> tml> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-9_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-51_" name="NDR [Rule 6-51]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-51_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-51_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-51] (REF, EXT)&lt;/b> Within the
              schema, an element in the XML Schema namespace MUST NOT occur as a descendant of any
              element xsd:appinfo. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> NIEM-conformant schemas are designed to
              be very easily processed. Although uses of XML Schema elements as content of
              xsd:appinfo elements could be contrived, it is not current practice and could
              seriously complicate the authoring of schema validators and processors, such as XSLT,
              which may evaluate XML elements by their namespaces and names. Forbidding the use of
              XML Schema elements outside valid uses of schema will simplify such processing.
              &lt;/p> &lt;/body> &lt;/html> ents outside valid uses
              of schema will simplify such processing. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-51_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-13_" name="NDR [Rule 9-13]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-13_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-13_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-13] (REF, SUB, EXT) &lt;/b>The
              object-class term of a NIEM component SHALL consist of a term identifying a category
              of concrete concepts or entities. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The object-class term indicates the
              object category that this data component describes or represents. This term provides
              valuable context and narrows the scope of the component to an actual class of things
              or concepts. &lt;/p> &lt;/body> &lt;/html> t to an
              actual class of things or concepts. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-13_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-20_" name="NDR [Rule 7-20]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-20_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-20_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-20] (REF, EXT) &lt;/b>Within the schema, an
              element appinfo:Base that does not own an attribute appinfo:namespace SHALL refer to
              the target namespace of the schema in which it is used. &lt;/body>
              &lt;/html> is used. &lt;/body> &lt;/html> ml>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-20_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-04_" name="NDR [Rule 6-04]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-04_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-04_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-4] (REF, SUB, EXT) &lt;/b>The
              schema SHALL NOT contain the element xsd:notation. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> XML Schema notations
              allow the attachment of system and public identifiers on fields of data. The notation
              mechanism does not play a part in validation of instances and is not supported by
              NIEM. &lt;/p> &lt;/body> &lt;/html> tances and is not
              supported by NIEM. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-04_-specification">
            <language>English</language>
            <body>Constrained realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-18_" name="NDR [Rule 9-18]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-18_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-18_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-18] (REF, EXT)&lt;/b> If any
              word in the representation term is redundant with any word in the property term, one
              occurrence SHOULD be deleted. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This rule, carried over from 11179, is
              designed to prevent repeating terms unnecessarily within component names. For example,
              this rule allows designers to avoid naming an element &quot;PersonFirstNameName.&quot;
              &lt;/p> &lt;/body> &lt;/html> an element
              &quot;PersonFirstNameName.&quot; &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-18_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-14_" name="NDR [Rule 9-14]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-14_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-14] (REF, SUB, EXT)&lt;/b> A
              property term SHALL describe or represent a characteristic or subpart of an entity or
              concept. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The property term describes the central
              meaning of the data component. &lt;/p> &lt;/body>
              &lt;/html> of the data component. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-14_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-21_" name="NDR [Rule 6-21]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-21_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-21_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-21] (EXT)&lt;/b> Within the schema, any immediate
              child of a model group xsd:choice element MUST be one of xsd:annotation or
              xsd:element. &lt;/body> &lt;/html> ent. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-21_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-11_" name="NDR [Rule 9-11]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-11_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-11_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-11] (REF, SUB, EXT)&lt;/b>
              Articles, conjunctions, and prepositions SHALL NOT be used in NIEM component names
              except where they are required for clarity or by standard convention.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b>
              Articles (e.g., a, an, the), conjunctions (e.g., and, or, but), and prepositions
              (e.g., at, by, for, from, in, of, to) are all disallowed in NIEM component names,
              unless they are required. For example, PowerOfAttorneyCode requires the preposition.
              These rules constrain slight variations in word forms and types to improve consistency
              and reduce potentially ambiguous or confusing component names. &lt;/p>
              &lt;/body> &lt;/html> y and reduce potentially ambiguous or
              confusing component names. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-11_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-18_" name="NDR [Rule 7-18]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-18_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-18_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-18] (REF, EXT) &lt;/b>Within the
              schema, the element appinfo:Base SHALL indicate, by namespace and name, one of the
              following: &lt;/p> &lt;p> 1. A NIEM-conformant schema component.
              &lt;/p> &lt;p> 2. structures:Object. &lt;/p>
              &lt;p> 3. structures:Association. &lt;/p> &lt;/body>
              &lt;/html> . &lt;/p> &lt;p> 3.
              structures:Association. &lt;/p> &lt;/body> &lt;/html>
              p> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-18_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-12_" name="NDR [Rule 7-12]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-12_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-12_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-12] (REF, EXT)&lt;/b> An object
              class SHALL NOT be redefined within the definitions of the components that represent
              properties or subparts of that entity or class. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Data definitions should be concise,
              precise, and unambiguous without embedding additional definitions of data elements
              that have already been defined once elsewhere (such as object classes).
              &lt;b>[ISO 11179 Part 4] &lt;/b>says that definitions should not
              be nested inside other definitions. Furthermore, a data dictionary is not a language
              dictionary. It is acceptable to reuse terms (object class, property term, and
              qualifier terms) from a component name within its corresponding definition to enhance
              clarity, as long as the requirements and recommendations of &lt;b>[ISO
              11179 Part 4]&lt;/b> are not violated. This further enhances brevity and
              precision. &lt;/p> &lt;/body> &lt;/html> [ISO 11179
              Part 4]&lt;/b> are not violated. This further enhances brevity and
              precision. &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-12_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformation.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-20_" name="NDR [Rule 6-20]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-20_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-20_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-20] (EXT)&lt;/b> Within the schema, any immediate
              child of a model group xsd:sequence element MUST be one of xsd:annotation,
              xsd:element, xsd:choice, or xsd:any. &lt;/body> &lt;/html>
              xsd:any. &lt;/body> &lt;/html> ml> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-20_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-62_" name="NDR [Rule 7-62]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-62_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-62_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-62] (REF, EXT)&lt;/b> Within the
              schema, an element xsd:import that imports a namespace defined by an external schema
              MUST be a documented component. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> A NIEM-conformant schema has well-known
              documentation points. Therefore, a schema that imports a NIEM-conformant namespace
              need not provide additional documentation. However, when an external schema is
              imported, appropriate documentation must be provided at the point of import because
              documentation associated with external schemas is undefined and variable. In this
              particular case, documentation of external schemas is required at their point of use
              in NIEM. &lt;/p> &lt;/body> &lt;/html> n of external
              schemas is required at their point of use in NIEM. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-62_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-MPD transformations, based on required documentation
              for modeled external schema.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-11_" name="NDR [Rule 7-11]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-11_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-11_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-11] (REF, EXT)&lt;/b> An object class SHALL have
              one and only one associated semantic meaning (i.e., a single word sense) as described
              in the definition of the component that represents that object class.
              &lt;/body> &lt;/html> ct class. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-11_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-06_" name="NDR [Rule 6-06]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-06_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-06_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-6] (REF, SUB, EXT)&lt;/b> The
              schema SHALL NOT contain the element xsd:redefine. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> The xsd:redefine
              element allows an XML Schema document to restrict and extend components from a
              namespace, in that very namespace. Such redefinition introduces duplication of
              definitions, allowing multiple definitions to exist for components from a single
              namespace. This violates [Principle 8] that a single reference schema defines a
              NIEM-conformant namespace. &lt;/p> &lt;/body>
              &lt;/html> erence schema defines a NIEM-conformant namespace.
              &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-06_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-16_" name="NDR [Rule 7-16]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-16_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-16_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-16] (REF, EXT)&lt;/b> A
              component that is deprecated SHALL be indicated as such by the component having
              application information appinfo:Deprecated, with an attribute value with a value of
              true. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Deprecation can allow version management
              to be more consistent; versions of schema may be incrementally improved without
              introducing validation problems and incompatibility. As XML Schema lacks a deprecation
              mechanism, NIEM defines such a mechanism. &lt;/p> &lt;/body>
              &lt;/html> recation mechanism, NIEM defines such a mechanism.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-16_-specification">
            <language>English</language>
            <body>Deprecated indicator not currently in NIEM Profiles, no constraint specified.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-56_" name="NDR [Rule 6-56]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-56_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-56_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-56] (REF, SUB, EXT)&lt;/b>
              Within the schema, given an element xsd:complexContent with a child xsd:extension
              owning an attribute base, the attribute base MUST have a value that resolves to the
              name of one of the following: &lt;/p> &lt;p> 1. The type
              structures:ComplexObjectType. &lt;/p> &lt;p> 2. The type
              structures:MetadataType. &lt;/p> &lt;p> 3. The type
              structures:AugmentationType. &lt;/p> &lt;p> 4. A complex type
              that is a NIEM-conformant component. &lt;/p> &lt;p>
              &lt;b>[Rationale]&lt;/b> This rule ensures that a CCC has
              well-defined ancestry. In turn, this ensures that every CCC has well-defined
              semantics. &lt;/p> &lt;/body> &lt;/html> CCC has
              well-defined ancestry. In turn, this ensures that every CCC has well-defined
              semantics. &lt;/p> &lt;/body> &lt;/html> p>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-56_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-47_" name="NDR [Rule 6-47]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-47_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-47_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-47] (REF, EXT)&lt;/b> Within the
              schema, the content of the xsd:documentation element that constitutes the data
              definition of a component MUST be character information items as specified by
              &lt;b>[XMLInfoSet]&lt;/b>. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> According to the XML Schema
              specification, the content of xsd:documentation elements is intended for human
              consumption, whereas other structured XML content is intended for machine consumption.
              Therefore, the xsd:documentation element MUST NOT contain structured XML data. As
              such, any XML content appearing within a documentation element is in the context of
              human-targeted examples and should be escaped using &lt; and >. This rule
              also prohibits comments within documentation elements. &lt;/p>
              &lt;p> See &lt;b>[SchemaForXMLSchema]&lt;/b>, the
              schema for XML Schema, as an example of documentation elements containing properly
              escaped XML elements. &lt;/p> &lt;/body> &lt;/html>
              XML Schema, as an example of documentation elements containing properly escaped XML
              elements. &lt;/p> &lt;/body> &lt;/html> >
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-47_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-3_" name="NDR [Rule 5-3]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-3_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-3_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 5-3] (REF, SUB, EXT, CON)
              &lt;/b>The schema MUST conform to the W3C XML Schema Recommendations: XML
              Schema Part 1: Structures and XML Schema Part 2: Datatypes, as specified by
              &lt;b>[XMLSchemaStructures]&lt;/b> and
              &lt;b>[XMLSchemaDatatypes]&lt;/b>. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> XML Schema has become
              the generally accepted schema language and is experiencing the most widespread
              adoption. Although other schema languages exist that offer their own advantages and
              disadvantages, the current approach is to base NIEM on XML Schema. &lt;/p>
              &lt;/body> &lt;/html> ages, the current approach is to base NIEM
              on XML Schema. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-3_-specification">
            <language>English</language>
            <body>This constraint is realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-31_" name="NDR [Rule 6-31]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-31_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-31_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-31] (REF, SUB) &lt;/b>Within the schema, if an
              element declaration carries the attribute final, it MUST set the value for the
              attribute to the empty string. &lt;/body> &lt;/html> y string.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-31_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-53_" name="NDR [Rule 7-53]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-53_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-53_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-53] (REF, SUB, EXT)&lt;/b> Any
              attribute declaration referenced by a component within the schema MUST be from one of
              the following: &lt;/p> &lt;p> 1. The schema being defined.
              &lt;/p> &lt;p> 2. A namespace imported as NIEM-conformant.
              &lt;/p> &lt;p> 3. The structures namespace. &lt;/p>
              &lt;p> 4. The XML namespace. &lt;/p> &lt;p> 5. An
              external namespace, in accordance with the rules for external schemas as specified by
              this specification. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> NIEM-conformant schemas are based on
              other NIEM-conformant schemas. All attributes and elements must be from
              NIEM-conformant schemas, the structures namespace, the XML namespace, or an external
              namespace. This applies to elements referenced for substitution groups as well. It
              does not apply to content of the schema (e.g., within annotations) or to the XML
              Schema declarations themselves. It applies only to attributes and elements referenced
              by the XML Schema components. &lt;/p> &lt;/body>
              &lt;/html> otations) or to the XML Schema declarations themselves. It
              applies only to attributes and elements referenced by the XML Schema components.
              &lt;/p> &lt;/body> &lt;/html> >
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-53_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-55_" name="NDR [Rule 7-55]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-55_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-55_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-55] (REF, SUB, EXT, INS)&lt;/b>
              The schema or instance MUST use content within the NIEM structures namespace as
              specified in the NDR document and ONLY as specified by the NDR document.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> This
              rule further enforces uniformity and consistency by mandating use of the NIEM
              structures namespace as is, without modification. Users are not allowed to insert
              types, attributes, etc. that are not specified by this document (the NDR).
              &lt;/p> &lt;/body> &lt;/html> that are not specified
              by this document (the NDR). &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-55_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-01_" name="NDR [Rule 7-01]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-01_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-01_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-1] (REF, EXT)&lt;/b> Within the
              schema, the document element xsd:schema MUST have application information
              appinfo:ConformantIndicator, with text content &quot;true&quot;. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> The
              appinfo:ConformantIndicator element is how NIEM-conformant schemas indicate that they
              are, in fact, NIEM-conformant. Without such an indicator, conformance would have to be
              &quot;guessed&quot; by readers and processors. &lt;/p> &lt;/body>
              &lt;/html> &quot;guessed&quot; by readers and processors. &lt;/p>
              &lt;/body> &lt;/html> y> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-01_-specification">
            <language>OCL2.0</language>
            <body>self.base_ElementImport.profiledBy('NIEM_PSM_Profile') implies ( (
              (self.natureURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')
              or
              (self.natureURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')
              ) implies self.importedElement.getStereotypeApplication('Namespace').isConformant ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-20_" name="NDR [Rule 9-20]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-20_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-20_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-20] (REF, SUB, EXT) &lt;/b>Within the schema, the
              name of an element declaration that is of complex content, and that corresponds to a
              concept listed in NDR Table 9-2: Representation Terms, MUST use a representation term
              from that table. &lt;/body> &lt;/html> om that table.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-20_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-30_" name="NDR [Rule 9-30]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-30_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-30_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-30] (REF, SUB, EXT)&lt;/b>
              Within the schema, the name of any attribute group definition schema component SHALL
              use the representation term AttributeGroup. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This clearly identifies attribute groups
              and partitions their names from the names of other types of schema components.
              &lt;/p> &lt;/body> &lt;/html> of other types of
              schema components. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-30_-specification">
            <language>English</language>
            <body>The only Attribute Group allowed in NIEM is the
              structures:SimpleObjectAttributeGroup. The constraint is realized by PSM-XSD
              transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-17_" name="NDR [Rule 9-17]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-17_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-17_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-17] (REF, SUB, EXT) &lt;/b>The
              order of qualifiers SHALL NOT be used to differentiate names. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> Very large vocabularies
              may have many similar and closely related properties and concepts. The use of object,
              property, and representation terms alone is often not sufficient to construct
              meaningful names that can uniquely distinguish such components. Qualifier terms
              provide additional context to resolve these subtleties. However, swapping the order of
              qualifiers rarely (if ever) changes meaning; qualifier ordering is no substitute for
              meaningful terms. &lt;/p> &lt;/body> &lt;/html>
              aning; qualifier ordering is no substitute for meaningful terms. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-17_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-31_" name="NDR [Rule 7-31]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-31_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-31_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-31] (REF, EXT) &lt;/b>Within the
              schema, a reference element MUST have at most one instance of the element
              appinfo:ReferenceTarget. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Content elements in XML Schema may have
              at most one type. This rule ensures that reference elements follow the same pattern.
              &lt;/p> &lt;/body> &lt;/html> ents follow the same
              pattern. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-31_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-16_" name="NDR [Rule 9-16]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-16_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-16_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-16] (REF, SUB, EXT)&lt;/b> The number of qualifier
              terms SHOULD be limited to the absolute minimum required to make the component name
              unique and understandable. &lt;/body> &lt;/html> tandable.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-16_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-51_" name="NDR [Rule 7-51]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-51_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-51_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-51] (REF, SUB, EXT) &lt;/b>Any
              type definition referenced by a component within the schema MUST be from one of the
              following: &lt;/p> &lt;p> 1. The schema being defined.
              &lt;/p> &lt;p> 2. A namespace imported as NIEM-conformant.
              &lt;/p> &lt;p> 3. The XML Schema namespace. &lt;/p>
              &lt;p> 4. The structures namespace. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> NIEM-conformant schemas are based on
              other NIEM-conformant schemas and the supporting namespaces. This simplifies
              processing and understanding of data. &lt;/p> &lt;/body>
              &lt;/html> emas and the supporting namespaces. This simplifies processing
              and understanding of data. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-51_-specification">
            <language>English</language>
            <body>Constraint resolved by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-19_" name="NDR [Rule 6-19]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-19_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-19_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-19] (REF, SUB) &lt;/b>Within the schema, any
              immediate child of a model group xsd:sequence element MUST be one of xsd:annotation or
              xsd:element &lt;/body> &lt;/html> d:element
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-19_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-12_" name="NDR [Rule 9-12]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-12_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-12_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-12] (REF, SUB, EXT)&lt;/b>
              Except as specified elsewhere in this document, any element or attribute defined
              within the schema SHALL have a name that takes the form: &lt;/p>
              &lt;p> � Object-class qualifier terms (0 or more). &lt;/p>
              &lt;p> � An object class term (1). &lt;/p> &lt;p> �
              Property qualifier terms (0 or more). &lt;/p> &lt;p> � A
              property term (1). &lt;/p> &lt;p> � Representation qualifier
              terms (0 or more). &lt;/p> &lt;p> � A representation term (1).
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b>
              Consistent naming rules are helpful for users who wish to understand components with
              which they are unfamiliar, as well as for users to find components with known
              semantics. This rule establishes the basic structure for an element or attribute name,
              in line with the rules for names under &lt;b>[ISO 11179 Part
              5]&lt;/b>. Note that many elements with complex type should not have a
              representation term. &lt;/p> &lt;/body> &lt;/html> e
              with the rules for names under &lt;b>[ISO 11179 Part 5]&lt;/b>.
              Note that many elements with complex type should not have a representation term.
              &lt;/p> &lt;/body> &lt;/html> >
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-12_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-13_" name="NDR [Rule 6-13]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-13_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-13_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-13] (REF, SUB, EXT)
              &lt;/b>Within the schema, any occurrence of the element xsd:complexType or
              xsd:simpleType MUST appear as an immediate child of the element xsd:schema.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> NIEM
              does not support anonymous types in NIEM-conformant schemas. All XML Schema
              &quot;top-level&quot; types (children of the document element) are required by XML Schema to be
              named. By requiring NIEM type definitions to be top level, they are forced to be named
              and are therefore globally reusable. &lt;/p> &lt;/body>
              &lt;/html> d to be named and are therefore globally reusable.
              &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-13_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-17_" name="NDR [Rule 7-17]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-17_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-17_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-17] (REF, EXT) &lt;/b>Within the
              schema, the element appinfo:Base MAY be used in one of the following ways:
              &lt;/p> &lt;p> 1. By a type definition, to indicate the base
              type, or structures:Object or structures:Association. &lt;/p>
              &lt;p> 2. By an element declaration, to indicate the base element.
              &lt;/p> &lt;p> The element appinfo:Base SHALL NOT be used for
              any other purpose. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The appinfo:Base element is required to
              clarify semantics of types as object or association types, when such derivation is not
              otherwise derivable from the component definitions. &lt;/p>
              &lt;/body> &lt;/html> , when such derivation is not otherwise
              derivable from the component definitions. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-17_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-14_" name="NDR [Rule 6-14]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-14_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-14] (REF, SUB, EXT)&lt;/b>
              Within the schema, any element declaration carrying the attribute name MUST appear as
              an immediate child of the document element xsd:schema. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> All schema components
              defined by NIEM-conformant schemas must be named, accessible from outside the defining
              schema, and reusable across schemas. Local element definitions provide named elements
              that are not reusable outside the context in which they are defined. Requiring named
              NIEM elements to be top level ensures that they are globally reusable.
              &lt;/p> &lt;/body> &lt;/html> to be top level ensures
              that they are globally reusable. &lt;/p> &lt;/body>
              &lt;/html> /body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-14_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-35_" name="NDR [Rule 7-35]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-35_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-35_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-35] (REF, EXT)&lt;/b> Within the
              schema, an element appinfo:ReferenceTarget SHALL carry an attribute appinfo:name. The
              value of this attribute SHALL indicate the local name of a type definition schema
              component within the namespace specified by the element. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> Together, this set of
              rules establishes the element appinfo:ReferenceTarget as a reference to a
              NIEM-conformant type definition schema component that a reference element instance may
              reference. &lt;/p> &lt;/body> &lt;/html> t that a
              reference element instance may reference. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-35_-specification">
            <language>English</language>
            <body>Constraint resolved by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-54_" name="NDR [Rule 6-54]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-54_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-54_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-54] (REF, SUB, EXT)&lt;/b>
              Within the schema, given an element xsd:simpleContent with a child xsd:extension
              owning an attribute base, if the attribute base has a value that resolves to the name
              of a simple type, then the element xsd:extension MUST have an immediate child element
              xsd:attributeGroup. &lt;/p> &lt;p>
              &lt;b>[Rationale]&lt;/b> This rule ensures that a CSC that is
              created as an immediate extension of a simple type adds the attributes required for
              specific NIEM linking mechanisms. The attribute group is required to be
              structures:SimpleObjectAttributeGroup by NDR [Rule 6-59]. &lt;/p>
              &lt;/body> &lt;/html> structures:SimpleObjectAttributeGroup by
              NDR [Rule 6-59]. &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-54_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-27_" name="NDR [Rule 6-27]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-27_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-27_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-27] (REF, EXT)&lt;/b> Within the schema, if a
              complex type definition carries the attribute block, it MUST set the value for the
              attribute to the empty string. &lt;/body> &lt;/html> y string.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-27_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-15_" name="NDR [Rule 9-15]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-15_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-15_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-15] (REF, SUB, EXT) &lt;/b>Multiple qualifier
              terms MAY be used within a component name as necessary to ensure clarity and
              uniqueness within its namespace and usage context. &lt;/body>
              &lt;/html> context. &lt;/body> &lt;/html> ml>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-15_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-52_" name="NDR [Rule 7-52]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-52_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-52_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-52] (REF, SUB, EXT)&lt;/b> Any
              element declaration referenced by a component within the schema MUST be from one of
              the following: &lt;/p> &lt;p> 1. The schema being defined.
              &lt;/p> &lt;p> 2. A namespace imported as NIEM-conformant.
              &lt;/p> &lt;p> 3. The structures namespace. &lt;/p>
              &lt;p> 4. An external namespace, in accordance with the rules for external
              schemas as specified by this specification. &lt;/p> &lt;/body>
              &lt;/html> the rules for external schemas as specified by this
              specification. &lt;/p> &lt;/body> &lt;/html>
              /body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-52_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-8_" name="NDR [Rule 9-8]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-8_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-8_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-8] (REF, SUB, EXT) &lt;/b>The
              schema MUST consistently use approved acronyms, abbreviations, and word truncations
              within defined names. The approved shortened forms are defined in Table 9-1 of the
              NDR: Abbreviations Used in NIEM Core Names . &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Consistent, controlled, and documented
              abridged terms that are used frequently and/or tend to be lengthy can support
              readability, clarity, and reduction of name length. &lt;/p>
              &lt;/body> &lt;/html> eadability, clarity, and reduction of name
              length. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-8_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-2_" name="NDR [Rule 5-2]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-2_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-2_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 5-2] (REF, SUB, EXT, CON)
              &lt;/b>The schema MUST conform to the specification for namespaces in XML,
              as defined by &lt;b>[XMLNamespaces]&lt;/b> and
              &lt;b>[XMLNamespacesErrata]&lt;/b>. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> NIEM is designed to
              facilitate cross-domain data exchanges and interoperability. The ultimate scope of
              NIEM is anticipated to be quite large. The primary purpose of namespaces is to avoid
              naming conflicts, which for NIEM could become quite common, since NIEM stakeholders
              and IEPD developers define and name many of their own data components independently.
              Therefore, in NIEM, XML namespaces are employed both to avoid name clashes and to
              provide a level of independence to participating domains. &lt;/p>
              &lt;/body> &lt;/html> lashes and to provide a level of
              independence to participating domains. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-2_-specification">
            <language>English</language>
            <body>This constraint is realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-32_" name="NDR [Rule 6-32]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-32_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-32_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-32] (REF, SUB, EXT)&lt;/b>
              Within the schema, if the document element xsd:schema carries the attribute
              finalDefault, it MUST set the value for that attribute to the empty string.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b>
              Restriction of derivation options reduces capacity for reuse and so is forbidden
              within reference and subset schemas. As well, the use of finalDefault complicates
              understanding of schemas, so it is only allowed in constraint schemas.
              &lt;/p> &lt;/body> &lt;/html> o it is only allowed in
              constraint schemas. &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-32_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05_" name="MPD [Rule 3-05]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 3-5]&lt;/b> A schema contained in
              a reference schema set may be omitted from a derived subset, if and only if ALL of the
              following conditions are true within that schema: &lt;/p> &lt;p>
              � No elements/attributes declared or types defined in the schema are required for
              business exchange purposes. AND &lt;/p> &lt;p> � No
              elements/attributes declared or types defined in the schema are required to support
              other elements or types within the subset for exchange purposes; in other words, no
              references to elements or types in the schema exist in any other schema of the subset.
              &lt;/p> &lt;/body> &lt;/html> s or types in the
              schema exist in any other schema of the subset. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-05_-specification">
            <language>English</language>
            <body>UML well-formedness rules and semantics realize the constraint for referential
              integrity. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-38_" name="NDR [Rule 7-38]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-38_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-38_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-38] (REF, SUB, EXT)
              &lt;/b>Within the schema, an element MUST NOT be introduced more than once
              into the direct content of a type definition. This applies to content acquired through
              extension of base types. This does not apply to a base element or derived element to
              one previously existing in the type definition. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This rule ensures that sequences of
              elements are simple sequences. A type should not define, for example, a sequence of
              elements A, B, then A again. Definitions should define, instead, what elements may be
              included, and their cardinality. Specific orders should be expressed in instances,
              when necessary, by the use of the attribute structures:sequenceID. &lt;/p>
              &lt;/body> &lt;/html> ces, when necessary, by the use of the
              attribute structures:sequenceID. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-38_-specification">
            <language>English</language>
            <body>Constraint is resolved by PSM-XSD transformations. Constraint also addressed by
              UML Property order and naming constraints.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-03_" name="NDR [Rule 6-03]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-03_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-03_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-3] (REF, SUB, EXT) &lt;/b>The schema SHALL NOT
              contain a reference to the type definition xsd:NOTATION or to a type derived from that
              type. &lt;/body> &lt;/html> ype. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-03_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-06_" name="NDR [Rule 7-06]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-06_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-06_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-6] (REF, EXT) &lt;/b>Within the schema, any
              element xsd:element that is an immediate child of an element xsd:schema MUST be a
              documented component. &lt;/body> &lt;/html> omponent.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-06_-specification">
            <language>OCL2.0</language>
            <body>( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')
              or (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')
              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement
              ->select(c|c.oclIsKindOf(Classifier)).oclAsType(Classifier).attribute
              ->select(p|p.stereotypeApplication('XSDProperty').kind=XSDPropertyKindCode::element)
              ->forAll(attribute |
              attribute.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-39_" name="NDR [Rule 7-39]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-39_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-39_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-39] (REF, EXT)&lt;/b> Within the
              schema, an object type SHALL be a complex type definition that either constitutes a
              NIEM-conformant component or for which there exists a NIEM-conformant component of one
              of the following forms: &lt;/p> &lt;p> 1. Has simple content, is
              based on a simple type, and contains the attribute group
              structures:SimpleObjectAttributeGroup, and has application information appinfo:Base of
              structures:Object. &lt;/p> &lt;p> 2. Has complex content, and is
              based on complex type structures:ComplexObjectType, and has application information
              appinfo:Base of structures:Object. &lt;/p> &lt;p> 3. Is a
              complex type that is derived from an object type, which is defined according to this
              rule. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Object types are at the core of NIEM.
              They are built in a uniform way, from a simple design pattern: they take one of the
              two &quot;root&quot; forms outlined above, or they are built from other object types, depending
              on whether they are of simple or complex content. &lt;/p>
              &lt;/body> &lt;/html> quot; forms outlined above, or they are
              built from other object types, depending on whether they are of simple or complex
              content. &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-39_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-23_" name="NDR [Rule 7-23]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-23_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-23_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-23] (REF, EXT)&lt;/b> Within the
              schema, if an element appinfo:Base indicates the structures namespace, then the value
              of the attribute appinfo:name owned by the element appinfo:Base SHALL have a value of
              one of the following: &lt;/p> &lt;p> 1. structures:Object.
              &lt;/p> &lt;p> 2. structures:Association. &lt;/p>
              &lt;p> 3. A schema component defined by the structures schema.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b>
              Together, this set of rules establishes the element appinfo:Base as a reference to
              either a NIEM-conformant schema component or to a special NIEM component, which acts
              as the base for the containing schema component. &lt;/p>
              &lt;/body> &lt;/html> or to a special NIEM component, which acts
              as the base for the containing schema component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-23_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-48_" name="NDR [Rule 6-48]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-48_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-48_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-48] (REF, SUB, EXT)&lt;/b> XML
              comments SHALL not be used for persistent information about constructs within the
              schema. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Since XML comments are not associated
              with any specific XML Schema construct, there is no standard way to interpret
              comments. As such, comments should be reserved for internal use, and XML Schema
              annotations should be preferred for meaningful information about components. NIEM
              specifically defines how information should be encapsulated in NIEM-conformant schemas
              via xsd:annotation elements. &lt;/p> &lt;/body>
              &lt;/html> d in NIEM-conformant schemas via xsd:annotation elements.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-48_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-40_" name="NDR [Rule 6-40]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-40_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-40_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-40] (REF, SUB, EXT)
              &lt;/b>Within the schema, the value of the required attribute namespace
              owned by the element xsd:import MUST match the production &lt;absolute-URI>
              as defined by &lt;b>[RFC3986]&lt;/b>. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> An import that does not
              specify a namespace is enabling reference to non-namespaced components. NIEM requires
              that all components have a defined namespace. It is important that the namespace
              declared by a schema be universally defined and unambiguous. Use of the standard XML
              Base for processing is not specified by XML Schema; thus it is not supported here.
              &lt;/p> &lt;/body> &lt;/html> t specified by XML
              Schema; thus it is not supported here. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-40_-specification">
            <language>English</language>
            <body>Since imports are derived (and not modeled), the namespace for an import is the
              same as the targetNamespace modeled for the referenced schema, and the implementation
              of NDR [Rule 6-36] resolves this constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-49_" name="NDR [Rule 6-49]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-49_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-49_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-49] (REF, EXT)&lt;/b> Within the
              schema, any immediate child of an xsd:appinfo element SHALL be an element information
              item or a comment information item. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Application information elements are
              intended for automatic processing; thus they should contain machine-oriented data,
              XML. &lt;/p> &lt;/body> &lt;/html> contain
              machine-oriented data, XML. &lt;/p> &lt;/body>
              &lt;/html> /body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-49_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-36_" name="NDR [Rule 7-36]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-36_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-36_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-36] (REF, SUB, EXT)&lt;/b>
              Within the schema, a simple type definition that uses xsd:list SHOULD NOT be defined
              if any member of the list requires a property or metadata that is different than other
              members of the list. All members of the list SHOULD have the same metadata, and should
              be related via the same properties. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The members of a list are not
              individually addressable by NIEM metadata techniques. The members are also not
              individually addressable by properties; a property has a value of all the members of
              the list. NIEM provides no method for individually addressing a member of a list. If
              an individual member of a list needs to be marked up in a manner different than other
              members of the list, the use of individual elements may be preferred to the definition
              of a list simple type. &lt;/p> &lt;/body> &lt;/html>
              individual elements may be preferred to the definition of a list simple type.
              &lt;/p> &lt;/body> &lt;/html> /body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-36_-specification">
            <language>English</language>
            <body>Definitional.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-5_" name="NDR [Rule 5-5]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-5_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-5_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 5-5] (REF, SUB, EXT)&lt;/b> A NIEM
              component name SHALL be formed by applying the informative guidelines and examples
              detailed in Annex A of &lt;b>[ISO 11179 Part 5]&lt;/b>, with
              exceptions as specified in the NDR document, most notably those specified in Section
              9, Naming Rules. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The guidelines and examples of
              &lt;b>[ISO 11179 Part 5]&lt;/b> provide a simple, consistent
              syntax for data names that captures context and thereby imparts a reasonable degree of
              semantic precision. &lt;/p> &lt;/body> &lt;/html>
              imparts a reasonable degree of semantic precision. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-5_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-33_" name="NDR [Rule 6-33]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-33_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-33_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-33] (REF, SUB, EXT, CON)&lt;/b> Within the schema,
              any element xsd:element SHALL NOT carry the attribute default. &lt;/body>
              &lt;/html> ult. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-33_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-23_" name="NDR [Rule 6-23]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-23_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-23_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-23] (REF, SUB, EXT) &lt;/b>The
              schema SHALL NOT contain the element xsd:group. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> NIEM does not allow groups of elements to
              be named other than as named complex types. A group in XML Schema creates a named
              entity that may be included in multiple types, and which consists of a sequence of or
              choice between element particles. The NIEM has not developed a semantic model for
              these components, and they are not integrated into NIEM's design. &lt;/p>
              &lt;/body> &lt;/html> s, and they are not integrated into NIEM's
              design. &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-23_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-4_" name="NDR [Rule 5-4]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-4_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-4_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 5-4] (REF, EXT)&lt;/b> Within a
              NIEM-conformant schema, the data definition provided for each documented component
              SHALL follow the requirements and recommendations for data definitions given by
              &lt;b>[ISO 11179 Part 4]&lt;/b>. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> To advance the goal of
              creating semantically rich NIEM-conformant schemas, it is necessary that data
              definitions be descriptive, meaningful, and precise. &lt;b>[ISO 11179 Part
              4]&lt;/b> provides standard structure and rules for defining data
              definitions. NIEM uses this standard for component definitions. &lt;/p>
              &lt;/body> &lt;/html> tions. NIEM uses this standard for
              component definitions. &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_5-4_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-19_" name="NDR [Rule 7-19]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-19_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-19_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-19] (REF, EXT)&lt;/b> Within the
              schema, an attribute appinfo:namespace owned by an element appinfo:Base SHALL have a
              value of either of the following: &lt;/p> &lt;p> 1. A namespace
              which is the target namespace of a NIEM-conformant schema. &lt;/p>
              &lt;p> 2. The structures namespace. &lt;/p>
              &lt;/body> &lt;/html> &lt;p> 2. The structures
              namespace. &lt;/p> &lt;/body> &lt;/html>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-19_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-30_" name="NDR [Rule 6-30]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-30_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-30_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-30] (REF, SUB) &lt;/b>Within the schema, if a
              complex type definition carries the attribute final, it MUST set the value for the
              attribute to the empty string. &lt;/body> &lt;/html> y string.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-30_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-61_" name="NDR [Rule 7-61]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-61_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-61_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-61] (REF, EXT)&lt;/b> Within the
              schema, an element xsd:import that imports a namespace defined by an external schema
              MUST have the application information appinfo:ConformantIndicator, with a value of
              false. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Knowledge of the conformance of an
              imported schema allows processors to understand the semantics of referenced
              components, without additional processing. Namespaces imported into NIEM-conformant
              schemas are assumed to be conformant unless otherwise indicated. &lt;/p>
              &lt;/body> &lt;/html> are assumed to be conformant unless
              otherwise indicated. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-61_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-MPD transformations, based on isConformant tag for
              referenced (external) schema.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-21_" name="NDR [Rule 7-21]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-21_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-21_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-21] (REF, EXT)&lt;/b> Within the schema, an
              element appinfo:Base SHALL own an attribute appinfo:name. &lt;/body>
              &lt;/html> ame. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-21_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-09_" name="NDR [Rule 6-09]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-09_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-09_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-9] (REF, SUB, EXT)&lt;/b> Within
              the schema, an element declaration with the attribute name and without the attribute
              type MUST carry the attribute abstract with the value true. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> Untyped element
              declarations act as wildcards that may carry arbitrary data. By declaring such types
              abstract, NIEM allows the creation of type independent semantics without allowing
              arbitrary content to appear in XML instances. &lt;/p> &lt;/body>
              &lt;/html> bitrary content to appear in XML instances. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-09_-specification">
            <language>English</language>
            <body>Constraint is realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-08_" name="NDR [Rule 7-08]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-08_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-08_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-8] (REF, EXT)&lt;/b> Within the schema, any
              element xsd:enumeration MUST be a documented component. &lt;/body>
              &lt;/html> ent. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-08_-specification">
            <language>OCL2.0</language>
            <body>( self.base_ElementImport.profiledBy('NIEM_PSM_Profile') and ( (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')
              or (
              self.purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#extension-schema')
              ) ) implies self.base_ElementImport.importedElement.oclAsType(Package).packagedElement
              ->select(c|c.oclIsKindOf(Enumeration)).oclAsType(Enumeration).ownedLiteral
              ->forAll(literal |
              literal.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-60_" name="NDR [Rule 7-60]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-60_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-60_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-60] (REF, EXT) &lt;/b>Within the
              schema, if both elements NCName and NCNameReference exist, then the
              appinfo:ReferenceTarget of any NCNameReference element MUST be the type of the element
              NCName. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> By [Rule 7-59], any such pair of
              elements, NCName and NCNameReference, will have identical semantics. This rule ensures
              that an NCNameReference element is documented to refer to the appropriate type (the
              type of the corresponding NCName element) and no other. &lt;/p>
              &lt;/body> &lt;/html> of the corresponding NCName element) and
              no other. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-60_-specification">
            <language>English</language>
            <body>A Reference is modeled as a non-aggregate Property. A given property (from a
              referenced PropertyHolder) may be redefined to be an aggregate (i.e., containment)
              Property. The naming and type constraints are realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-10_" name="NDR [Rule 9-10]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-10_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-10_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-10] (REF, SUB, EXT) &lt;/b>A verb used as a term
              in the name of an XML Schema component MUST be used in the present tense unless the
              concept itself is past tense. &lt;/body> &lt;/html> st tense.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-10_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-58_" name="NDR [Rule 6-58]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-58_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-58_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-58] (REF, SUB, EXT)&lt;/b>
              Within the schema, any occurrence of the element xsd:attributeGroup MUST own an
              attribute ref. &lt;/p> &lt;p>
              &lt;b>[Rationale]&lt;/b> The only attribute group used in
              NIEM-conformant schemas is structures:SimpleObjectAttributeGroup, as established by
              rules [Rule 6-59] and [Rule 7-39]. Therefore, NIEM-conformant schemas do not define
              additional attribute groups. &lt;/p> &lt;/body>
              &lt;/html> not define additional attribute groups. &lt;/p>
              &lt;/body> &lt;/html> y> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-58_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-57_" name="NDR [Rule 7-57]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-57_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-57_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-57] (REF, SUB, EXT)
              &lt;/b>Within the schema, a reference element and only a reference element
              SHALL be defined to be of type structures:ReferenceType. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> Reference elements must
              be of the reference type, and elements of the reference type must be reference
              elements. This rule ensures that users always create reference elements using
              structures:ReferenceType and cannot use structures:ReferenceType for any other
              purpose. &lt;/p> &lt;/body> &lt;/html> se
              structures:ReferenceType for any other purpose. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-57_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-10_" name="NDR [Rule 7-10]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-10_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-10_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-10] (REF, EXT)&lt;/b> Words or synonyms for the
              words within a data element definition SHALL NOT be reused as terms in the
              corresponding component name if those words dilute the semantics and understanding of,
              or impart ambiguity to, the entity or concept that the component represents.
              &lt;/body> &lt;/html> nt represents. &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-10_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-44_" name="NDR [Rule 6-44]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-44_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-44_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-44] (REF, SUB, EXT)
              &lt;/b>Within the schema, when a namespace other than the XML namespace or
              the XML Schema namespace is used, it MUST be imported into the schema using the
              xsd:import element. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This rule ensures that used namespaces
              have recognizable defining sources and that they will cooperate with existing tools.
              &lt;/p> &lt;/body> &lt;/html> will cooperate with
              existing tools. &lt;/p> &lt;/body> &lt;/html>
              /body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-44_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-22_" name="NDR [Rule 6-22]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-22_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-22_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-22] (EXT) &lt;/b>The use of
              xsd:choice SHALL define syntax, structure, grouping, and cardinality of instances, but
              SHALL NOT define semantics. The semantics of a property within an xsd:choice SHALL be
              identical to the semantics of the property within an xsd:sequence. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> XML Schema provides the
              capability for model groups to be recursively defined. This means that a sequence may
              contain a sequence, and a choice may contain a choice. These rules are designed to
              keep content models simple, comprehensive, and reusable: The content of an element
              should boil down to a simple list of elements, defined in as straightforward a manner
              as is possible to meet requirements. &lt;/p> &lt;/body>
              &lt;/html> as straightforward a manner as is possible to meet requirements.
              &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-22_-specification">
            <language>English</language>
            <body>Definitional.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-29_" name="NDR [Rule 6-29]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-29_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-29_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-29] (REF, SUB) &lt;/b>Within the schema, if a
              simple type definition carries the attribute final, it MUST set the value for the
              attribute to the empty string. &lt;/body> &lt;/html> y string.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-29_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-50_" name="NDR [Rule 6-50]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-50_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-50_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-50] (REF, EXT) &lt;/b>Within the
              schema, any element that is an immediate child of an xsd:appinfo element SHALL be in a
              namespace. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Use of default namespace is allowed, but
              content has to have a real namespace, and namespaces must be declared. The XML
              namespaces specification includes the concept of content not in a namespace.
              Non-namespaced data runs counter to the principle of distinctly identifiable data
              definitions. &lt;/p> &lt;/body> &lt;/html> f
              distinctly identifiable data definitions. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-50_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-03_" name="NDR [Rule 7-03]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-03_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-03_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-3] (REF, SUB, EXT, CON)
              &lt;/b>Two XML Schema documents SHALL have the same value for attribute
              targetNamespace carried by the element xsd:schema, and different values for attribute
              version carried by the element xsd:schema if and only if they are different views of
              the same set of components. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> These rules embody the basic philosophy
              behind NIEM's use of namespaced components: A component is uniquely identified by its
              class (e.g. element, attribute, type), its namespace (a URI), and its local name (an
              unqualified string). Any two matching component identifiers refer to the same
              component, even if the versions of the schemas containing each are different.
              &lt;/p> &lt;/body> &lt;/html> ent, even if the
              versions of the schemas containing each are different. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-03_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-2_" name="NDR [Rule 9-2]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-2_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-2_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-2] (REF, SUB, EXT) &lt;/b>The
              name of any XML Schema component defined by the schema SHALL be composed of words from
              the English language, using the prevalent U.S. spelling, as provided by
              &lt;b>[OED]&lt;/b>. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The English language has many spelling
              variations for the same word. For example, American English �program� has a
              corresponding British spelling �programme.� This variation has the potential to cause
              interoperability problems when XML components are exchanged because of the different
              names used by the same elements. Providing users with a dictionary standard for
              spelling will mitigate this potential interoperability issue. &lt;/p>
              &lt;/body> &lt;/html> or spelling will mitigate this potential
              interoperability issue. &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-2_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-22_" name="NDR [Rule 7-22]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-22_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-22_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-22] (REF, EXT)&lt;/b> Within the schema, if an
              element appinfo:Base indicates a NIEM-conformant namespace, then the value of the
              attribute appinfo:name owned by the element appinfo:Base SHALL indicate a schema
              component in the indicated namespace. &lt;/body> &lt;/html> ted
              namespace. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-22_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-34_" name="NDR [Rule 6-34]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-34_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-34_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-34] (REF, SUB, EXT, CON)
              &lt;/b>Within the schema, any element xsd:attribute SHALL NOT carry the
              attribute default. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The use of default values means that the
              act of validating a schema will insert a value into an XML instance where none existed
              prior to schema validation. Schema validation is for rejection of invalid instances,
              not for modifying instance content, as specified in [Principle 4]. &lt;/p>
              &lt;/body> &lt;/html> nce content, as specified in [Principle
              4]. &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-34_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-33_" name="NDR [Rule 7-33]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-33_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-33_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-33] (REF, EXT) &lt;/b>Within the schema, an
              attribute appinfo:namespace carried by an element appinfo:ReferenceTarget SHALL
              indicate the namespace of the referenced schema component. The indicated namespace
              SHALL be defined by a reference or extension schema. &lt;/body>
              &lt;/html> ension schema. &lt;/body> &lt;/html>
              l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-33_-specification">
            <language>English</language>
            <body>Constraint resolved by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-43_" name="NDR [Rule 6-43]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-43_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-43_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-43] (REF, SUB, EXT) &lt;/b>Within the schema, the
              value of the required attribute schemaLocation carried by the element xsd:import MUST
              be resolvable to a XML schema document file that is valid according to
              &lt;b>[XMLSchemaStructures]&lt;/b> and
              &lt;b>[XMLSchemaDatatypes]&lt;/b>. &lt;/body>
              &lt;/html> atatypes]&lt;/b>. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-43_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-07_" name="MPD [Rule 3-07]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-07_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-07_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-7]&lt;/b> An IEPD exchange schema MUST NOT declare
              any XML element that is not intended for use as an IEP root element.
              &lt;/body> &lt;/html> ent. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-MPD__Rule_3-07_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-26_" name="NDR [Rule 6-26]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-26_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-26_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-26] (REF, EXT)&lt;/b> Within the schema, if an
              element declaration carries the attribute block, it MUST set the value for the
              attribute to the empty string. &lt;/body> &lt;/html> y string.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-26_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-46_" name="NDR [Rule 6-46]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-46_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-46_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-46] (REF, EXT) &lt;/b>Within the
              schema, an element SHALL have at most one instance of an element xsd:annotation as an
              immediate child. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> XML Schema allows annotations to be added
              to components in a fairly loose manner: there may be multiple annotations, each of
              which may have multiple documentation or appinfo elements. This flexibility in the
              syntax provides no additional expressivity but does complicate processing, so it is
              forbidden in NIEM. &lt;/p> &lt;/body> &lt;/html>
              complicate processing, so it is forbidden in NIEM. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-46_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-58_" name="NDR [Rule 7-58]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-58_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-58_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-58] (REF, SUB, EXT)&lt;/b>
              Within the schema, a complex type SHALL NOT be defined such that an instance of that
              type owns the attribute structures:ref. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The use of references is limited to
              reference elements. This constrains the semantics and syntax of references within NIEM
              instances. Only structures:ReferenceType may use structures:ref, which is the only
              means for referencing within NIEM-conformant instances. &lt;/p>
              &lt;/body> &lt;/html> for referencing within NIEM-conformant
              instances. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-58_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-56_" name="NDR [Rule 7-56]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-56_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-56_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-56] (REF, SUB, EXT)&lt;/b>
              Within the schema, a complex type definition SHALL include the attribute
              structures:sequenceID if the order of an occurrence of the type, within its parent,
              relative to its siblings, is meaningful and pertinent and if the schema does not
              specify the desired sequential order. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> This rule indicates that, if order is
              meaningful and the schema will not always represent the desired order, then data
              modelers need to include sequenceID to allow the proper order to be represented in
              instances. &lt;/p> &lt;/body> &lt;/html> to allow the
              proper order to be represented in instances. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-56_-specification">
            <language>English</language>
            <body>(Constraint not enforced by this model).</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-32_" name="NDR [Rule 7-32]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-32_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-32_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-32] (REF, EXT) &lt;/b>Within the schema, the
              element appinfo:ReferenceTarget SHALL indicate a type definition schema component, by
              namespace and name. &lt;/body> &lt;/html> and name.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-32_-specification">
            <language>English</language>
            <body>Constraint resolved by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-7_" name="NDR [Rule 9-7]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-7_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-7_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-7] (REF, SUB, EXT)&lt;/b> The
              name of any XML Schema component defined by the schema SHALL use the camel case
              formatting convention. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The foregoing rules establish
              lowerCamelCase for all NIEM components that are XML attributes and UpperCamelCase for
              all NIEM components that are types, elements, or groups. &lt;/p>
              &lt;/body> &lt;/html> that are types, elements, or groups.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_9-7_-specification">
            <language>English</language>
            <body>Non-computable constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-28_" name="NDR [Rule 6-28]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-28_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-28_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-28] (REF, SUB, EXT)&lt;/b>
              Within the schema, if the document element xsd:schema carries the attribute
              blockDefault, it MUST set the value for the attribute to the empty string.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b>
              Restriction of substitution options reduces capacity for reuse; thus, it is forbidden
              within NIEM-conformant schemas In particular, setting the block value at the schema
              level complicates understanding of component definitions. &lt;/p>
              &lt;/body> &lt;/html> tes understanding of component
              definitions. &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-28_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-52_" name="NDR [Rule 6-52]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-52_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-52_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-52] (REF, SUB, EXT)
              &lt;/b>Within the schema, the element xsd:complexType MUST have as an
              immediate child either the element xsd:complexContent or the element
              xsd:simpleContent. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> XML Schema provides shorthand to defining
              complex content of a complex type, which is to define the complex type with immediate
              children that specify elements, or other groups, and attributes. In the desire to
              normalize schema representation of types and to be explicit, NIEM forbids the use of
              that shorthand. &lt;/p> &lt;/body> &lt;/html> d to be
              explicit, NIEM forbids the use of that shorthand. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-52_-specification">
            <language>English</language>
            <body>Constraint realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-02_" name="NDR [Rule 7-02]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-02_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-02_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 7-2] (REF, SUB, EXT, CON)&lt;/b> Two XML Schema
              documents SHALL have the same value for attribute targetNamespace carried by the
              element xsd:schema, if and only if they represent the same set of components.
              &lt;/body> &lt;/html> mponents. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_7-02_-specification">
            <language>English</language>
            <body>Not computable.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-08_" name="NDR [Rule 6-08]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-08_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-08_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-8] (REF, SUB, EXT)&lt;/b> The
              schema SHALL NOT reference the type xsd:anySimpleType. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> XML Schema provides a
              restriction of the �ur-type,� which contains only simple content. This provides a
              wildcard for arbitrary text. It is realized in XML Schema as xsd:anySimpleType.
              NIEM-conformant schemas must not use xsd:anySimpleType because this feature is
              insufficiently constrained to provide a meaningful starting point for content
              definitions. Instead, content should be based on one of the more specifically defined
              simple types defined by XML Schema. &lt;/p> &lt;/body>
              &lt;/html> he more specifically defined simple types defined by XML Schema.
              &lt;/p> &lt;/body> &lt;/html> &lt;/html>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-NDR__Rule_6-08_-specification">
            <language>English</language>
            <body>Constraint is realized by PSM-XSD transformations.</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-externalURI" name="externalURI" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-externalURI-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-externalURI">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> An external URI for the file; indicates a same-as relationship to a
              copy of the file. Implemented as the value of the externalURI attribute of the File
              element in the catalog instance. &lt;/p> &lt;/body>
              &lt;/html> alURI attribute of the File element in the catalog instance.
              &lt;/p> &lt;/body> &lt;/html> he catalog instance.
              &lt;/p> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-externalURI-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-relativePathName" name="relativePathName" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-relativePathName-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-relativePathName">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> The relative path name to the file within the MPD directory
              structure. Implemented as the value of the relativePathName attribute of the File
              element in the catalog instance. &lt;/p> &lt;/body>
              &lt;/html> ute of the File element in the catalog instance.
              &lt;/p> &lt;/body> &lt;/html> catalog instance.
              &lt;/p> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-natureCode" name="natureCode" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-natureCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-natureCode">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> The nature (type) of the file. Implemented as the value of the
              natureURI attribute of the File element in the catalog instance. &lt;/p>
              &lt;/body> &lt;/html> ement in the catalog instance.
              &lt;/p> &lt;/body> &lt;/html> e. &lt;/p>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-natureCode-defaultValue" instance="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xsd"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-purposeCode" name="purposeCode" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-purposeCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-purposeCode">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> The purpose for or function of the file. Implemented as the value of
              the purposeURI attribute of the File element in the catalog instance.
              &lt;/p> &lt;/body> &lt;/html> element in the catalog
              instance. &lt;/p> &lt;/body> &lt;/html> tance.
              &lt;/p> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-purposeCode-defaultValue" instance="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-descriptionText" name="descriptionText" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-descriptionText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-descriptionText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> A description of the file. Implemented as the value of the
              descriptionText attribute of the File element in the catalog instance.
              &lt;/p> &lt;/body> &lt;/html> element in the catalog
              instance. &lt;/p> &lt;/body> &lt;/html> tance.
              &lt;/p> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-descriptionText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-base_Usage" name="base_Usage" visibility="private" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Usage"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode" name="RelationshipCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The possible reasons for the connectedness between the MPDs or between
            an MPD and a resource. This enumeration defines the possible values for the
            relationshipCode attribute of the ModelPackageDescriptionRelationship stereotype. [Note
            these NIEM-UML enumeration literals differ from the NIEM MPD Specification v1.0 in that
            they use underscore (&quot;_&quot;) instead of dash (&quot;-&quot;). This is due to issues with dashes in
            some UML tools.] Reference Section 4.2.5 and Appendix B of NIEM MPD Specification v1.0
            (http://reference.niem.gov/niem/specification/model-package-description/1.0/).
            &lt;/p> &lt;p>   &lt;/p> &lt;/body>
            &lt;/html> ication/model-package-description/1.0/). &lt;/p>
            &lt;p>   &lt;/p> &lt;/body> &lt;/html>
            p> &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-updates" name="updates" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-updates-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-updates">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that this MPD is an incremental update to the
              resource referenced in resourceURI. Used by a core or domain update to identify the
              domain schema in a NIEM release being incrementally updated (not replaced).
              &lt;/body> &lt;/html> not replaced). &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-conforms_to" name="conforms_to" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-conforms_to-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-conforms_to">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that this MPD conforms to the specification or
              standard referenced in resourceURI. &lt;/body> &lt;/html> URI.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-version_of" name="version_of" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-version_of-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-version_of">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that this MPD is a different version of the MPD
              referenced in resourceURI. This code value is only needed in cases where significant
              name changes might obscure the relationship to the previous version. For example, NIEM
              Justice 4.1 is a version of GJXDM 3.0.3. &lt;/body> &lt;/html>
              ion of GJXDM 3.0.3. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-specializes" name="specializes" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-specializes-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-specializes">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that this MPD is a specialization of the MPD
              referenced in resourceURI. This value is the inverse of generalizes.
              &lt;/body> &lt;/html> eralizes. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-generalizes" name="generalizes" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-generalizes-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-generalizes">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that this MPD is a generalization of the MPD
              referenced in resourceURI. This value is the inverse of specializes.
              &lt;/body> &lt;/html> cializes. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-supersedes" name="supersedes" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-supersedes-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-supersedes">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that this MPD replaces the MPD referenced in
              resourceURI. &lt;/body> &lt;/html> URI. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-deprecates" name="deprecates" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-deprecates-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-deprecates">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that content in this MPD is preferred over
              content in the MPD referenced in resourceURI; and at some time in the future will
              supersede the MPD referenced in resourceURI &lt;/body>
              &lt;/html> sourceURI &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-adapts" name="adapts" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-adapts-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-adapts">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              relationshipCode value for indicating that this MPD is an adaptation of the MPD
              referenced in resourceURI. &lt;/body> &lt;/html> URI.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode" name="PurposeCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> An indication of the type of an MPD artifact. This further indicates
            how it should be processed by software tools. &lt;/p> &lt;p> The
            literals of this enumeration correspond to MPD nature URIs of the form
            &quot;http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#&lt;purpose-code>&quot;.
            &lt;/p> &lt;p> [Note these NIEM-UML enumeration literals differ
            from the NIEM MPD Specification v1.0 in that they use underscore (&quot;_&quot;) instead of dash
            (&quot;-&quot;). This is due to issues with dashes in some UML tools.] Reference Section 4.2.4 and
            Appendix G of NIEM MPD Specification v1.0
            (http://reference.niem.gov/niem/specification/model-package-description/1.0/).
            &lt;/p> &lt;p>   &lt;/p> &lt;/body>
            &lt;/html> nce.niem.gov/niem/specification/model-package-description/1.0/).
            &lt;/p> &lt;p>   &lt;/p> &lt;/body>
            &lt;/html> p> &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema_set" name="extension_schema_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema_set">
            <body>Serves the purpose of a collection of XML schemas which contain new or extend existing NIEM data components and conform to the NIEM Naming and Design Rules.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-reference_schema_set" name="reference_schema_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-reference_schema_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-reference_schema_set">
            <body>Serves the purpose of a collection of XML schemas that contain data components that are authoritive for NIEM.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-subset_schema_set" name="subset_schema_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-subset_schema_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-subset_schema_set">
            <body>Serves the purpose of a collection of XML schemas which have been derived from and represent a subset of a particular NIEM reference schema set (release).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-file" name="file" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-file-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-file">
            <body>Serves the purpose of a block of arbitrary information, or resource for storing information, which is available to a computer program and is usually based on some kind of durable storage.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-business_rules" name="business_rules" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-business_rules-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-business_rules">
            <body>Serves the purpose of a statement or set of statements (formal or informal) that define and/or constrain some aspect of business data or information.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-catalog" name="catalog" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-catalog-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-catalog">
            <body>Serves the purpose of identifying, locating, and describing all artifacts in a model package description.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-documentation" name="documentation" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-documentation-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-documentation">
            <body>Serves the purpose of describing or explaining any aspect of design, usage, testing, processing, etc. of a model package description and/or its contents.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-administrative" name="administrative" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-administrative-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-administrative">
            <body>Serves the purpose of documentation that relates to business operations, decisions, organizing people and resources, agreements, testimonials, etc. about a model package description.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-endorsement" name="endorsement" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-endorsement-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-endorsement">
            <body>Serves the purpose of documentation that supports, approves, sanctions, or recommends a model package description.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-memorandum" name="memorandum" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-memorandum-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-memorandum">
            <body>Serves the purpose of documentation that records events, observations, agreements, or other business related aspects pertaining to a model package description.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-report" name="report" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-report-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-report">
            <body>Serves the purpose of a document that records evaluation results produced through review, testing, or analysis that was executed by automatic processing, manual (human) means, or a combination of both.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-conformance_report" name="conformance_report" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-conformance_report-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-conformance_report">
            <body>Serves the purpose of a report that evaluates NIEM conformance.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-quality_assurance_report" name="quality_assurance_report" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-quality_assurance_report-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-quality_assurance_report">
            <body>Serves the purpose of a report that evaluates or measures degree of excellence against some prescribed criteria.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-test_report" name="test_report" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-test_report-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-test_report">
            <body>Serves the purpose of a document that records the results of testing.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-technical_reference" name="technical_reference" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-technical_reference-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-technical_reference">
            <body>Serves the purpose of technical documentation that defines, describes, or explains technical aspects of a model package description.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-non-normative_reference" name="non-normative_reference" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-non-normative_reference-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-non-normative_reference">
            <body>Serves the purpose of technical documentation that provides informal guidance or recommends methods that relate to technical aspects of a model package description.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-normative_reference" name="normative_reference" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-normative_reference-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-normative_reference">
            <body>Serves the purpose of technical documentation that provides formal specifications, instructions, or rules for techniques and methods that relate to a model package description.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-metadata_extended" name="metadata_extended" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-metadata_extended-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-metadata_extended">
            <body>Serves the purpose of an XML artifact that provides additional metadata beyond that contained in a model package description catalog.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-sample_instance" name="sample_instance" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-sample_instance-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-sample_instance">
            <body>Serves the purpose of an XML instance document that exemplifies a typical instance that validates against an XML schema or schema set.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-schema" name="schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-schema">
            <body>Serves the purpose of an XML schema in general.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-constraint_schema" name="constraint_schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-constraint_schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-constraint_schema">
            <body>Serves the purpose of an XML schema that defines additional constraints on XML instances beyond those that NIEM Naming and Design Rules are capable of enforcing.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-exchange_schema" name="exchange_schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-exchange_schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-exchange_schema">
            <body>Serves the purpose of an XML schema that is a root schema (and declares a root element) for an IEPD.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema" name="extension_schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema">
            <body>Serves the purpose of an XML schema that extends a NIEM release in accordance with the NIEM Naming and Design Rules.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-incremental_schema" name="incremental_schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-incremental_schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-incremental_schema">
            <body>Serves the purpose of an XML schema within a Domain Update that represents incremental changes to an existing NIEM domain.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-reference_schema" name="reference_schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-reference_schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-reference_schema">
            <body>Serves the purpose of an XML schema that defines and declares NIEM data components that are authoritative.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-replacement_schema" name="replacement_schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-replacement_schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-replacement_schema">
            <body>Serves the purpose of an XML schema within a domain update that represents a complete replacement of an existing NIEM domain schema.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-subset_schema" name="subset_schema" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-subset_schema-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-subset_schema">
            <body>Serves the purpose of an XML schema that has been derived from a NIEM reference schema and represents a subset of the reference schema.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-tool_specific_file" name="tool_specific_file" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-tool_specific_file-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-tool_specific_file">
            <body>Serves the purpose of an artifact that is an input to or output from some software tool used to develop contents of or implement a model package description. Such artifacts may be in either a standard open format or proprietary format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-wantlist" name="wantlist" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-wantlist-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-wantlist">
            <body>Serves the purpose of an XML instance document that represents a NIEM schema subset and is an input to or output from the NIEM Schema Subset Generation Tool.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-file_set" name="file_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-file_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-file_set">
            <body>Serves the purpose of a collection of files managed together for a specific purpose or reason.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-schema_set" name="schema_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-schema_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-schema_set">
            <body>Serves the purpose of a collection of XML schemas that are maintained together for a logical reason or purpose (usually because of inter dependencies).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-constraint_schema_set" name="constraint_schema_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-constraint_schema_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-constraint_schema_set">
            <body>Serves the purpose of a collection of XML schemas which impose additional constraints on the XML instance documents (IEPs) of an IEPD.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-exchange_schema_set" name="exchange_schema_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-exchange_schema_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-exchange_schema_set">
            <body>Serves the purpose of a collection of XML schemas which declare root elements for XML instance documents (IEPs) of an IEPD.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-changelog" name="changelog" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-changelog-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-changelog">
            <body>Serves the purpose of recording all changes (additions, deletions, modifications) to a model package description relative to a previous version.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-web_service" name="web_service" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-web_service-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-web_service">
            <body>A definition for network services as a set of endpoints operating on messages containing either document-oriented or procedure-oriented information.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-data_dictionary" name="data_dictionary" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-data_dictionary-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-data_dictionary">
            <body>Serves the purpose of a record of information about data (i.e. metadata) such as names, meaning, relationships to other data, origin, usage, and format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-data_model" name="data_model" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-data_model-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-data_model">
            <body>Serves the purpose of a formal representation (e.g., UML) of business data requirements that indicates data semantics, structure, and relationships.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-display" name="display" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-display-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-display">
            <body>Serves the purpose of formatting information for viewing on a computer monitor.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-mapping" name="mapping" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-mapping-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-mapping">
            <body>Serves the purpose of describing how one data model or set of data components corresponds to another by identifying semantic equivalence or similarity.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-master_document" name="master_document" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-master_document-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-master_document">
            <body>Serves the purpose of a primary source of documentation; a readme file; a first documentation source to consult and one that may reference other supplemental documentation.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-ontology" name="ontology" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-ontology-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-ontology">
            <body>Serves the purpose of a standardized representation of knowledge as a set of concepts within a domain, and the relationships between those concepts. It can be used to reason about the entities within that domain, and may be used to describe the domain.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-transformation" name="transformation" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-transformation-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-transformation">
            <body>Serves the purpose of translating an artifact into another format or representation.</body>
          </ownedComment>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship" name="ModelPackageDescriptionRelationship">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The ModelPackageDescriptionRelationship stereotype applies to a
            Dependency that represents a relationship between MPDs or between an MPD and another
            resource (such as a NIEM specification; as in the case of conforms-to). There are many
            ways one MPD may relate to another. This makes it extremely difficult to specify a fixed
            set of values that could objectively define an exact relationship between a pair of
            MPDs. Therefore, the optional descriptionText attribute is provided to further explain
            the nature of any of the eight relationshipCode values available (version_of,
            specializes, generalizes, deprecates, supersedes, adapts, conforms_to, updates). In some
            cases, the value of relationshipCode may be generic enough to require a more detailed
            explanation in descriptionText (for example, if the value is &quot;adapts&quot;).
            &lt;/p> &lt;/body> &lt;/html> in descriptionText (for
            example, if the value is &quot;adapts&quot;). &lt;/p> &lt;/body>
            &lt;/html> /body> &lt;/html> </body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-descriptionText" name="descriptionText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-descriptionText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-descriptionText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> A more detailed or specific textual explanation of the relationship
              between the MPDs or between an MPD and a resource (such as a specification).
              &lt;/p> &lt;p> The catalog provides a Relationship element with
              three attributes (resourceURI, relationshipCode, and descriptionText) to identify the
              pedigree of an MPD. There are many ways that one MPD may relate to another. This makes
              it extremely difficult to specify a fixed set of values that could objectively define
              an exact relationship between a pair of MPDs. Therefore, the optional descriptionText
              attribute is provided to further explain the nature of any of the eight
              relationshipCode values available (version_of, specializes, generalizes, deprecates,
              supersedes, adapts, conforms_to, updates). In some cases, the value of
              relationshipCode may be generic enough to require a more detailed explanation in
              descriptionText (for example, if the value is &quot;adapts&quot;). &lt;/p>
              &lt;/body> &lt;/html> optional descriptionText attribute is
              provided to further explain the nature of any of the eight relationshipCode values
              available (version_of, specializes, generalizes, deprecates, supersedes, adapts,
              conforms_to, updates). In some cases, the value of relationshipCode may be generic
              enough to require a more detailed explanation in descriptionText (for example, if the
              value is &quot;adapts&quot;). &lt;/p> &lt;/body> &lt;/html> the
              value of relationshipCode may be generic enough to require a more detailed explanation
              in descriptionText (for example, if the value is &quot;adapts&quot;). &lt;/p>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-descriptionText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-base_Dependency" name="base_Dependency" visibility="private" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Dependency"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-relationshipCode" name="relationshipCode" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-relationshipCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-relationshipCode">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              classification or reason for the connectedness between the MPDs or between an MPD and
              a resource. &lt;/body> &lt;/html> a resource.
              &lt;/body> &lt;/html> > &lt;/html> </body>
          </ownedComment>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-relationshipCode-defaultValue" instance="NIEM_UML_Profile-Model_Package_Description_Profile-RelationshipCode-conforms_to"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7" memberEnd="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship-base_Dependency NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7-ownedEnd" name="extension_" visibility="private" type="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionRelationship" aggregation="composite" owningAssociation="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-7-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" name="ModelPackageDescription">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A ModelPackageDescription Component represents a NIEM Model Package
            Description (MPD). Specifically, it represents the information in an MPD catalog.
            Reference NIEM MPD Specification v1.0
            (http://reference.niem.gov/niem/specification/model-package-description/1.0/)
            &lt;br>An MPD is a logical set of electronic files aggregated and organized
            to fulfill a specific purpose in NIEM. Directory organization and packaging of an MPD
            should be designed around major themes in NIEM: reuse, sharing, interoperability, and
            efficiency. The inclusion of artifacts in an MPD is modeled using a Usage dependency
            from the Component representing the MPD to the model element representing the artifact
            (most commonly a Namespace Package). &lt;br> &lt;/p>
            &lt;/body> &lt;/html> senting the artifact (most commonly a
            Namespace Package). &lt;br> &lt;/p> &lt;/body>
            &lt;/html> &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-05_" name="MPD [Rule 4-05]" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-05_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-05_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 4-5] &lt;/b>The URI for an MPD
              MUST end in its version number. &lt;/p> &lt;p>
              &lt;/p> &lt;p> The tag value for mpdURI is derived and computed
              from the version number. &lt;/p> &lt;/body>
              &lt;/html> mputed from the version number. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-05_-specification">
            <language>OCL2.0</language>
            <body>derive: self.mpdBaseURI.repr().concat(self.mpdVersionID.repr()).oclAsType(AnyURI) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-04_" name="MPD [Rule 4-04]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-04_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-04_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-4]&lt;/b> Every MPD MUST be assigned a valid http
              URI. &lt;/body> &lt;/html> &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-04_-specification">
            <language>OCL2.0</language>
            <body>self.mpdBaseURI.repr().startsWith('http:/') </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-14_" name="MPD [Rule 4-14]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-14_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-14]&lt;/b> An IEPD or an EIEM MUST contain a
              master document located in the MPD root directory whose filename begins with the
              substring &quot;master-document&quot;. &lt;/body> &lt;/html> nt&quot;.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-14_-specification">
            <language>English</language>
            <body>Constraints on master document are resolved during PSM-MPD transformation.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-01_" name="MPD [Rule 4-01]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-01_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-01_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-1] &lt;/b>An MPD MUST contain an XML catalog
              artifact that validates with the NIEM MPD catalog schema (XSD) and that resides in the
              root directory of the MPD and bears the file name &quot;catalog.xml&quot;. &lt;/body>
              &lt;/html> ml&quot;. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-01_-specification">
            <language>English</language>
            <body>Constraint is resolved via PSM-MPD transformations which produce the catalog as
              specified by the MPD. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-12_" name="MPD [Rule 4-12]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-12_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-12_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 4-12] &lt;/b>Every MPD that is an
              IEPD or EIEM MUST contain a change log artifact that: &lt;/p>
              &lt;p> � Records changes to previous IEPD or EIEM schemas that this MPD
              represents. &lt;/p> &lt;p> � Begins with the substring
              &quot;changelog&quot;. &lt;/p> &lt;p> � Resides in the root directory of
              the MPD. &lt;/p> &lt;/body> &lt;/html>
              &lt;p> � Resides in the root directory of the MPD. &lt;/p>
              &lt;/body> &lt;/html> &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-12_-specification">
            <language>English</language>
            <body>Constraints on changelogs are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-9_" name="MPD [Rule 6-9]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-9_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-9_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-9]&lt;/b> Within any artifact of an MPD archive,
              any direct reference to another resource (i.e., another artifact such as an image,
              schema, stylesheet, etc.) that is required to process or display an artifact SHOULD
              exist within the archive at the location specified by that reference.
              &lt;/body> &lt;/html> hat reference. &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-9_-specification">
            <language>English</language>
            <body>Packaging constraints are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-5_" name="MPD [Rule 6-5]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-5_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-5_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-5]&lt;/b> Absolute references to Internet
              resources MUST use a well-known transfer protocol (http, https, ftp, ftps) and MUST
              resolve (If applicable, documentation that describes how to resolve with security,
              account, and/or password issues MUST be included). &lt;/body>
              &lt;/html> be included). &lt;/body> &lt;/html>
              ml> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-5_-specification">
            <language>English</language>
            <body>Constraints on URIs are partially satisfied by specific URI Constraints expressed
              elsewhere in the NDR and MPD. For URI references embedded elsewhere in the model, it
              would be difficult to express the constraint in OCL. This constraint must be manually
              resolved by the modeler. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3a_" name="MPD [Rule 6-3a]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3a_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3a_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-3a]&lt;/b> An MPD archive file
              MUST use file name syntax defined by the regular expression: &lt;/p>
              &lt;p> mpd-filename ::= name '-' version '.' class '.zip'
              &lt;/p> &lt;p> Where: &lt;/p> &lt;p
              style=&quot;margin-left:10.0px;&quot;> name ::= alphanum ((alphanum | special)*
              alphanum)? &lt;/p> &lt;p style=&quot;margin-left:10.0px;&quot;> alphanum
              ::= [a-zA-Z0-9] &lt;/p> &lt;p style=&quot;margin-left:10.0px;&quot;>
              special ::= '.' | '-' | '_' &lt;/p> &lt;p
              style=&quot;margin-left:10.0px;&quot;> version ::= digit+ ('.' digit+)* (status digit+)?
              &lt;/p> &lt;p style=&quot;margin-left:10.0px;&quot;> digit ::= [0-9]
              &lt;/p> &lt;p style=&quot;margin-left:10.0px;&quot;> status ::= 'alpha' |
              'beta' | 'rc' | 'rev' &lt;/p> &lt;p style=&quot;margin-left:10.0px;&quot;>
              class ::= 'rel' | 'cu' | 'du' | 'iepd' | 'eiem' &lt;/p> &lt;p
              style=&quot;margin-left:0.0px;&quot;> All alpha characters SHOULD be lower case to reduce
              the risk of complications across various file systems. See [&lt;a
              href=&quot;mdel://_17_0_3_24a0131_1321168952839_661693_1978&quot;>Rule
              4-3&lt;/a>] for an explanation of the status options. &lt;/p>
              &lt;p style=&quot;margin-left:0.0px;&quot;> (The regular expression notation used
              above is from XML 1.0 (Fifth Edition): &lt;a
              href=&quot;http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&quot;>http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&lt;/a>)
              &lt;/p> &lt;/body> &lt;/html> sion notation used
              above is from XML 1.0 (Fifth Edition): &lt;a
              href=&quot;http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&quot;>http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&lt;/a>)
              &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3a_-specification">
            <language>English</language>
            <body>Packaging constraints are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13.1_" name="MPD [Rule 4-13.1]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13.1_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13.1_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 4-13.1]&lt;/b> If an IEPD or EIEM
              contains more than one change log artifact, then each change log artifact MUST:
              &lt;/p> &lt;p> � Have a file name that begins with the substring
              &quot;changelog&quot;. &lt;/p> &lt;p> � Reside in the MPD root directory .
              &lt;/p> &lt;/body> &lt;/html> � Reside in the MPD
              root directory . &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13.1_-specification">
            <language>English</language>
            <body>Constraints on changelogs are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-11_" name="MPD [Rule 4-11]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-11_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-11_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 4-11] &lt;/b>Every MPD that is a
              reference schema set (i.e., NIEM releases, core updates, and domain updates) MUST
              contain an XML change log artifact that: &lt;/p> &lt;p> �
              Validates with the NIEM change log schemas (mpd-changelog.xsd and niem-model.xsd).
               Note: These are the base filenames; the actual filenames also contain a version
              number. For example: mpd-changelog-1.0.xsd is the current version. &lt;/p>
              &lt;p> � Records changes to previous reference schemas that this MPD
              represents. &lt;/p> &lt;p> � Bears the file name
              &quot;changelog.xml&quot;. &lt;/p> &lt;p> � Resides in the root directory
              of the MPD. &lt;/p> &lt;/body> &lt;/html>
              &quot;changelog.xml&quot;. &lt;/p> &lt;p> � Resides in the root directory
              of the MPD. &lt;/p> &lt;/body> &lt;/html> /p>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-11_-specification">
            <language>English</language>
            <body>Constraints on changelog are resolved during PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-06_" name="MPD [Rule 3-06]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-06_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-06_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-6] &lt;/b>An IEPD MUST contain at least one
              exchange schema artifact that declares at least one top-level root element for IEP
              instances specified by the IEPD. &lt;/body> &lt;/html> the IEPD.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-06_-specification">
            <language>OCL2.0</language>
            <body>( self.base_Component.profiledBy('NIEM_PSM_Profile') and
              (self.mpdClassCode=ModelPackageDescriptionClassCode::iepd) ) implies
              self.base_Component.elementImport ->exists(elementImport|
              elementImport.stereotypedBy('ModelPackageDescriptionFile') and (
              elementImport.getStereotypeApplication('ModelPackageDescriptionFile').purposeURI=
              'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#exchange-schema' )
              and elementImport.importElement.oclAsType(Package).packagedElement
              ->exists(e|e.stereotypedBy('PropertyHolder') and
              e.oclAsType(Class).ownedAttribute->notEmpty()) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-15_" name="MPD [Rule 4-15]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-15_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-15_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-15]&lt;/b> A NIEM IEPD or EIEM master document
              SHOULD (at a minimum) describe the MPD purpose, scope, business value, exchange
              information, senders/receivers, interactions, and references to other documentation.
              &lt;/body> &lt;/html> documentation. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-15_-specification">
            <language>English</language>
            <body>Constraints on master document are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3c_" name="MPD [Rule 6-3c]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3c_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3c_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-3c]&lt;/b> Within an MPD,the
              &lt;class> substring in the file name MUST correctly correspond to the
              value for the attribute mpdClassCode within catalog.xml. Correct correspondence is:
              &lt;/p> &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;>
              &lt;tr> &lt;td>  IF file name &lt;class>=
              &lt;/td> &lt;td>  THEN catalog.xml mpdClassCode =
              &lt;/td> &lt;/tr> &lt;tr> &lt;td>  rel
              &lt;/td> &lt;td>  release &lt;/td>
              &lt;/tr> &lt;tr> &lt;td>  cu &lt;/td>
              &lt;td>  core-update &lt;/td> &lt;/tr>
              &lt;tr> &lt;td>  du &lt;/td> &lt;td>
               domain-update &lt;/td> &lt;/tr> &lt;tr>
              &lt;td>  iepd &lt;/td> &lt;td>  iepd
              &lt;/td> &lt;/tr> &lt;tr> &lt;td>  eiem
              &lt;/td> &lt;td>  eiem &lt;/td> &lt;/tr>
              &lt;/table> &lt;/body> &lt;/html>  cu
              &lt;/td> &lt;td>  core-update &lt;/td>
              &lt;/tr> &lt;tr> &lt;td>  du &lt;/td>
              &lt;td>  domain-update &lt;/td> &lt;/tr>
              &lt;tr> &lt;td>  iepd &lt;/td> &lt;td>
               iepd &lt;/td> &lt;/tr> &lt;tr> &lt;td>
               eiem &lt;/td> &lt;td>  eiem &lt;/td>
              &lt;/tr> &lt;/table> &lt;/body> &lt;/html>
              &lt;/td> &lt;/tr> &lt;tr> &lt;td>  iepd
              &lt;/td> &lt;td>  iepd &lt;/td> &lt;/tr>
              &lt;tr> &lt;td>  eiem &lt;/td> &lt;td>
               eiem &lt;/td> &lt;/tr> &lt;/table>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3c_-specification">
            <language>English</language>
            <body>Packaging constraints are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03_" name="MPD [Rule 4-03]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 4-3]&lt;/b> All NIEM version
              numbers adhere to the regular expression: &lt;/p> &lt;p> version
              ::= digit+ ('.' digit+)* (status digit+)? &lt;/p> &lt;p> Where:
              &lt;/p> &lt;p> digit ::= [0-9] &lt;/p>
              &lt;p> status ::= 'alpha' | 'beta' | 'rc' | 'rev' &lt;/p>
              &lt;p> 'alpha' indicates early development &lt;/p>
              &lt;p> 'beta' indicates late development; but changing or incomplete
              &lt;/p> &lt;p> 'rc' indicates release candidate; complete but
              not approved as operational &lt;/p> &lt;p> 'rev' indicates very
              minor revision that does not impact schema validation &lt;/p>
              &lt;p> (The regular expression notation used above is from XML 1.0 (Fifth
              Edition): &lt;a
              href=&quot;http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&quot;>http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&lt;/a>)
              &lt;/p> &lt;/body> &lt;/html> om XML 1.0 (Fifth
              Edition): &lt;a
              href=&quot;http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&quot;>http://www.w3.org/TR/2008/REC-xml-20081126/#sec-notation&lt;/a>)
              &lt;/p> &lt;/body> &lt;/html> body>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03_-specification">
            <language>OCL2.0</language>
            <body>self.mpdVersionID.match('[0-9]+(\\.[0-9]+)*((alpha|beta|rc|rev)[0-9]+)?') </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-1_" name="MPD [Rule 6-1]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-1_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-1_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-1] &lt;/b>An MPD is packaged as a single
              compressed archive of files that represents a sub-tree of a file system in
              standard&lt;b> [PK-ZIP]&lt;/b> format. This archive MUST
              preserve and store the logical directory structure intended by its author.
              &lt;/body> &lt;/html> by its author. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-1_-specification">
            <language>English</language>
            <body>Constraints on packaging are resolved during PSM-MPD transformation.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-09_" name="MPD [Rule 3-09]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-09_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-09_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-9]&lt;/b> A NIEM-conforming IEPD or EIEM MUST
              contain at least one schema that is either a NIEM reference schema or a subset derived
              from a NIEM reference schema. &lt;/body> &lt;/html> e schema.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-09_-specification">
            <language>OCL2.0</language>
            <body>( self.base_Component.profiledBy('NIEM_PSM_Profile') and (
              (self.mpdClassCode=ModelPackageDescriptionClassCode::iepd) or
              (self.mpdClassCode=ModelPackageDescriptionClassCode::eiem) ) ) implies
              self.base_Component.elementImport
              ->select(elementImport|elementImport.stereotypedBy('ModelPackageDescriptionFile')).getStereotypeApplication('ModelPackageDescriptionFile').purposeURI
              ->exists(purposeURI|
              (purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema')
              or
              (purposeURI='http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')
              ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-09_" name="MPD [Rule 4-09]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-09_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-09_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 4-9]&lt;/b> A URI reference to an
              individual MPD artifact from another resource is the concatenation of
              &lt;/p> &lt;p> � The URI of the MPD that contains the artifact.
              &lt;/p> &lt;p> � The crosshatch or pound character (&quot;#&quot;).
              &lt;/p> &lt;p> � A fragment identifier that is the locally
              unique id of the artifact within the catalog of the MPD itself. &lt;/p>
              &lt;/body> &lt;/html> f the artifact within the catalog of the
              MPD itself. &lt;/p> &lt;/body> &lt;/html>
              body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-09_-specification">
            <language>English</language>
            <body>Explicit URI references are not modelled for well known artifacts such as schemas.
              Serialization of MPD artifacts such as schemas are via PSM-MPD transformations which
              construct URI references according to this MPD rule.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-07_" name="MPD [Rule 4-07]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-07_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-07_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-7] &lt;/b>Each file set artifact in an MPD MUST
              have a corresponding FileSet element in the catalog for that MPD. This FileSet element
              must identify each file artifact that is a member of that file set artifact.
              &lt;/body> &lt;/html> artifact. &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-07_-specification">
            <language>English</language>
            <body>Constraints for catalog construction are resolved in PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-6_" name="MPD [Rule 6-6]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-6_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-6_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-6] &lt;/b>A published IEPD MUST contain all
              documents necessary to understand it and allow it to be implemented correctly.
              &lt;/body> &lt;/html> tly. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-6_-specification">
            <language>English</language>
            <body>This constraint is resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-10_" name="MPD [Rule 3-10]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-10_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-10_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 3-10]&lt;/b> A NIEM IEPD MUST contain at least one
              valid sample XML instance (i.e., IEP) artifact for each exchange schema element that
              can be the root of a corresponding IEP. &lt;/body> &lt;/html>
              ding IEP. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_3-10_-specification">
            <language>English</language>
            <body>This constraint is realized by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-10_" name="MPD [Rule 4-10]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-10_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-10_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-10] &lt;/b>NIEM namespaces MUST NOT be used as
              URIs for MPD artifacts. &lt;/body> &lt;/html> cts.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-10_-specification">
            <language>English</language>
            <body>Constraints on artifact URIs are resolved during PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3_" name="MPD [Rule 6-3]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-3] &lt;/b>An MPD archive MUST uncompress (unzip)
              to a one and only one MPD root directory. &lt;/body> &lt;/html>
              ory. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3_-specification">
            <language>English</language>
            <body>Packaging constraints are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-2_" name="MPD [Rule 6-2]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-2_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-2_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-2]&lt;/b> Within an MPD archive, all XSD and XML
              artifacts MUST be valid against and follow all rules for their respective
              &lt;b>[NIEM-NDR]&lt;/b> conformance targets (i.e., subset,
              constraint, extension, exchange, reference schemas, and XML instances); this includes
              being well-formed and valid XML Schema documents. &lt;/body>
              &lt;/html> L Schema documents. &lt;/body> &lt;/html>
              l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-2_-specification">
            <language>English</language>
            <body>This constraint is resolved by a combination of applying all specified NDR-based
              constraints and transformations to target artifacts.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3d_" name="MPD [Rule 6-3d]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3d_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3d_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-3d]&lt;/b> When represented on
              the Internet, an MPD archive SHOULD use the following MIME Type: &lt;/p>
              &lt;p> application/zip+&lt;class> &lt;/p>
              &lt;p> where &lt;/p> &lt;p
              style=&quot;margin-left:10.0px;&quot;> &lt;class> is one member from the set
              {rel, cu, du, iepd, eiem} &lt;/p> &lt;p
              style=&quot;margin-left:0.0px;&quot;> Use of the generic zip MIME type application/zip is
              allowed, but discouraged. No other MIME types are allowed when representing MPD
              archives. &lt;/p> &lt;/body> &lt;/html> scouraged. No
              other MIME types are allowed when representing MPD archives. &lt;/p>
              &lt;/body> &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3d_-specification">
            <language>English</language>
            <body>Packaging constraints are resolved by transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-02_" name="MPD [Rule 4-02]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-02_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-02_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-2] &lt;/b>Every MPD MUST be assigned a version
              number. &lt;/body> &lt;/html> &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-02_-specification">
            <language>OCL2.0</language>
            <body>not(self.mpdVersionID.oclIsUndefined()) and (self.mpdVersionID&lt;>'')
              -- This constraint also satisfied by tag mpdVersionID, which is required to have a
              value.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3b_" name="MPD [Rule 6-3b]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3b_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3b_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-3b]&lt;/b> Within an MPD,the&lt;name>
              and &lt;version> substrings in the file name MUST match exactly the values
              for attributes mpdName and mpdVersionID within its catalog.xml artifact.
              &lt;/body> &lt;/html> artifact. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-3b_-specification">
            <language>English</language>
            <body>Packaging constraints are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-08_" name="MPD [Rule 4-08]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-08_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-08_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-8] &lt;/b>Each artifact identified in the catalog
              MUST be assigned an id in the format of an NCName (Non-Colonized Name) as defined by
              [W3-XML-Namespaces]. This is required for both File and FileSet artifacts.
              &lt;/body> &lt;/html> rtifacts. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-08_-specification">
            <language>English</language>
            <body>All catalog constraints are resolved in PSM-MPD transformation.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13_" name="MPD [Rule 4-13]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-13]&lt;/b> The initial version of an IEPD or EIEM
              MUST contain a change log artifact with at least one entry for its creation date.
              &lt;/body> &lt;/html> ate. &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-13_-specification">
            <language>English</language>
            <body>Constraints on changelogs are resolved during PSM-MPD transformation.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03.1_" name="MPD [Rule 4-03.1]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03.1_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03.1_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-3.1] &lt;/b>A higher MPD version number within a
              version series does NOT imply compatibility between versions. Compatibility between or
              among MPD versions MUST be explicitly stated in documentation. &lt;/body>
              &lt;/html> entation. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-03.1_-specification">
            <language>English</language>
            <body>Satisfaction of this constraint requires comparative analysis between versions;
              can not be expressed easily in OCL.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-7_" name="MPD [Rule 6-7]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-7_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-7_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-7]&lt;/b> A published IEPD MUST link (through its
              catalog) to any EIEM it is based on. &lt;/body> &lt;/html> on.
              &lt;/body> &lt;/html> ml> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-7_-specification">
            <language>English</language>
            <body>An EIEM is an MPD with a packageCode of EIEM. An EIEM is typically bundled as a
              reusable model library which can be referenced from IEPDs. This relationship between
              EIEM and IEPD is used by PSM-MPD transformations to construct the catalog entries in
              resolution of this constraint.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-06_" name="MPD [Rule 4-06]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-06_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-06_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 4-6] &lt;/b>Each file artifact in an MPD MUST have a
              corresponding File element in the catalog for that MPD. &lt;/body>
              &lt;/html> MPD. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_4-06_-specification">
            <language>English</language>
            <body>Constraints for catalog construction are resolved in PSM-MPD transformation. </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-4_" name="MPD [Rule 6-4]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-4_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-4_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-4]&lt;/b> Within an MPD archive, the value of each
              xsd:import schemaLocation attribute MUST be a relative path reference that resolves to
              the correct schema within the sub-tree. &lt;/body> &lt;/html>
              sub-tree. &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-4_-specification">
            <language>English</language>
            <body>Packaging constraints are resolved by PSM-MPD transformations.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-8_" name="MPD [Rule 6-8]" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-8_-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-8_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 6-8]&lt;/b> Within an MPD archive, if
              non-NIEM-conforming schemas from other standards are used and referenced within an
              MPD, then all xsd:import, xsd:include, and xsd:redefine constructs used within those
              schemas MUST be modified as needed to have a value for the schemaLocation attribute
              that is a relative path reference that resolves to the correct schema within the
              sub-tree. &lt;/body> &lt;/html> ema within the sub-tree.
              &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-MPD__Rule_6-8_-specification">
            <language>English</language>
            <body>The schemaLocation constraints are resolved during PSM-MPD transformation.</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-base_Component" name="base_Component" visibility="private" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-1">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Component"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdVersionID" name="mpdVersionID" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdVersionID-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdVersionID">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> Many
              published MPDs will be periodically revised and updated; therefore, versioning is
              required to clearly indicate that changes have occurred. A version number is actually
              part of the unique identification for an MPD (to be discussed in a subsequent
              section). All NIEM version numbers adhere to the regular expression:
              [0-9]+(\.[0-9]+)*((alpha|beta|rc|rev)[0-9]+)? Where: &lt;ul>
              &lt;li> &quot;alpha&quot; indicates early development &lt;/li>
              &lt;li> &quot;beta&quot; indicates late development; but changing or incomplete
              &lt;/li> &lt;li> &quot;rc&quot; indicates release candidate; complete but
              not approved as operational &lt;/li> &lt;li> &quot;rev&quot; indicates
              very minor revision that does not impact schema validation &lt;/li>
              &lt;/ul> &lt;/body> &lt;/html> ional
              &lt;/li> &lt;li> &quot;rev&quot; indicates very minor revision that does
              not impact schema validation &lt;/li> &lt;/ul>
              &lt;/body> &lt;/html> n &lt;/li> &lt;/ul>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdVersionID-defaultValue" value="1.0"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdBaseURI" name="mpdBaseURI" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdBaseURI-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdBaseURI">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> The left hand substring of an MPD URI that does not include its
              mpdVersionID. The concatenation of mpdBaseURI and mpdVersionID becomes the value of
              the mpdURI attribute of the Catalog element in the catalog instance.
              &lt;/p> &lt;p>   &lt;/p> &lt;/body>
              &lt;/html> ance. &lt;/p> &lt;p>   &lt;/p>
              &lt;/body> &lt;/html> p> &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdBaseURI-defaultValue" value="http://iepd.org/myIEPD/"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdClassCode" name="mpdClassCode" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdClassCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdClassCode">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> The classification code of the MPD. Implemented as the value of the
              mpdClassCode attribute of the Catalog element in the catalog instance. This code
              designates the classification or kind of the MPD. &lt;/p>
              &lt;/body> &lt;/html> This code designates the classification or
              kind of the MPD. &lt;/p> &lt;/body> &lt;/html> kind
              of the MPD. &lt;/p> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-mpdClassCode-defaultValue" instance="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-iepd"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-descriptionText" name="descriptionText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-descriptionText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-descriptionText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> A description of the MPD. A statement that provides an explanation
              or additional detail. &lt;/p> &lt;p> Implemented as the value of
              the descriptionText attribute of the Catalog element in the catalog instance.
              &lt;/p> &lt;/body> &lt;/html> element in the catalog
              instance. &lt;/p> &lt;/body> &lt;/html> ce.
              &lt;/p> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-descriptionText-lowerValue"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-descriptionText-defaultValue" value="An exchange to notify partner agencies to perform contingency operations."/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-SecurityMarkingText" name="SecurityMarkingText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-SecurityMarkingText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-SecurityMarkingText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A label
              that defines how this MPD must be handled or can be distributed to protect the
              information it contains; the security marking for the MPD. Implemented as the value of
              the SecurityMarkingText element in the catalog instance. Default is &quot;unclassified&quot;.
              &lt;/body> &lt;/html> t element in the catalog instance. Default
              is &quot;unclassified&quot;. &lt;/body> &lt;/html> &quot;unclassified&quot;.
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-CreationDate" name="CreationDate" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-CreationDate-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-CreationDate">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> Date
              this MPD was published or created. Implemented as the value of the CreationDate
              element in the catalog instance. &lt;/body> &lt;/html> catalog
              instance. &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-LastRevsionDate" name="LastRevsionDate" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-LastRevsionDate-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-LastRevsionDate">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> Date the MPD was last revised. Implemented as the value of the
              LastRevisionDate element in the catalog instance. &lt;/p>
              &lt;/body> &lt;/html> the catalog instance. &lt;/p>
              &lt;/body> &lt;/html> /p> &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-LastRevsionDate-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-NextRevisionDate" name="NextRevisionDate" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-NextRevisionDate-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-NextRevisionDate">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> An estimate of the projected date the MPD is expected to be revised
              again (if known). Implemented as the value of the NextRevisionDate element in the
              catalog instance. &lt;/p> &lt;/body> &lt;/html> the
              NextRevisionDate element in the catalog instance. &lt;/p>
              &lt;/body> &lt;/html> instance. &lt;/p>
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-NextRevisionDate-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-StatusText" name="StatusText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-StatusText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-StatusText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              Description of the current state of development or usage of the MPD; may also project
              future plans for the MPD. Implemented as the value of the StatusText element in the
              catalog instance. &lt;/body> &lt;/html> the StatusText element
              in the catalog instance. &lt;/body> &lt;/html> instance.
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-StatusText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-KeywordText" name="KeywordText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-KeywordText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-KeywordText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              keyword associated with the MPD; a common alias, term, or phrase that would help to
              facilitate search and discovery of this MPD. Implemented as the value of the
              KeywordText element in the catalog instance. &lt;/body>
              &lt;/html> lue of the KeywordText element in the catalog instance.
              &lt;/body> &lt;/html> g instance. &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-KeywordText-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-DomainText" name="DomainText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-DomainText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-DomainText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A NIEM
              Domain applicable to, associated with, or that uses the MPD. Implemented as the value
              of the DomainText element in the catalog instance. &lt;/body>
              &lt;/html> lement in the catalog instance. &lt;/body>
              &lt;/html> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-DomainText-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-PurposeText" name="PurposeText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-PurposeText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-PurposeText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              description for the purpose, function, intended use of, or reason for the existence of
              the MPD. Implemented as the value of the PurposeText element in the catalog instance.
              &lt;/body> &lt;/html> PurposeText element in the catalog
              instance. &lt;/body> &lt;/html> tance. &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-PurposeText-lowerValue"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-PurposeText-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePatternText" name="ExchangePatternText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePatternText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePatternText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A
              description of a transactional, design, or exchange pattern the MPD uses (generally,
              applicable to IEPDs only). Implemented as the value of the ExchangePatternText element
              in the catalog instance. &lt;/body> &lt;/html> atternText
              element in the catalog instance. &lt;/body> &lt;/html> ce.
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePatternText-lowerValue"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePatternText-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePartnerName" name="ExchangePartnerName" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePartnerName-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePartnerName">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> Name of
              an agency, organization, or entity that uses the MPD (in particular to share or
              exchange data). Implemented as the value of the ExchangePartnerName element in the
              catalog instance. &lt;/body> &lt;/html> xchangePartnerName
              element in the catalog instance. &lt;/body> &lt;/html> ce.
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePartnerName-lowerValue"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ExchangePartnerName-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASName" name="ASName" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASName-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASName">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A name
              for the authoritative source for the MPD; can be author, creator, sponsor, etc.
              (person, organization, or entity). Implemented as the value of the ASName element in
              the catalog instance. &lt;/body> &lt;/html> the ASName element
              in the catalog instance. &lt;/body> &lt;/html> instance.
              &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASAddressText" name="ASAddressText" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASAddressText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASAddressText">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> An
              address or description for the location of the authoritative source for the MPD.
              Implemented as the value of the ASAddressText element in the catalog instance.
              &lt;/body> &lt;/html> xt element in the catalog instance.
              &lt;/body> &lt;/html> ce. &lt;/body>
              &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASAddressText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASWebSiteURL" name="ASWebSiteURL" visibility="public" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASWebSiteURL-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASWebSiteURL">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A URL
              for the Web site of the authoritative source for the MPD. Implemented as the value of
              the ASWebSiteURL element in the catalog instance. &lt;/body>
              &lt;/html> lement in the catalog instance. &lt;/body>
              &lt;/html> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-ASWebSiteURL-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-POC" name="POC" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-POCType" aggregation="composite">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-POC-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-POC">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A point
              of contact (POC) for the authoritative source for the MPD; metadata used to contact
              the authoritative source. Implemented as a POCType with values for name, email, and
              telephone in the catalog instance. &lt;/body> &lt;/html> for
              name, email, and telephone in the catalog instance. &lt;/body>
              &lt;/html> g instance. &lt;/body> &lt;/html> </body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescription-POC-upperValue" value="*"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode" name="NatureCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> An indication of the type of an MPD artifact. This further indicates
            how it should be processed by software tools. The literals of this enumeration
            correspond to MPD nature URIs of the form
            &quot;http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/nature#&lt;nature-code>&quot;.
            &lt;/p> &lt;p> [Note these NIEM-UML enumeration literals differ
            from the NIEM MPD Specification v1.0 in that they use underscore (&quot;_&quot;) instead of dash
            (&quot;-&quot;). This is due to issues with dashes in some UML tools.] Reference Section 4.2.5 and
            Appendix G of NIEM MPD Specification v1.0
            (http://reference.niem.gov/niem/specification/model-package-description/1.0/).
            &lt;/p> &lt;p>   &lt;/p> &lt;/body>
            &lt;/html> m/specification/model-package-description/1.0/).
            &lt;/p> &lt;p>   &lt;/p> &lt;/body>
            &lt;/html> p> &lt;/body> &lt;/html> </body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-mpd" name="mpd" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-mpd-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-mpd">
            <body>A nature of a NIEM model package description (MPD).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-domain_update" name="domain_update" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-domain_update-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-domain_update">
            <body>A nature of a NIEM domain update model package description (MPD).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-iepd" name="iepd" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-iepd-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-iepd">
            <body>A nature of a NIEM Information Exchange Package Documentation (IEPD) model package description (MPD).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-release" name="release" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-release-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-release">
            <body>A nature of a NIEM release model package description (MPD).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-binary" name="binary" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-binary-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-binary">
            <body>A nature of a binary file with unknown or unspecified encoding or format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-doc" name="doc" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-doc-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-doc">
            <body>A nature of a Microsoft Office Word file (includes doc and docx).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-image" name="image" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-image-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-image">
            <body>A nature of an image file with unknown or unspecified format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-gif" name="gif" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-gif-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-gif">
            <body>A nature of an image file in Graphic Interchange Format (GIF).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-jpg" name="jpg" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-jpg-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-jpg">
            <body>A nature of an image file in Joint Photographic Experts Group (JPEG or JPG) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-png" name="png" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-png-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-png">
            <body>A nature of an image file in Portable Network Graphics (PNG) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-mdb" name="mdb" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-mdb-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-mdb">
            <body>A nature of a file in Microsoft Office Access database format (includes mdb and mdbx).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-pdf" name="pdf" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-pdf-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-pdf">
            <body>A nature of a file in Adobe Portable Document Format (PDF).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-ppt" name="ppt" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-ppt-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-ppt">
            <body>A nature of a Microsoft PowerPoint presentation file (includes ppt and pptx).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-svg" name="svg" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-svg-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-svg">
            <body>A nature of a file in Scalable Vector Graphic (SVG) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-vsd" name="vsd" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-vsd-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-vsd">
            <body>A nature of a file in Microsoft Visio diagram format (includes vsd and vdx).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xls" name="xls" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xls-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xls">
            <body>A nature of a Microsoft Excel spreadsheet file (includes xls and xlsx).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-zip" name="zip" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-zip-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-zip">
            <body>A nature of a compressed archive in PKZIP format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-character" name="character" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-character-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-character">
            <body>A nature of a character encoded file.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-csv" name="csv" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-csv-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-csv">
            <body>A nature of a Comma Separated Value (CSV) file.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-html" name="html" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-html-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-html">
            <body>A nature of a file in the W3C HyperText Markup Language (HTML) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-text" name="text" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-text-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-text">
            <body>A nature of a plain text file.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xml" name="xml" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xml-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xml">
            <body>A nature of a file in the W3C eXtensible Markup Language (XML) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-catalog" name="catalog" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-catalog-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-catalog">
            <body>A nature of a NIEM model package description (MPD) catalog file format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-changelog" name="changelog" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-changelog-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-changelog">
            <body>A nature of a NIEM model package description (MPD) changelog format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-owl" name="owl" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-owl-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-owl">
            <body>A nature of a file in the W3C Web Ontology Language (OWL) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-rdf" name="rdf" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-rdf-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-rdf">
            <body>A nature of a file in the W3C Resource Description Framework (RDF) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-schematron" name="schematron" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-schematron-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-schematron">
            <body>A nature of a file in Schematron format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-wantlist" name="wantlist" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-wantlist-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-wantlist">
            <body>A nature of a NIEM wantlist file.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-wsdl" name="wsdl" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-wsdl-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-wsdl">
            <body>A nature of a file in the W3C Web Services Description Language (WSDL) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xhtml" name="xhtml" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xhtml-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xhtml">
            <body>A nature of a file in the W3C XML HyperText Markup Language format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xmi" name="xmi" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xmi-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xmi">
            <body>A nature of a file in the Object Management Group (OMG) XML Metadata Interchange (XMI) format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xsd" name="xsd" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xsd-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xsd">
            <body>A nature of a file in the W3C XML Schema format.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xslt" name="xslt" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xslt-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-xslt">
            <body>A nature of a file in the W3C XML Stylesheet Language (XSL) Tranformations (XSLT) format (includes both xsl and xslt).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-file_set" name="file_set" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-file_set-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-file_set">
            <body>A nature of a set of files that are grouped for a specified purpose.</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-core_update" name="core_update" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-core_update-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-core_update">
            <body>A nature of a NIEM core update model package description (MPD).</body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-eiem" name="eiem" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-eiem-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-eiem">
            <body>A nature of a NIEM Enterprise Information Exchange Model (EIEM) model package description (MPD).</body>
          </ownedComment>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10" memberEnd="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-base_Component NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10-ownedEnd" name="extension_ModelPackageDescriptionFileSet" visibility="private" type="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet" aggregation="composite" owningAssociation="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode" name="ModelPackageDescriptionClassCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body> A
            specified classification (type or kind) of the MPD. Implemented as the value of the
            mpdClassCode attribute of the Catalog element in the catalog instance. One and only one
            classification is allowed for any given MPD. &lt;p> [Note these NIEM-UML
            enumeration literals differ from the NIEM MPD Specification v1.0 in that they use
            underscore (&quot;_&quot;) instead of dash (&quot;-&quot;). This is due to issues with dashes in some UML
            tools.] Reference Section 4.2.5 and Appendix B of NIEM MPD Specification v1.0
            (http://reference.niem.gov/niem/specification/model-package-description/1.0/).
            &lt;/p> &lt;/body> &lt;/html>
            cification/model-package-description/1.0/). &lt;/p> &lt;/body>
            &lt;/html> &lt;/html> </body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-eiem" name="eiem" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-eiem-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-eiem">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> An
              Enterprise Information Exchange Model (EIEM) is an MPD that incorporates BIECs that
              meet enterprise business needs for exchanging data using NIEM [NIEM-BIEC]. An EIEM is
              an adaptation of NIEM schemas, tailored and constrained for and by an enterprise. An
              EIEM will contain the following schemas that are commonly used or expected to be used
              by the authoring enterprise: one standard NIEM schema subset and one or more NIEM
              extension schemas that extend existing NIEM data components or establish new data
              components. &lt;br> &lt;/body> &lt;/html> ish new
              data components. &lt;br> &lt;/body> &lt;/html>
              y> &lt;/html> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-iepd" name="iepd" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-iepd-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-iepd">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> NIEM Information Exchange Package Documentation (IEPD) is an MPD
              that defines a recurring XML data exchange. An NIEM IEPD is a set of valid XML schemas
              that may include portions of NIEM Core schemas, portions of NIEM Domain schemas,
              enterprise-specific or IEPD-specific extension schemas, and at least one exchange
              schema that defines a document element (as defined in [W3-XML-InfoSet]). The schemas
              contained in an IEPD work together to define a class of XML instances that
              consistently encapsulate data for information exchanges. Each XML instance in this
              class validates against the set of XML schemas contained within the IEPD.
              &lt;/p> &lt;/body> &lt;/html> gainst the set of XML
              schemas contained within the IEPD. &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-core_update" name="core_update" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-core_update-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-core_update">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> When necessary, the NIEM PMO can publish a core update. This is
              essentially identical to a domain update in terms of structure and use, with two
              important exceptions. First, a core update records changes that apply to a particular
              NIEM core version or another core update. This also means it is applicable to all NIEM
              releases using that same core version. Second, a core update is never published to
              replace a NIEM core. It is intended to add new schemas, new data components, new code
              values, etc. to a core without waiting for the next major release. In some cases,
              minor modifications to existing data components are possible. &lt;/p>
              &lt;/body> &lt;/html> modifications to existing data components
              are possible. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-release" name="release" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-release-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-release">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body> A NIEM
              release is an MPD containing a full set of harmonized reference schemas that
              coherently define all content within a single version of NIEM. NIEM releases include
              major, minor, and micro releases (as defined in the NIEM High Level Version
              Architecture (HLVA)). &lt;br> &lt;/body> &lt;/html>
              tecture (HLVA)). &lt;br> &lt;/body> &lt;/html>
              /html> </body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-domain_update" name="domain_update" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-domain_update-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionClassCode-domain_update">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> A domain update is an MPD containing reference schemas that
              represent changes to NIEM domains. The [NIEM-HLVA] defines a domain update as both a
              process and a NIEM product. Through use and analysis of NIEM releases and published
              content, domain users will identify issues and new data requirements for the domain
              and sometimes Core. NIEM domains use these issues as the basis for incremental
              improvements, extensions, and proposed changes to future NIEM releases. Both the
              process and product of the process are referred to as domain update.
              &lt;/p> &lt;/body> &lt;/html> of the process are
              referred to as domain update. &lt;/p> &lt;/body>
              &lt;/html> &lt;/html> </body>
          </ownedComment>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet" name="ModelPackageDescriptionFileSet">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> A ModelPackageDescriptionFileSet Component represents a set of files
            in an MPD that are grouped for a specific purpose, function, or classification. For
            example, a set of MPD files might represent a schema subset, extension schema set, set
            of documentation, or set of test files. The MPD catalog uses the File element to
            represent artifacts, and the FileSet element to represent a set of artifacts. Note that
            both files and file sets are considered MPD artifacts. Reference Sections 4.2.3 and
            4.2.4 of NIEM MPD Specification v1.0
            (http://reference.niem.gov/niem/specification/model-package-description/1.0/).
            &lt;/p> &lt;/body> &lt;/html>
            .gov/niem/specification/model-package-description/1.0/). &lt;/p>
            &lt;/body> &lt;/html> &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-unnamed1" name="unnamed1" constrainedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet" context="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet">
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-unnamed1-specification">
            <language>OCL2.0</language>
            <body>self.base_Package.namespace.stereotypedBy('ModelPackageDescription')</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-externalURI" name="externalURI" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-externalURI-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-externalURI">
            <body>The external URI for the file set; indicates a same-as relationship to a copy of
              the file set. Implemented as the value of the externalURI attribute of the FileSet
              element in the catalog instance.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-externalURI-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-natureCode" name="natureCode" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-natureCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-natureCode">
            <body>The nature (type) of the file set. Implemented as the value of the natureURI
              attribute of the FileSet element in the catalog instance.</body>
          </ownedComment>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-natureCode-defaultValue" instance="NIEM_UML_Profile-Model_Package_Description_Profile-NatureCode-file_set"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-purposeCode" name="purposeCode" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-purposeCode-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-purposeCode">
            <body>The purpose or function of the file set. Implemented as the value of the
              purposeURI attribute of the FileSet element in the catalog instance.</body>
          </ownedComment>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-purposeCode-defaultValue" instance="NIEM_UML_Profile-Model_Package_Description_Profile-PurposeCode-extension_schema_set"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-descriptionText" name="descriptionText" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-descriptionText-ownedComment" annotatedElement="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-descriptionText">
            <body>A description of the file set. Implemented as the value of the descriptionText
              attribute of the FileSet element in the catalog instance.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-descriptionText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFileSet-base_Component" name="base_Component" visibility="private" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-10">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Component"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13" memberEnd="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile-base_Usage NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13-ownedEnd" name="extension_ModelPackageDescriptionFile" visibility="private" type="NIEM_UML_Profile-Model_Package_Description_Profile-ModelPackageDescriptionFile" aggregation="composite" owningAssociation="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-13-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType" name="ChangeLogType">
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-base_Package" name="base_Package" visibility="private" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Package"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-ChangeLogSummaryText" name="ChangeLogSummaryText" visibility="public" aggregation="composite">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-ChangeLogSummaryText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-ChangeLogSubmitterName" name="ChangeLogSubmitterName" visibility="public" aggregation="composite">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-ChangeLogSubmitterName-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-ChangeLogApplicationInstructionsText" name="ChangeLogApplicationInstructionsText" visibility="public" aggregation="composite">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-ChangeLogApplicationInstructionsText-lowerValue"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14" memberEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14-extension_ NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType-base_Package" navigableOwnedEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14-extension_">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14-extension_" name="extension_" visibility="private" type="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeLogType" aggregation="composite" owningAssociation="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-14-extension_-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType" name="ChangeInformationType">
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-base_Package" name="base_Package" visibility="private" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Package"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeSummaryText" name="ChangeSummaryText" visibility="public" aggregation="composite">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeSummaryText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeReasonText" name="ChangeReasonText" visibility="public" aggregation="composite">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeReasonText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeFullDescriptionText" name="ChangeFullDescriptionText" visibility="public" aggregation="composite">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeFullDescriptionText-lowerValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeNCCTIssueNumber" name="ChangeNCCTIssueNumber" visibility="public" aggregation="composite">
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Integer"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeNCCTIssueNumber-lowerValue"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeNCCTIssueNumber-upperValue" value="*"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeCode" name="ChangeCode" visibility="public" type="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType" aggregation="composite">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeCode-lowerValue"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-ChangeCode-upperValue" value="*"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15" memberEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15-extension_ NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType-base_Package" navigableOwnedEnd="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15-extension_">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15-extension_" name="extension_" visibility="private" type="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeInformationType" aggregation="composite" owningAssociation="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15" association="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-packagedElement-15-extension_-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType" name="ChangeCodeSimpleType">
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType-new_requirement" name="new_requirement" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType-bug_fix" name="bug_fix" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType-refactoring" name="refactoring" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType-harmonization" name="harmonization" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType-general_improvement" name="general_improvement" enumeration="NIEM_UML_Profile-Model_Package_Description_Profile-ChangeCodeSimpleType"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Profile" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile" name="NIEM_PSM_Profile" URI="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_PSM_Profile" metamodelReference="NIEM_UML_Profile-NIEM_PSM_Profile-packageImport-2">
      <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
        <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhHMFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <contents xmi:type="ecore:EPackage" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-ePackage" name="NIEM_PSM_Profile" nsURI="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_PSM_Profile" nsPrefix="NIEM_PSM_Profile">
            <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
              <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuQVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile"/>
            </xmi:Extension>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_TDhuQlY8EeO9lbaNv599nw" name="XSDRepresentationRestriction">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuQ1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuRFY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_TDhuRVY8EeO9lbaNv599nw" key="documentation" value=" self.base_DataType.generalization->notEmpty() "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_TDhuRlY8EeO9lbaNv599nw" name="whiteSpace" ordered="false" eType="_TDhuSlY8EeO9lbaNv599nw" defaultValueLiteral="collapse"/>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_TDhuSFY8EeO9lbaNv599nw" name="base_DataType" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//DataType"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_TDhuSlY8EeO9lbaNv599nw" name="XSDWhiteSpaceCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuS1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhuTFY8EeO9lbaNv599nw" name="replace"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhuTVY8EeO9lbaNv599nw" name="collapse" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhuTlY8EeO9lbaNv599nw" name="preserve" value="2"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_TDhuT1Y8EeO9lbaNv599nw" name="XSDPropertyKindCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuUFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhuUVY8EeO9lbaNv599nw" name="element"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhuUlY8EeO9lbaNv599nw" name="attribute" value="1"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_TDhuU1Y8EeO9lbaNv599nw" name="XSDProperty">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuVFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuVVY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_TDhuVlY8EeO9lbaNv599nw" key="documentation" value="(self.kind=XSDPropertyKindCode::attribute) implies&#xA;              self.base_Property.name.firstToUpper()&lt;>self.base_Property.name&#xA;( (self.kind=XSDPropertyKindCode::element) implies( (self.base_Property.upper=1)&#xA;              and (self.base_Property.lower=1) and not (self.base_Property.isDerivedUnion) and&#xA;              self.base_Property.subsettedProperty->isEmpty() ) ) and(&#xA;              not(self.base_Property.type.oclIsUndefined()) implies&#xA;              self.base_Property.type.oclIsKindOf(DataType) ) &#xA;self.base_Property.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and&#xA;              (self.base_Property.type.oclIsUndefined() implies documentation.body.startsWith('A&#xA;              data concept for a ')) and (self.base_Property.type.stereotypedBy('AssociationType')&#xA;              implies documentation.body.startsWith('A relationship ')) and&#xA;              (self.base_Property.type.stereotypedBy('AugmentationType') implies&#xA;              documentation.body.startsWith('Supplements ')) and&#xA;              (self.base_Property.type.stereotypedBy('MetadataType') implies&#xA;              (documentation.body.startsWith('Metadata about ') or&#xA;              documentation.body.startsWith('Information that further qualifies ')) and&#xA;              (self.base_Property.name.match('.*Date.*') implies documentation.body.startsWith('A&#xA;              date ')) and (self.base_Property.name.match('.*Quantity.*') implies&#xA;              documentation.body.match('A .*count/number of ')) -- Element with an image&#xA;              representation term &quot;A(n) (optional adjective) image/picture/photograph of...&quot; and&#xA;              (self.base_Property.name.match('.*Indicator.*') implies documentation.body.match('True&#xA;              if .*; false otherwise.*')) -- Element with an identification representation term&#xA;              &quot;A(n) (optional adjective) identification...&quot; and&#xA;              (self.base_Property.name.match('.*ID.*') implies documentation.body.match('An&#xA;              Identifier .*')) -- Element with a status representation term &quot;A(n) (optional&#xA;              adjective) status/state of...&quot; and (self.base_Property.name.match('.*Name.*') implies&#xA;              documentation.body.match('A name of .*')) -- Element with a category text&#xA;              representation term &quot;A kind of...&quot; -- Element with a description text representation&#xA;              term &quot;A description of...&quot; and&#xA;              (not(self.base_Property.type.stereotypedBy('AugmentationType') or&#xA;              self.base_Property.type.stereotypedBy('MetadataType')) implies&#xA;              documentation.body.match('An? .* ')) ) &#xA;( (self.kind=XSDPropertyKindCode::element) and&#xA;              (self.base_Property.aggregation=AggregationKind::none) ) =&#xA;              self.base_Property.name.endsWith('Reference') &#xA;self.base_Property.name.match('[\\w|\\-]*')&#xA;( ( (self.kind=XSDPropertyKindCode::element) and&#xA;              not(self.base_Property.type.oclIsUndefined()) ) implies&#xA;              self.base_Property.type.stereotypedBy('NIEMType') ) and ( (&#xA;              (self.kind=XSDPropertyKindCode::element) and self.base_Property.type.oclIsUndefined()&#xA;              ) implies self.base_Property.isDerivedUnion ) &#xA;( (self.kind=XSDPropertyKindCode::element) and&#xA;              self.base_Property.type.oclIsKindOf(DataType) ) implies (&#xA;              self.base_Property.name.match('.*Name.*') or self.base_Property.name.match('.*Text.*')&#xA;              or self.base_Property.name.match('.*Quantity.*') or&#xA;              self.base_Property.name.match('.*Percent.*') or&#xA;              self.base_Property.name.match('.*Rate.*') or&#xA;              self.base_Property.name.match('.*Value.*') or&#xA;              self.base_Property.name.match('.*Numeric.*') or&#xA;              self.base_Property.name.match('.*Measure.*') or&#xA;              self.base_Property.name.match('.*Indicator.*') or&#xA;              self.base_Property.name.match('.*URI.*') or self.base_Property.name.match('.*ID.*') or&#xA;              self.base_Property.name.match('.*Time.*') or self.base_Property.name.match('.*Date.*')&#xA;              or self.base_Property.name.match('.*DateTime.*') or&#xA;              self.base_Property.name.match('.*Code.*') or&#xA;              self.base_Property.name.match('.*Video.*') or&#xA;              self.base_Property.name.match('.*Sound.*') or&#xA;              self.base_Property.name.match('.*Picture.*') or&#xA;              self.base_Property.name.match('.*Graphic.*') or&#xA;              self.base_Property.name.match('.*BinaryObject.*') or&#xA;              self.base_Property.name.match('.*Amount.*') ) &#xA;self.base_Property.owner.oclIsKindOf(DataType) or&#xA;              self.base_Property.owner.stereotypedBy(NIEMType) &#xA;(self.kind=XSDPropertyKindCode::attribute) implies&#xA;              self.base_Property.name.match('.*Name.*') or self.base_Property.name.match('.*Text.*')&#xA;              or self.base_Property.name.match('.*Quantity.*') or&#xA;              self.base_Property.name.match('.*Percent.*') or&#xA;              self.base_Property.name.match('.*Rate.*') or&#xA;              self.base_Property.name.match('.*Value.*') or&#xA;              self.base_Property.name.match('.*Numeric.*') or&#xA;              self.base_Property.name.match('.*Measure.*') or&#xA;              self.base_Property.name.match('.*Indicator.*') or&#xA;              self.base_Property.name.match('.*URI.*') or self.base_Property.name.match('.*ID.*') or&#xA;              self.base_Property.name.match('.*Time.*') or self.base_Property.name.match('.*Date.*')&#xA;              or self.base_Property.name.match('.*DateTime.*') or&#xA;              self.base_Property.name.match('.*Code.*') or&#xA;              self.base_Property.name.match('.*Video.*') or&#xA;              self.base_Property.name.match('.*Sound.*') or&#xA;              self.base_Property.name.match('.*Picture.*') or&#xA;              self.base_Property.name.match('.*Graphic.*') or&#xA;              self.base_Property.name.match('.*BinaryObject.*') or&#xA;              self.base_Property.name.match('.*Amount.*')&#xA;(self.kind=XSDPropertyKindCode::element) implies&#xA;              (self.base_Property.name.firstToUpper()=self.base_Property.name)&#xA;(self.kind=XSDPropertyKindCode::attribute) implies&#xA;              not(self.base_Property.type.oclIsUndefined())"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_TDhuV1Y8EeO9lbaNv599nw" name="base_Property" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Property"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_TDhuWVY8EeO9lbaNv599nw" name="kind" ordered="false" lowerBound="1" eType="_TDhuT1Y8EeO9lbaNv599nw" defaultValueLiteral="element"/>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_TDhuW1Y8EeO9lbaNv599nw" name="nillable" ordered="false" defaultValueLiteral="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Boolean"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_TDhuXVY8EeO9lbaNv599nw" name="fixed" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_TDhuX1Y8EeO9lbaNv599nw" name="XSDAnyProperty">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuYFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuYVY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_TDhuYlY8EeO9lbaNv599nw" key="documentation" value="self.base_Property.type.oclIsUndefined() and&#xA;              not(self.base_Property.isDerivedUnion) and&#xA;              self.base_Property.subsettedProperty->isEmpty() &#xA;self.base_Property.owner.owner.getTargetDirectedRelationships()&#xA;              ->select(d|d.stereotypedBy('ModelPackageDescriptionFile'))&#xA;              ->forAll(mpdf|&#xA;              (mpdf.getStereotypeApplication('ModelPackageDescriptionFile').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')&#xA;              and&#xA;              (mpdf.getStereotypeApplication('ModelPackageDescriptionFile').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema')&#xA;              ) "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_TDhuY1Y8EeO9lbaNv599nw" name="base_Property" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Property"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_TDhuZVY8EeO9lbaNv599nw" name="processContents" ordered="false" lowerBound="1" eType="_TDhuaVY8EeO9lbaNv599nw" defaultValueLiteral="strict"/>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_TDhuZ1Y8EeO9lbaNv599nw" name="valueNamespace" ordered="false" lowerBound="1" defaultValueLiteral="##any">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_TDhuaVY8EeO9lbaNv599nw" name="XSDProcessContentsCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhualY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhua1Y8EeO9lbaNv599nw" name="strict"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhubFY8EeO9lbaNv599nw" name="lax" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_TDhubVY8EeO9lbaNv599nw" name="skip" value="2"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_TDhublY8EeO9lbaNv599nw" name="XSDSimpleContent">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhub1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhucFY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_TDhucVY8EeO9lbaNv599nw" key="documentation" value="self.base_Realization.client->forAll(c|c.stereotypedBy('NIEMType'))&#xA;self.base_Realization.supplier->forAll(s|s.oclIsKindOf(DataType))&#xA;self.base_Realization.client->forAll(complexType|self.base_Realization.supplier->forAll(simpleType|simpleType.name=complexType.name))&#xA;              implies self.base_Realization.client.oclAsType(Class).ownedAttribute->isEmpty() "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_TDhuclY8EeO9lbaNv599nw" name="base_Realization" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Realization"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_TDhudFY8EeO9lbaNv599nw" name="SequenceID">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhudVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhudlY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_TDhud1Y8EeO9lbaNv599nw" key="documentation" value="self.base_Property.name = &quot;sequenceId&quot; and self.base_Property.type.name =&#xA;              &quot;integer&quot; and self.base_Property.type.oclIsKindOf(PrimitiveType) and&#xA;              self.base_Property.lower = 1 and self.base_Property.upper = 1"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_TDhueFY8EeO9lbaNv599nw" name="base_Property" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Property"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_TDhuelY8EeO9lbaNv599nw" name="XSDDeclaration" eSuperTypes="_TDhufVY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhue1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PSM_Profile-XSDDeclaration"/>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_TDhufVY8EeO9lbaNv599nw" name="NIEM_UML_Profile_NIEM_Common_Profile_References">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuflY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-References"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_TDhuf1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_TDhugFY8EeO9lbaNv599nw" key="documentation" value="( self.base_Realization.client->size()=1) and (&#xA;              self.base_Realization.supplier->size()=1) and&#xA;              self.base_Realization.client->forAll(client|client.oclIsKindOf(Classifier)) and&#xA;              self.base_Realization.supplier->forAll(supplier|supplier.oclIsKindOf(Classifier)&#xA;              and not(supplier.stereotypedBy('PropertyHolder')) ) ) implies ( (&#xA;              self.base_Realization.client.oclAsType(Classifier).attribute&#xA;              ->forAll(clientAttribute|&#xA;              self.base_Realization.supplier.oclAsType(Classifier).attribute&#xA;              ->forAll(supplierAttribute| (clientAttribute.name=supplierAttribute.name)&#xA;              implies ( (clientAttribute.lower>=supplierAttribute.lower) and (&#xA;              (supplierAttribute.upper=-1) or&#xA;              (clientAttribute.upper&lt;=supplierAttribute.upper) ) and (&#xA;              (clientAttribute.upper=-1) or (clientAttribute.lower&lt;=clientAttribute.upper) )&#xA;              ) ) ) ) and( self.base_Realization.supplier.oclAsType(Classifier).attribute&#xA;              ->select(a|a.lower>0) ->forAll(supplierAttribute|&#xA;              self.base_Realization.client.oclAsType(Classifier).attribute->exists(clientAttribute|clientAttribute.name=supplierName)&#xA;              ) ) )"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_TDhugVY8EeO9lbaNv599nw" name="base_Realization" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Realization"/>
              </eStructuralFeatures>
            </eClassifiers>
          </contents>
        </eAnnotations>
      </xmi:Extension>
      <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile">
        <body>The NIEM PSM Profile comprises stereotypes that are used in NIEM PSMs. These
          stereotypes need not be used with a NIEM PIM, but they may be in order to provide
          additional platform-specific markup.Further, the NIEM PIM Profile imports the NIEM Common
          Profile and, therefore, includes all the stereotypes and metaclasses covered by that
          profile.</body>
      </ownedComment>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packageImport-1" importedPackage="NIEM_UML_Profile-NIEM_Common_Profile" importingNamespace="NIEM_UML_Profile-NIEM_PSM_Profile"/>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packageImport-2" importingNamespace="NIEM_UML_Profile-NIEM_PSM_Profile">
        <importedPackage xmi:type="uml:Model" href="http://www.omg.org/spec/UML/20110701/UML.xmi#_0"/>
      </packageImport>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1" memberEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1-ownedEnd NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-base_DataType" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1-ownedEnd" name="extension_RepresentationRestriction" visibility="private" type="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction" name="XSDRepresentationRestriction">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction">
          <body>XSDRepresentationRestriction specifies a restriction on the representation in an XML
            schema of the values of a base DataType. </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-must_have_one_generalization" name="must have one generalization" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-must_have_one_generalization-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-must_have_one_generalization">
            <body>A DataType with an XSDRepresentationRestriction must have exactly one
              generalization.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-must_have_one_generalization-specification">
            <language>OCL2.0</language>
            <body> self.base_DataType.generalization->notEmpty() </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-whiteSpace" name="whiteSpace" visibility="public" type="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-whiteSpace-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-whiteSpace">
            <body>whiteSpace is a restriction on the value space of the DataType. It is implemented
              in XML Schema as the value of the value attribute on the xsd:whiteSpace element, the
              child of the xsd:restriction element which is the immediate child of the
              xsd:simpleType element.</body>
          </ownedComment>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-whiteSpace-lowerValue"/>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-whiteSpace-defaultValue" instance="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-collapse"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDRepresentationRestriction-base_DataType" name="base_DataType" visibility="private" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-1">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#DataType"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode" name="XSDPropertyKindCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode">
          <body>XSDPropertyKindCode supports the kind attribute of XSDProperty by providing values
            to specify if an XSD property is represented as an xsd:element or xsd:attribute.</body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-element" name="element" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-element-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-element"/>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-attribute" name="attribute" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-attribute-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-attribute"/>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4" memberEnd="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID-base_Property NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4-ownedEnd" name="extension_XSDStructureId" visibility="private" type="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty" name="XSDProperty">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <body>An XSDProperty Property represents a NIEM property, which is implemented in XML
            Schema as either an attribute declaration and use or an element declaration and
            particle. If an XSDProperty Property is the client of a References Realization, then the
            supplier of the Realization defines the declaration of the NIEM property. Otherwise, the
            declaration of the NIEM property is defined implicitly to be the top-level attribute or
            element definition of the same name within the target namespace of the Namespace Package
            that contains the XSDProperty Property. All NIEM properties represented by XSDProperty
            Properties with the same name within the same package that are not clients of References
            Realizations share the same implicit attribute or element declaration. </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-5_" name="NDR [Rule 9-5]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-5_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-5_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-5] (REF, SUB, EXT)&lt;/b> Within the schema, any
              attribute declaration SHALL have a name that begins with a lower-case letter
              ('a'-'z'). &lt;/body> &lt;/html> 'a'-'z'). &lt;/body>
              &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-5_-specification">
            <language>OCL2.0</language>
            <body>(self.kind=XSDPropertyKindCode::attribute) implies
              self.base_Property.name.firstToUpper()&lt;>self.base_Property.name</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyAttributeKind" name="XSDPropertyAttributeKind" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyAttributeKind-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyAttributeKind">
            <body>If kind=attribute, then an XSDProperty must have multiplicity 1..1, must not be a
              derived union and must not subset any other property. If the type is not empty, it
              must be a DataType.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyAttributeKind-specification">
            <language>OCL2.0</language>
            <body>( (self.kind=XSDPropertyKindCode::element) implies( (self.base_Property.upper=1)
              and (self.base_Property.lower=1) and not (self.base_Property.isDerivedUnion) and
              self.base_Property.subsettedProperty->isEmpty() ) ) and(
              not(self.base_Property.type.oclIsUndefined()) implies
              self.base_Property.type.oclIsKindOf(DataType) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_7-14_" name="NDR [Rule 7-14]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_7-14_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_7-14_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-14] (REF, EXT)&lt;/b> A
              component definition SHALL begin with a standard opening phrase that depends on the
              class of the component per Table 7-1 in NDR: Standard Opening Phrases:
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              standard opening phrase based on component class helps to ensure consistent
              definitions that appropriate for the type of component item being defined. These
              opening phrases also provide a cue that facilitates recognition of the particular kind
              of component. &lt;/p> &lt;/body> &lt;/html> s
              recognition of the particular kind of component. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_7-14_-specification">
            <language>OCL2.0</language>
            <body>self.base_Property.ownedComment ->exists(documentation|
              documentation.stereotypedBy('Documentation') and
              (self.base_Property.type.oclIsUndefined() implies documentation.body.startsWith('A
              data concept for a ')) and (self.base_Property.type.stereotypedBy('AssociationType')
              implies documentation.body.startsWith('A relationship ')) and
              (self.base_Property.type.stereotypedBy('AugmentationType') implies
              documentation.body.startsWith('Supplements ')) and
              (self.base_Property.type.stereotypedBy('MetadataType') implies
              (documentation.body.startsWith('Metadata about ') or
              documentation.body.startsWith('Information that further qualifies ')) and
              (self.base_Property.name.match('.*Date.*') implies documentation.body.startsWith('A
              date ')) and (self.base_Property.name.match('.*Quantity.*') implies
              documentation.body.match('A .*count/number of ')) -- Element with an image
              representation term &quot;A(n) (optional adjective) image/picture/photograph of...&quot; and
              (self.base_Property.name.match('.*Indicator.*') implies documentation.body.match('True
              if .*; false otherwise.*')) -- Element with an identification representation term
              &quot;A(n) (optional adjective) identification...&quot; and
              (self.base_Property.name.match('.*ID.*') implies documentation.body.match('An
              Identifier .*')) -- Element with a status representation term &quot;A(n) (optional
              adjective) status/state of...&quot; and (self.base_Property.name.match('.*Name.*') implies
              documentation.body.match('A name of .*')) -- Element with a category text
              representation term &quot;A kind of...&quot; -- Element with a description text representation
              term &quot;A description of...&quot; and
              (not(self.base_Property.type.stereotypedBy('AugmentationType') or
              self.base_Property.type.stereotypedBy('MetadataType')) implies
              documentation.body.match('An? .* ')) ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-31_" name="NDR [Rule 9-31]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-31_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-31_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-31] (REF, SUB, EXT)&lt;/b>
              Within the schema, the name of any reference element SHALL use the representation term
              suffix Reference. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Reference elements are identical in
              semantics to elements that are not by reference. However, they refer to their values
              by a reference attribute instead of carrying it as content of the XML element. The use
              of a suffix helps indicate that the elements refer to, instead of contain, their
              values, yet allows the basic semantics (e.g., property, representation term) to
              persist. &lt;/p> &lt;p> Note that the use of the representation
              term suffix is one of the situations in which there is a slight divergence from the
              general rule for name generation as discussed in [Rule 9-12]. &lt;/p>
              &lt;/body> &lt;/html> vergence from the general rule for name
              generation as discussed in [Rule 9-12]. &lt;/p> &lt;/body>
              &lt;/html> body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-31_-specification">
            <language>OCL2.0</language>
            <body>( (self.kind=XSDPropertyKindCode::element) and
              (self.base_Property.aggregation=AggregationKind::none) ) =
              self.base_Property.name.endsWith('Reference') </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-3_" name="NDR [Rule 9-3]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-3_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-3_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-3] (REF, SUB, EXT) &lt;/b>The
              name of any XML Schema component defined by the schema SHALL contain only the
              following characters: &lt;/p> &lt;p> � Upper-case letters
              ('A'-'Z'). &lt;/p> &lt;p> � Lower-case letters ('a'-'z').
              &lt;/p> &lt;p> � Digits ('0'-'9'). &lt;/p>
              &lt;p> � Hyphen ('-'). &lt;/p> &lt;p> Other
              characters, such as the underscore ('_') character and the period ('.') character
              SHALL NOT appear in component names in NIEM-conformant schemas. &lt;/p>
              &lt;/body> &lt;/html> od ('.') character SHALL NOT appear in
              component names in NIEM-conformant schemas. &lt;/p> &lt;/body>
              &lt;/html> > &lt;/body> &lt;/html> ml>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-3_-specification">
            <language>OCL2.0</language>
            <body>self.base_Property.name.match('[\\w|\\-]*')</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyElementKind" name="XSDPropertyElementKind" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyElementKind-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyElementKind">
            <body>If an XSDProperty has kind=element and a non-empty type, then that type must be a
              Class stereotyped as a NIEMType. If it has kind=element and an empty type, then it
              must be a derived union.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyElementKind-specification">
            <language>OCL2.0</language>
            <body>( ( (self.kind=XSDPropertyKindCode::element) and
              not(self.base_Property.type.oclIsUndefined()) ) implies
              self.base_Property.type.stereotypedBy('NIEMType') ) and ( (
              (self.kind=XSDPropertyKindCode::element) and self.base_Property.type.oclIsUndefined()
              ) implies self.base_Property.isDerivedUnion ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-19_" name="NDR [Rule 9-19]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-19_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-19_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-19] (REF, SUB, EXT) &lt;/b>Within the schema, the
              name of an element declaration that is of simple content MUST use a representation
              term found in NDR Table 9-2: Representation Terms. &lt;/body>
              &lt;/html> on Terms. &lt;/body> &lt;/html> l>
            </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-19_-specification">
            <language>OCL2.0</language>
            <body>( (self.kind=XSDPropertyKindCode::element) and
              self.base_Property.type.oclIsKindOf(DataType) ) implies (
              self.base_Property.name.match('.*Name.*') or self.base_Property.name.match('.*Text.*')
              or self.base_Property.name.match('.*Quantity.*') or
              self.base_Property.name.match('.*Percent.*') or
              self.base_Property.name.match('.*Rate.*') or
              self.base_Property.name.match('.*Value.*') or
              self.base_Property.name.match('.*Numeric.*') or
              self.base_Property.name.match('.*Measure.*') or
              self.base_Property.name.match('.*Indicator.*') or
              self.base_Property.name.match('.*URI.*') or self.base_Property.name.match('.*ID.*') or
              self.base_Property.name.match('.*Time.*') or self.base_Property.name.match('.*Date.*')
              or self.base_Property.name.match('.*DateTime.*') or
              self.base_Property.name.match('.*Code.*') or
              self.base_Property.name.match('.*Video.*') or
              self.base_Property.name.match('.*Sound.*') or
              self.base_Property.name.match('.*Picture.*') or
              self.base_Property.name.match('.*Graphic.*') or
              self.base_Property.name.match('.*BinaryObject.*') or
              self.base_Property.name.match('.*Amount.*') ) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyOwner" name="XSDPropertyOwner" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyOwner-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyOwner">
            <body>An XSDProperty must be the ownedAttribute of a DataType or a Class stereotyped as
              a NIEMType.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-XSDPropertyOwner-specification">
            <language>OCL2.0</language>
            <body>self.base_Property.owner.oclIsKindOf(DataType) or
              self.base_Property.owner.stereotypedBy(NIEMType) </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-22_" name="NDR [Rule 9-22]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-22_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-22_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-22] (REF, SUB, EXT)
              &lt;/b>Within the schema, the name of an attribute declaration MUST use a
              representation term from NDR Table 9-2: Representation Terms. &lt;/p>
              &lt;p> &lt;b>Rationale&lt;/b> An element that
              represents a value listed in the table should have a representation term. It should do
              so even if its type is complex with multiple parts. For example, a type with multiple
              fields may represent a sound binary, a date, or a name. &lt;/p>
              &lt;/body> &lt;/html> may represent a sound binary, a date, or a
              name. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-22_-specification">
            <language>OCL2.0</language>
            <body>(self.kind=XSDPropertyKindCode::attribute) implies
              self.base_Property.name.match('.*Name.*') or self.base_Property.name.match('.*Text.*')
              or self.base_Property.name.match('.*Quantity.*') or
              self.base_Property.name.match('.*Percent.*') or
              self.base_Property.name.match('.*Rate.*') or
              self.base_Property.name.match('.*Value.*') or
              self.base_Property.name.match('.*Numeric.*') or
              self.base_Property.name.match('.*Measure.*') or
              self.base_Property.name.match('.*Indicator.*') or
              self.base_Property.name.match('.*URI.*') or self.base_Property.name.match('.*ID.*') or
              self.base_Property.name.match('.*Time.*') or self.base_Property.name.match('.*Date.*')
              or self.base_Property.name.match('.*DateTime.*') or
              self.base_Property.name.match('.*Code.*') or
              self.base_Property.name.match('.*Video.*') or
              self.base_Property.name.match('.*Sound.*') or
              self.base_Property.name.match('.*Picture.*') or
              self.base_Property.name.match('.*Graphic.*') or
              self.base_Property.name.match('.*BinaryObject.*') or
              self.base_Property.name.match('.*Amount.*')</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-6_" name="NDR [Rule 9-6]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-6_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-6_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;b>[Rule 9-6] (REF, SUB, EXT) &lt;/b>Within the schema, any
              XML Schema component other than an attribute declaration SHALL have a name that begins
              with an upper-case letter ('A'-'Z'). &lt;/body> &lt;/html>
              'A'-'Z'). &lt;/body> &lt;/html> l> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_9-6_-specification">
            <language>OCL2.0</language>
            <body>(self.kind=XSDPropertyKindCode::element) implies
              (self.base_Property.name.firstToUpper()=self.base_Property.name)</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_6-10_" name="NDR [Rule 6-10]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_6-10_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_6-10_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-10] (REF, SUB, EXT)&lt;/b>
              Within the schema, an attribute declaration with attribute name MUST carry the
              attribute type. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> Untyped XML Schema attributes allow
              arbitrary content, with no semantics. Attributes must have a type so that specific
              syntax and semantics will be provided. &lt;/p> &lt;/body>
              &lt;/html> and semantics will be provided. &lt;/p>
              &lt;/body> &lt;/html> dy> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-NDR__Rule_6-10_-specification">
            <language>OCL2.0</language>
            <body>(self.kind=XSDPropertyKindCode::attribute) implies
              not(self.base_Property.type.oclIsUndefined())</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-base_Property" name="base_Property" visibility="public" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Property"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-kind" name="kind" visibility="public" type="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-kind-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-kind">
            <body>Indicates whether the NIEM property is implemented in XML Schema as an attribute
              declaration and attribute use or element declaration and element particle: if
              &quot;attribute&quot;, the NIEM property is implemented in XML Schema as an attribute
              declaration and attribute use; if &quot;element&quot;, the NIEM property is implemented as an
              element declaration and element particle.</body>
          </ownedComment>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-kind-defaultValue" instance="NIEM_UML_Profile-NIEM_PSM_Profile-XSDPropertyKindCode-element"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-nillable" name="nillable" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-nillable-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-nillable">
            <body>Implemented in XML Schema as the value of the nillable attribute on the
              xsd:element element. Note that an XSDProperty that represents an XML attribute may not
              have a nillable value.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#Boolean"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-nillable-lowerValue"/>
          <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-nillable-defaultValue"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-fixed" name="fixed" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-fixed-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-fixed">
            <body>If present, implemented as the value of the fixed attribute of the xsd:attribute
              or xsd:element.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-fixed-lowerValue"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6" memberEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6-ownedEnd NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-base_Realization" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6-ownedEnd" name="extension_XSDSimpleContent" visibility="private" type="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty" name="XSDAnyProperty">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty">
          <body>XSDAnyProperty stereotype represents a property that is unrestricted with respect to
            the properties type, which is implemented in XML Schema as the xsd:any particle.</body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-XSDAnyPropertyType" name="XSDAnyPropertyType" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-XSDAnyPropertyType-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-XSDAnyPropertyType">
            <body>An XSDAnyProperty must have an empty type and must not be a derived union or
              subset any other property.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-XSDAnyPropertyType-specification">
            <language>OCL2.0</language>
            <body>self.base_Property.type.oclIsUndefined() and
              not(self.base_Property.isDerivedUnion) and
              self.base_Property.subsettedProperty->isEmpty() </body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-NDR__Rule_6-11_" name="NDR [Rule 6-11]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-NDR__Rule_6-11_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-NDR__Rule_6-11_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 6-11] (REF, SUB)&lt;/b> The schema
              SHALL NOT contain the element xsd:any. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> The xsd:any particle (see Model Group
              Restrictions for an informative definition of particle) provides a wildcard that may
              carry arbitrary content. The particle xsd:any may appear within constraint schemas,
              extension schemas, and exchange schemas. &lt;/p> &lt;/body>
              &lt;/html> s, extension schemas, and exchange schemas. &lt;/p>
              &lt;/body> &lt;/html> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-NDR__Rule_6-11_-specification">
            <language>OCL2.0</language>
            <body>self.base_Property.owner.owner.getTargetDirectedRelationships()
              ->select(d|d.stereotypedBy('ModelPackageDescriptionFile'))
              ->forAll(mpdf|
              (mpdf.getStereotypeApplication('ModelPackageDescriptionFile').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#reference-schema')
              and
              (mpdf.getStereotypeApplication('ModelPackageDescriptionFile').purposeURI&lt;>'http://reference.niem.gov/niem/resource/mpd/lexicon/1.1/purpose#subset-schema')
              ) </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-base_Property" name="base_Property" visibility="private" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Property"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-processContents" name="processContents" visibility="public" type="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-processContents-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-processContents">
            <body>Determines how or if the value of a NIEM property should be processed; values are:
              &quot;lax&quot;, &quot;skip&quot;, and &quot;strict&quot;.</body>
          </ownedComment>
          <defaultValue xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-processContents-defaultValue">
            <body>strict</body>
          </defaultValue>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-valueNamespace" name="valueNamespace" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-valueNamespace-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-valueNamespace">
            <body>The namespace in which values of this property must be defined. Implemented in XML
              Schema as the value of the namespace attribute on the xsd:any element.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
          <defaultValue xmi:type="uml:LiteralString" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-valueNamespace-defaultValue" value="##any"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode" name="XSDWhiteSpaceCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode">
          <body>Enumeration XSDWhiteSpaceCode supports the whiteSpace attribute of the
            XSDWhiteSpaceCode attribute as per the XSD definitions.</body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-replace" name="replace" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-replace-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-replace"/>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-collapse" name="collapse" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-collapse-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-collapse"/>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-preserve" name="preserve" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-preserve-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDWhiteSpaceCode-preserve"/>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9" memberEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9-ownedEnd NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty-base_Property" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9-ownedEnd" name="extension_NIEMProperty" visibility="public" type="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProperty" owningAssociation="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-9-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent" name="XSDSimpleContent">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent">
          <body>XSDSimpleContent represents a relationship between two type definitions: the first
            is a complex type definition with simple content whose content type is the second. This
            relationship is implemented in XML Schema through base attribute on the xsd:extension or
            xsd:restriction element of the first type definition, the actual value of which resolves
            to the second type definition. Section 3.4 of XML Schema Structures addresses simple
            content types in XML Schema; Sections 6.5.1, 6.5.2, and 7.4 of NIEM NDR v1.3 address
            simple content types in NIEM-conformant XML Schema.</body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-Client_must_be_a___NIEMType__" name="Client must be a &lt;&lt;NIEMType>>" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-Client_must_be_a___NIEMType__-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-Client_must_be_a___NIEMType__">
            <body>The client of an XSDSimpleContent Realization must be a Class stereotyped as a
              NIEMType.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-Client_must_be_a___NIEMType__-specification">
            <language>OCL2.0</language>
            <body>self.base_Realization.client->forAll(c|c.stereotypedBy('NIEMType'))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-supplier_must_be_a__DataType_" name="supplier must be a &lt;DataType>" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-supplier_must_be_a__DataType_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-supplier_must_be_a__DataType_">
            <body>The suppler of an XSDSimpleContent Realization must be a DataType.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-supplier_must_be_a__DataType_-specification">
            <language>OCL2.0</language>
            <body>self.base_Realization.supplier->forAll(s|s.oclIsKindOf(DataType))</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-NDR__Rule_9-1_" name="NDR [Rule 9-1]" context="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-NDR__Rule_9-1_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-NDR__Rule_9-1_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-1] (REF, SUB, EXT) &lt;/b>Within
              the schema, a complex type that is a direct extension of a simple type from the XML
              Schema namespace simple type MAY use the same local name as the simple type if and
              only if the extension adds no content other than the attribute group
              structures:SimpleObjectAttributeGroup. &lt;/p> &lt;p>
              &lt;b>Rationale&lt;/b> It is useful to build complex type bases
              for further extension. The NIEM distribution proxy schema xsd.xsd provides complex
              type bases for some of the simple types in the XML Schema namespace. However, the
              complex types in this proxy schema reuse the local names of the simple types they
              extend, even though the simple type names may not be NIEM-conformant. Requiring name
              changes for those NIEM-provided complex type bases would work against user
              understanding, for those already familiar with the names of the XML Schema namespace
              simple types being extended. &lt;/p> &lt;/body>
              &lt;/html> already familiar with the names of the XML Schema namespace
              simple types being extended. &lt;/p> &lt;/body>
              &lt;/html> &lt;/body> &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-NDR__Rule_9-1_-specification">
            <language>OCL2.0</language>
            <body>self.base_Realization.client->forAll(complexType|self.base_Realization.supplier->forAll(simpleType|simpleType.name=complexType.name))
              implies self.base_Realization.client.oclAsType(Class).ownedAttribute->isEmpty() </body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDSimpleContent-base_Realization" name="base_Realization" visibility="private" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-6">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Realization"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11" memberEnd="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty-base_Property NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11-ownedEnd" name="extension_XSDAnyElement" visibility="private" type="NIEM_UML_Profile-NIEM_PSM_Profile-XSDAnyProperty" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-11-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID" name="SequenceID">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID">
          <body>An SequenceId Property is implemented in XML schema as a use of the
            structures:sequenceId property. The name of the property must be &quot;sequenceId&quot;, the type
            must be integer and the multiplicity must be 1..1. </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID-XSDStructureId" name="XSDStructureId" constrainedElement="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID" context="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID-XSDStructureId-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID-XSDStructureId">
            <body>A SequenceID Property must have the name &quot;sequenceID&quot;, the type &quot;integer&quot; and
              multiplicity 1..1.</body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID-XSDStructureId-specification">
            <language>OCL2.0</language>
            <body>self.base_Property.name = &quot;sequenceId&quot; and self.base_Property.type.name =
              &quot;integer&quot; and self.base_Property.type.oclIsKindOf(PrimitiveType) and
              self.base_Property.lower = 1 and self.base_Property.upper = 1</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-SequenceID-base_Property" name="base_Property" visibility="private" association="NIEM_UML_Profile-NIEM_PSM_Profile-packagedElement-4">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Property"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode" name="XSDProcessContentsCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode">
          <body>XSDProcessContentsCode supports the processContents attribute of the XSDAnyProperty
            stereotype.</body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-strict" name="strict" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-strict-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-strict"/>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-lax" name="lax" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-lax-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-lax"/>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-skip" name="skip" enumeration="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-skip-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDProcessContentsCode-skip"/>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDDeclaration" name="XSDDeclaration">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDDeclaration-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PSM_Profile-XSDDeclaration">
          <body>The XSDDeclaration stereotype is a specialization of the common References
            stereotype. However, it is constrained such that its client must be an XSDProperty
            Property and its supplier must be an XSDProperty Property or a Namepsace Package. By
            default, the namespace of the global XSD�property declaration referenced by XSDProperty
            is the namespace of its class. The XSDDeclaration stereotype allows the modeler to
            specify the namespace a XSDProperty will reference based on the namespace of another
            XSDProperty or the target namespace of a Namespace Package. Specifically, the client of
            the XSDDeclaration Realization shall reference the namespace indicated by the supplier
            of the XSDDeclaration Realization, the client of the maps to one of the following: an
            attribute use schema component or a particle component whose term property is an element
            declaration schema component. In the first case, the supplier maps to the attribute
            declaration schema component for the attribute use component. In the second case, the
            supplier maps to the element declaration schema component for the particle schema
            component.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_PSM_Profile-XSDDeclaration-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-References" specific="NIEM_UML_Profile-NIEM_PSM_Profile-XSDDeclaration"/>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Profile" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile" name="NIEM_PIM_Profile" URI="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_PIM_Profile" metamodelReference="NIEM_UML_Profile-NIEM_PIM_Profile-packageImport-2">
      <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
        <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpQFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <contents xmi:type="ecore:EPackage" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-ePackage" name="NIEM_PIM_Profile" nsURI="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_PIM_Profile" nsPrefix="NIEM_PIM_Profile">
            <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
              <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpQlY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/4.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile"/>
            </xmi:Extension>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOcpQ1Y8EeO9lbaNv599nw" name="Augments">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpRFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PIM_Profile-Augments"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_UOcpRVY8EeO9lbaNv599nw" name="base_Generalization" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Generalization"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOcpR1Y8EeO9lbaNv599nw" name="InformationModel" eSuperTypes="_UOcpUFY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpSFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpSVY8EeO9lbaNv599nw" source="duplicates">
                  <contents xmi:type="ecore:EReference" xmi:id="_UOcpSlY8EeO9lbaNv599nw" name="base_Package" ordered="false" lowerBound="1">
                    <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpS1Y8EeO9lbaNv599nw" source="redefines" references="_UOcpVFY8EeO9lbaNv599nw"/>
                    </xmi:Extension>
                    <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Package"/>
                  </contents>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_UOcpTVY8EeO9lbaNv599nw" name="defaultPurpose" ordered="false" eType="_UOcpXlY8EeO9lbaNv599nw" defaultValueLiteral="extension"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOcpUFY8EeO9lbaNv599nw" name="NIEM_UML_Profile_NIEM_Common_Profile_Namespace">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpUVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-Namespace"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpUlY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_UOcpU1Y8EeO9lbaNv599nw" key="documentation" value="not(self.version.oclIsUndefined()) -- Constraint also resolved by the requirement&#xA;              that tag &quot;version&quot; is required.&#xA;self.version&lt;>''&#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|t.oclIsKindOf(Class) and&#xA;              not(t.stereotypedBy('PropertyHolder')))&#xA;              ->forAll(type|type.stereotypedBy('NIEMType')) -- PIM Profile Classes default to&#xA;              &lt;&lt;ObjectType>> if not otherwise specified &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|not(t.stereotypedBy('PropertyHolder'))&#xA;              ->forAll(schemaComponent|schemaComponent.name.firstToUpper()=schemaComponent.name)&#xA;            &#xA;not(self.targetNamespace.oclIsUndefined()) and&#xA;              (self.targetNamespace&lt;>'') -- also partially satisfied by multiplicity&#xA;              constraint on targetNamespace &#xA;self.profiledBy('NIEM_PSM_Profile') implies self.base_Package.ownedType&#xA;              ->select(t|t.oclIsKindOf(DataType))&#xA;              ->forAll(simpleType|simpleType.name.matches('.*SimpleType')) &#xA;self.base_Class.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType->select(t|t.oclIsKindOf(Enumeration))&#xA;              ->forAll(otherType|otherType.ownedComment ->exists(documentation|&#xA;              documentation.stereotypedBy('Documentation') and ( documentation.body.startsWith('A&#xA;              data type for a ') or documentation.body.startsWith('A data type for an ') ) ) )&#xA;            &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|t.oclIsKindOf(Enumeration))&#xA;              ->forAll(enumerationDerivedType|enumerationDerivedType.name.matches('.*Code.*'))&#xA;self.targetNamespace.isAbsoluteURI()&#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|&#xA;              t.clientDependency->select(d|d.stereotypedBy('XSDSimpleContent')).supplier->exists(s|s.oclIsKindOf(Enumeration))&#xA;              or ( t.oclIsKindOf(Classifier) and&#xA;              t.oclAsType(Classifier).allParents().clientDependency->select(d|d.stereotypedBy('XSDSimpleContent')).supplier->exists(s|s.oclIsKindOf(Enumeration))&#xA;              ) )&#xA;              ->forAll(enumerationDerivedType|enumerationDerivedType.name.matches('.*Code.*'))&#xA;            &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))&#xA;            &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedType ->select(t|not(t.stereotypedBy('PropertyHolder'))&#xA;              ->forAll(schemaComponent|schemaComponent.name.match('[\\w|\\-]*')) &#xA;self.base_Package.profiledBy('NIEM_PSM_Profile') implies&#xA;              self.base_Package.ownedComment->exists(documentation|documentation.stereotypedBy('Documentation'))&#xA;            "/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_UOcpVFY8EeO9lbaNv599nw" name="base_Package" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Package"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_UOcpVlY8EeO9lbaNv599nw" name="targetNamespace" ordered="false" lowerBound="1" defaultValueLiteral="http://domain.gov/myDomain/">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_UOcpWFY8EeO9lbaNv599nw" name="isConformant" ordered="false" lowerBound="1" defaultValueLiteral="true">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//Boolean"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_UOcpWlY8EeO9lbaNv599nw" name="version" ordered="false" lowerBound="1" defaultValueLiteral="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_UOcpXFY8EeO9lbaNv599nw" name="defaultPrefix" ordered="false">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EEnum" xmi:id="_UOcpXlY8EeO9lbaNv599nw" name="DefaultPurposeCode">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpX1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
              </xmi:Extension>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_UOcpYFY8EeO9lbaNv599nw" name="subset"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_UOcpYVY8EeO9lbaNv599nw" name="constraint" value="1"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_UOcpYlY8EeO9lbaNv599nw" name="exchange" value="2"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_UOcpY1Y8EeO9lbaNv599nw" name="extension" value="3"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_UOcpZFY8EeO9lbaNv599nw" name="incremental" value="4"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_UOcpZVY8EeO9lbaNv599nw" name="reference" value="5"/>
              <eLiterals xmi:type="ecore:EEnumLiteral" xmi:id="_UOcpZlY8EeO9lbaNv599nw" name="replacement" value="6"/>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOcpZ1Y8EeO9lbaNv599nw" name="ReferenceName">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpaFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_UOcpaVY8EeO9lbaNv599nw" name="base_Element" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Element"/>
              </eStructuralFeatures>
              <eStructuralFeatures xmi:type="ecore:EAttribute" xmi:id="_UOcpa1Y8EeO9lbaNv599nw" name="NIEMName" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EDataType" href="http://www.eclipse.org/uml2/4.0.0/Types#//String"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOcpbVY8EeO9lbaNv599nw" name="RoleOf">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpblY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpb1Y8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_UOcpcFY8EeO9lbaNv599nw" key="documentation" value="This constraint is enforced by the PIM/PSM transformation. The Transformation&#xA;              ensures that the &quot;RoleOf&quot; property term becomes part of the target PSM property name.&#xA;This constraint is implemented by the PIM/PSM transformation. Identifying a&#xA;              &lt;Property> as a &lt;&lt;RoleOf>> corresponds to&#xA;              the NIEM naming convention used to identify the roleOf...reference and furthermore&#xA;              establishes the owning &lt;Classifier> as a NIEM Role."/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_UOcpcVY8EeO9lbaNv599nw" name="base_Property" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Property"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOcpc1Y8EeO9lbaNv599nw" name="RolePlayedBy">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpdFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PIM_Profile-RolePlayedBy"/>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_UOcpdVY8EeO9lbaNv599nw" name="base_Generalization" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Generalization"/>
              </eStructuralFeatures>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOcpd1Y8EeO9lbaNv599nw" name="Subsets" eSuperTypes="_UOdQVFY8EeO9lbaNv599nw">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpeFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOcpeVY8EeO9lbaNv599nw" source="duplicates">
                  <contents xmi:type="ecore:EReference" xmi:id="_UOdQUFY8EeO9lbaNv599nw" name="base_Realization" ordered="false" lowerBound="1">
                    <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOdQUVY8EeO9lbaNv599nw" source="redefines" references="_UOdQWFY8EeO9lbaNv599nw"/>
                    </xmi:Extension>
                    <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Realization"/>
                  </contents>
                </eAnnotations>
              </xmi:Extension>
            </eClassifiers>
            <eClassifiers xmi:type="ecore:EClass" xmi:id="_UOdQVFY8EeO9lbaNv599nw" name="NIEM_UML_Profile_NIEM_Common_Profile_References">
              <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOdQVVY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML" references="NIEM_UML_Profile-NIEM_Common_Profile-References"/>
                <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_UOdQVlY8EeO9lbaNv599nw" source="http://www.eclipse.org/emf/2002/GenModel">
                  <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_UOdQV1Y8EeO9lbaNv599nw" key="documentation" value="( self.base_Realization.client->size()=1) and (&#xA;              self.base_Realization.supplier->size()=1) and&#xA;              self.base_Realization.client->forAll(client|client.oclIsKindOf(Classifier)) and&#xA;              self.base_Realization.supplier->forAll(supplier|supplier.oclIsKindOf(Classifier)&#xA;              and not(supplier.stereotypedBy('PropertyHolder')) ) ) implies ( (&#xA;              self.base_Realization.client.oclAsType(Classifier).attribute&#xA;              ->forAll(clientAttribute|&#xA;              self.base_Realization.supplier.oclAsType(Classifier).attribute&#xA;              ->forAll(supplierAttribute| (clientAttribute.name=supplierAttribute.name)&#xA;              implies ( (clientAttribute.lower>=supplierAttribute.lower) and (&#xA;              (supplierAttribute.upper=-1) or&#xA;              (clientAttribute.upper&lt;=supplierAttribute.upper) ) and (&#xA;              (clientAttribute.upper=-1) or (clientAttribute.lower&lt;=clientAttribute.upper) )&#xA;              ) ) ) ) and( self.base_Realization.supplier.oclAsType(Classifier).attribute&#xA;              ->select(a|a.lower>0) ->forAll(supplierAttribute|&#xA;              self.base_Realization.client.oclAsType(Classifier).attribute->exists(clientAttribute|clientAttribute.name=supplierName)&#xA;              ) ) )"/>
                </eAnnotations>
              </xmi:Extension>
              <eStructuralFeatures xmi:type="ecore:EReference" xmi:id="_UOdQWFY8EeO9lbaNv599nw" name="base_Realization" ordered="false" lowerBound="1">
                <eType xmi:type="ecore:EClass" href="http://www.eclipse.org/uml2/4.0.0/UML#//Realization"/>
              </eStructuralFeatures>
            </eClassifiers>
          </contents>
        </eAnnotations>
      </xmi:Extension>
      <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile">
        <body>The NIEM PIM Profile comprises stereotypes that are used in NIEM PIMs but not NIEM
          PSMs. Further, the NIEM PIM Profile imports the NIEM Common Profile and, therefore,
          includes all the stereotypes and metaclasses covered by that profile. In addition, the UML
          metamodel subset covered by the NIEM PIM Profile also includes the metaclasses Association
          and AssociationClass, even though they are not specifically extended by any stereotypes in
          the profile.</body>
      </ownedComment>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packageImport-1" importedPackage="NIEM_UML_Profile-NIEM_Common_Profile" importingNamespace="NIEM_UML_Profile-NIEM_PIM_Profile"/>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packageImport-2" importingNamespace="NIEM_UML_Profile-NIEM_PIM_Profile">
        <importedPackage xmi:type="uml:Model" href="http://www.omg.org/spec/UML/20110701/UML.xmi#_0"/>
      </packageImport>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-Augments" name="Augments">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-Augments-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-Augments">
          <body>An Augments Generalization specifies that the special Class is an augmentation type
            that is restricted to apply to instances of the general Class. </body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-Augments-base_Generalization" name="base_Generalization" visibility="private" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Generalization"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2" memberEnd="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-base_Property NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2-ownedEnd" name="extension_RoleOf" visibility="private" type="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel" name="InformationModel">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel">
          <body>The contents of an InformationModel Package provide a platform-independent
            perspective on the structure of information to be exchanged in NIEM messages. Such a
            model is always taken to represent a NIEM namespace, but it may also be given a default
            purpose as modeled, independent of the implementation of that namespace. This allows a
            modeler to identify the intended purposes (e.g., reference, subset, exchange, etc.) of
            various information models within a set, without having to create a complete MPD model
            for the set.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-Namespace" specific="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-base_Package" name="base_Package" visibility="private" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Package"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-defaultPurpose" name="defaultPurpose" visibility="public" type="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-defaultPurpose-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-defaultPurpose">
            <body>The default purpose for which an information model is intended. If an
              InformationModel Package is modeled as being included as an artifact in an MPD, then,
              unless otherwise specified, the purpose of the artifact is by default taken to be the
              schema purpose code corresponding to the value of the defaultPurpose attribute.</body>
          </ownedComment>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-defaultPurpose-lowerValue"/>
          <defaultValue xmi:type="uml:InstanceValue" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-defaultPurpose-defaultValue" instance="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-extension"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName" name="ReferenceName">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName">
          <body>The ReferenceName stereotype is used on an Element that has a name that does not
            conform to the naming conventions required by the NIEM NDR or is otherwise not the
            desired NIEM name. The NIEMName attribute must provide a name for the Element that
            conforms to the relevant NDR naming rules for the specific kind of Element to which the
            stereotype is applied.</body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName-base_Element" name="base_Element" visibility="private" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Element"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName-NIEMName" name="NIEMName" visibility="public">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName-NIEMName-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName-NIEMName">
            <body>A NIEM NDR-conformant name to be applied to an Element. The NIEMName will override
              any name generated from the UML name..</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5" memberEnd="NIEM_UML_Profile-NIEM_PIM_Profile-Augments-base_Generalization NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5-ownedEnd" name="extension_Augments" visibility="private" type="NIEM_UML_Profile-NIEM_PIM_Profile-Augments" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-5-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6" memberEnd="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel-base_Package NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6-ownedEnd" name="extension_InformationModel" visibility="private" type="NIEM_UML_Profile-NIEM_PIM_Profile-InformationModel" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-6-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode" name="DefaultPurposeCode">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body> The
            possible purposes for an information model. This enumeration provides the allowed values
            for the defaultPurpose attribute of the InformationModel stereotype. The values
            correspond to the schema purpose codes for an MPD artifact. &lt;/body>
            &lt;/html> MPD artifact. &lt;/body> &lt;/html>
            ml> </body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-subset" name="subset" enumeration="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-constraint" name="constraint" enumeration="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-exchange" name="exchange" enumeration="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-extension" name="extension" enumeration="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-incremental" name="incremental" enumeration="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-reference" name="reference" enumeration="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode-replacement" name="replacement" enumeration="NIEM_UML_Profile-NIEM_PIM_Profile-DefaultPurposeCode"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8" memberEnd="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName-base_Element NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8-ownedEnd" name="extension_" visibility="private" type="NIEM_UML_Profile-NIEM_PIM_Profile-ReferenceName" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-8-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf" name="RoleOf">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf">
          <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
            margin:0px;} &lt;/style> &lt;/head> &lt;body>
            &lt;p> The RoleOf stereotype is applied to a Property of a Class representing
            a NIEM role type, whose type identifies the base type of that role type. A RoleOf
            Property must be a reference (i.e., have aggregation=none). A NIEM role type is a type
            that represents a particular function, purpose, usage, or role of an object.
            &lt;/p> &lt;/body> &lt;/html> usage, or role of an
            object. &lt;/p> &lt;/body> &lt;/html>
            &lt;/html> </body>
        </ownedComment>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_9-35_" name="NDR [Rule 9-35]" constrainedElement="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf" context="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_9-35_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_9-35_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 9-35] (REF, SUB, EXT)&lt;/b>
              Within the schema, the name of a role SHALL use the property term RoleOf.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b>
              Using the property term RoleOf immediately identifies an element as representing a
              role. &lt;/p> &lt;/body> &lt;/html> ement as
              representing a role. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_9-35_-specification">
            <language>English</language>
            <body>This constraint is enforced by the PIM/PSM transformation. The Transformation
              ensures that the &quot;RoleOf&quot; property term becomes part of the target PSM property name.</body>
          </specification>
        </ownedRule>
        <ownedRule xmi:type="uml:Constraint" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_7-40_" name="NDR [Rule 7-40]" constrainedElement="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf" context="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf">
          <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_7-40_-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_7-40_">
            <body>&lt;html> &lt;head> &lt;style> p {padding:0px;
              margin:0px;} &lt;/style> &lt;/head> &lt;body>
              &lt;p> &lt;b>[Rule 7-40] (REF, SUB, EXT)&lt;/b>
              Within the schema, any element with a name beginning with the string RoleOf SHALL
              represent a base type, of which the containing type represents a role.
              &lt;/p> &lt;p> &lt;b>Rationale&lt;/b> A
              RoleOf element references its corresponding base element. The RoleOf label on the
              reference element ensures that a role object is distinguishable from other objects and
              its link to the associated base is also distinguishable from the additional properties
              that are characteristic of this role or that add information. &lt;/p>
              &lt;/body> &lt;/html> are characteristic of this role or that
              add information. &lt;/p> &lt;/body> &lt;/html>
              &lt;/html> </body>
          </ownedComment>
          <specification xmi:type="uml:OpaqueExpression" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-NDR__Rule_7-40_-specification">
            <language>English</language>
            <body>This constraint is implemented by the PIM/PSM transformation. Identifying a
              &lt;Property> as a &lt;&lt;RoleOf>> corresponds to
              the NIEM naming convention used to identify the roleOf...reference and furthermore
              establishes the owning &lt;Classifier> as a NIEM Role.</body>
          </specification>
        </ownedRule>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RoleOf-base_Property" name="base_Property" visibility="private" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-2">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Property"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10" memberEnd="NIEM_UML_Profile-NIEM_PIM_Profile-RolePlayedBy-base_Generalization NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10-ownedEnd" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10-ownedEnd">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10-ownedEnd" name="extension_" visibility="private" type="NIEM_UML_Profile-NIEM_PIM_Profile-RolePlayedBy" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10-ownedEnd-lowerValue"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RolePlayedBy" name="RolePlayedBy">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RolePlayedBy-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-RolePlayedBy">
          <body>RolePlayedBy Generalization specifies that the special class is to be considered the
            type of a role that is played by instances of the general class. In the PSM this will
            map to a property with the &quot;RoleOf&quot; prefix..</body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-RolePlayedBy-base_Generalization" name="base_Generalization" visibility="private" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-10">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Generalization"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Stereotype" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets" name="Subsets">
        <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets">
          <body>A Realization signifying a NIEM subsetting relationship between a client derived (subset) element and a supplier base (reference) element.  The &lt;&lt;Subsets>> Realization must be between the same meta-types: either Properties, Classifiers, or &lt;&lt;InformationModel>> packages.  The &lt;&lt;Subsets>> Realization must be between elements owned by different &lt;&lt;InformationModel>> packages.  The targetNamespace of the distinct &lt;&lt;InformationModel>> packages must be identical.  The defaultPurpose of client and supplier may be one of the following combinations:  client is subset, supplier is reference; client is reference, supplier is reference; client is extension, supplier is extension; client is constraint, supplier is exchange, subset, extension, or reference.
</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets-generalization" general="NIEM_UML_Profile-NIEM_Common_Profile-References" specific="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets-base_Realization" name="base_Realization" visibility="private" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11">
          <type xmi:type="uml:Class" href="http://www.omg.org/spec/UML/20110701/UML.xmi#Realization"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Extension" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11" memberEnd="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11-extension_ NIEM_UML_Profile-NIEM_PIM_Profile-Subsets-base_Realization" navigableOwnedEnd="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11-extension_">
        <ownedEnd xmi:type="uml:ExtensionEnd" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11-extension_" name="extension_" visibility="private" type="NIEM_UML_Profile-NIEM_PIM_Profile-Subsets" aggregation="composite" owningAssociation="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11" association="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11">
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="NIEM_UML_Profile-NIEM_PIM_Profile-packagedElement-11-extension_-lowerValue"/>
        </ownedEnd>
      </packagedElement>
    </packagedElement>
    <packagedElement xmi:type="uml:Profile" xmi:id="NIEM_UML_Profile-NIEM_UML_Profile" name="NIEM_UML_Profile" URI="http://www.omg.org/spec/NIEM-UML/20120501" metamodelReference="NIEM_UML_Profile-NIEM_UML_Profile-packageImport-1">
      <xmi:Extension extender="http://www.eclipse.org/emf/2002/Ecore">
        <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_IH7jYFY8EeO9lbaNv599nw" source="http://www.eclipse.org/uml2/2.0.0/UML">
          <contents xmi:type="ecore:EPackage" xmi:id="NIEM_UML_Profile-NIEM_UML_Profile-ePackage" name="NIEM_UML_Profile" nsURI="http://www.omg.org/spec/NIEM-UML/20120501" nsPrefix="NIEM_UML_Profile"/>
        </eAnnotations>
      </xmi:Extension>
      <ownedComment xmi:type="uml:Comment" xmi:id="NIEM_UML_Profile-NIEM_UML_Profile-ownedComment" annotatedElement="NIEM_UML_Profile-NIEM_UML_Profile">
        <body>The NIEM UML Profile imports the NIEM PIM Profile, the NIEM PSM Profile and the Model
          Package Description Profile, so all three of these profiles can effectively be imported
          just by importing the single NIEM UML Profile.</body>
      </ownedComment>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_UML_Profile-packageImport-1" importingNamespace="NIEM_UML_Profile-NIEM_UML_Profile">
        <importedPackage xmi:type="uml:Model" href="http://www.omg.org/spec/UML/20110701/UML.xmi#_0"/>
      </packageImport>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_UML_Profile-packageImport-2" importedPackage="NIEM_UML_Profile-Model_Package_Description_Profile" importingNamespace="NIEM_UML_Profile-NIEM_UML_Profile"/>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_UML_Profile-packageImport-3" importedPackage="NIEM_UML_Profile-NIEM_PSM_Profile" importingNamespace="NIEM_UML_Profile-NIEM_UML_Profile"/>
      <packageImport xmi:type="uml:PackageImport" xmi:id="NIEM_UML_Profile-NIEM_UML_Profile-packageImport-4" importedPackage="NIEM_UML_Profile-NIEM_PIM_Profile" importingNamespace="NIEM_UML_Profile-NIEM_UML_Profile"/>
    </packagedElement>
  </uml:Package>
  <cmof:Tag xmi:id="_1">
    <element xmi:type="xsd:anyType" href="#NIEM_UML_Profile-NIEM_UML_Profile"/>
    <name>org.omg.xmi.nsPrefix</name>
    <value>NIEM_UML_Profile</value>
  </cmof:Tag>
  <cmof:Tag xmi:id="_2">
    <element xmi:type="xsd:anyType" href="#NIEM_UML_Profile-NIEM_Common_Profile"/>
    <name>org.omg.xmi.nsPrefix</name>
    <value>NIEM_Common_Profile</value>
  </cmof:Tag>
  <cmof:Tag xmi:id="_3">
    <element xmi:type="xsd:anyType" href="#NIEM_UML_Profile-NIEM_PIM_Profile"/>
    <name>org.omg.xmi.nsPrefix</name>
    <value>NIEM_PIM_Profile</value>
  </cmof:Tag>
  <cmof:Tag xmi:id="_4">
    <element xmi:type="xsd:anyType" href="#NIEM_UML_Profile-NIEM_PSM_Profile"/>
    <name>org.omg.xmi.nsPrefix</name>
    <value>NIEM_PSM_Profile</value>
  </cmof:Tag>
  <cmof:Tag xmi:id="_5">
    <element xmi:type="xsd:anyType" href="#NIEM_UML_Profile-Model_Package_Description_Profile"/>
    <name>org.omg.xmi.nsPrefix</name>
    <value>Model_Package_Description_Profile</value>
  </cmof:Tag>
  <cmof:Tag xmi:id="_6" name="org.omg.xmi.nsPrefix" value="NIEM_Common_Profile" element="NIEM_UML_Profile-NIEM_Common_Profile"/>
  <cmof:Tag xmi:id="_7" name="org.omg.xmi.nsURI" value="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_Common_Profile" element="NIEM_UML_Profile-NIEM_Common_Profile"/>
  <cmof:Tag xmi:id="_8" name="org.omg.xmi.nsPrefix" value="Model_Package_Description_Profile" element="NIEM_UML_Profile-Model_Package_Description_Profile"/>
  <cmof:Tag xmi:id="_9" name="org.omg.xmi.nsURI" value="http://www.omg.org/spec/NIEM-UML/20120501/Model_Package_Description_Profile" element="NIEM_UML_Profile-Model_Package_Description_Profile"/>
  <cmof:Tag xmi:id="_10" name="org.omg.xmi.nsPrefix" value="NIEM_PSM_Profile" element="NIEM_UML_Profile-NIEM_PSM_Profile"/>
  <cmof:Tag xmi:id="_11" name="org.omg.xmi.nsURI" value="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_PSM_Profile" element="NIEM_UML_Profile-NIEM_PSM_Profile"/>
  <cmof:Tag xmi:id="_12" name="org.omg.xmi.nsPrefix" value="NIEM_PIM_Profile" element="NIEM_UML_Profile-NIEM_PIM_Profile"/>
  <cmof:Tag xmi:id="_13" name="org.omg.xmi.nsURI" value="http://www.omg.org/spec/NIEM-UML/20120501/NIEM_PIM_Profile" element="NIEM_UML_Profile-NIEM_PIM_Profile"/>
  <cmof:Tag xmi:id="_14" name="org.omg.xmi.nsPrefix" value="NIEM_UML_Profile" element="NIEM_UML_Profile-NIEM_UML_Profile"/>
  <cmof:Tag xmi:id="_15" name="org.omg.xmi.nsURI" value="http://www.omg.org/spec/NIEM-UML/20120501" element="NIEM_UML_Profile-NIEM_UML_Profile"/>
</xmi:XMI>
